-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes128_encrypt_block_hw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    sin_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    sin_TVALID : IN STD_LOGIC;
    sin_TREADY : OUT STD_LOGIC;
    sin_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    sin_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    sin_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sin_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    sin_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    sin_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    sout_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    sout_TVALID : OUT STD_LOGIC;
    sout_TREADY : IN STD_LOGIC;
    sout_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    sout_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    sout_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    sout_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    sout_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    sout_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of aes128_encrypt_block_hw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "aes128_encrypt_block_hw,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.498000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1294,HLS_SYN_LUT=3903,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_A0 : STD_LOGIC_VECTOR (9 downto 0) := "0010100000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal sin_V_data_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal sin_V_data_V_0_vld_in : STD_LOGIC;
    signal sin_V_data_V_0_vld_out : STD_LOGIC;
    signal sin_V_data_V_0_ack_in : STD_LOGIC;
    signal sin_V_data_V_0_ack_out : STD_LOGIC;
    signal sin_V_data_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal sin_V_data_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal sin_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal sin_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal sin_V_data_V_0_sel : STD_LOGIC;
    signal sin_V_data_V_0_load_A : STD_LOGIC;
    signal sin_V_data_V_0_load_B : STD_LOGIC;
    signal sin_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sin_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal sin_V_dest_V_0_vld_in : STD_LOGIC;
    signal sin_V_dest_V_0_ack_out : STD_LOGIC;
    signal sin_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sout_V_data_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal sout_V_data_V_1_vld_in : STD_LOGIC;
    signal sout_V_data_V_1_vld_out : STD_LOGIC;
    signal sout_V_data_V_1_ack_in : STD_LOGIC;
    signal sout_V_data_V_1_ack_out : STD_LOGIC;
    signal sout_V_data_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal sout_V_data_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal sout_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal sout_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal sout_V_data_V_1_sel : STD_LOGIC;
    signal sout_V_data_V_1_load_A : STD_LOGIC;
    signal sout_V_data_V_1_load_B : STD_LOGIC;
    signal sout_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sout_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal sout_V_keep_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_V_keep_V_1_vld_in : STD_LOGIC;
    signal sout_V_keep_V_1_vld_out : STD_LOGIC;
    signal sout_V_keep_V_1_ack_in : STD_LOGIC;
    signal sout_V_keep_V_1_ack_out : STD_LOGIC;
    signal sout_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal sout_V_keep_V_1_sel : STD_LOGIC;
    signal sout_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sout_V_strb_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_V_strb_V_1_vld_in : STD_LOGIC;
    signal sout_V_strb_V_1_vld_out : STD_LOGIC;
    signal sout_V_strb_V_1_ack_in : STD_LOGIC;
    signal sout_V_strb_V_1_ack_out : STD_LOGIC;
    signal sout_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal sout_V_strb_V_1_sel : STD_LOGIC;
    signal sout_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sout_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_V_user_V_1_vld_in : STD_LOGIC;
    signal sout_V_user_V_1_vld_out : STD_LOGIC;
    signal sout_V_user_V_1_ack_in : STD_LOGIC;
    signal sout_V_user_V_1_ack_out : STD_LOGIC;
    signal sout_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal sout_V_user_V_1_sel : STD_LOGIC;
    signal sout_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sout_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_V_last_V_1_vld_in : STD_LOGIC;
    signal sout_V_last_V_1_vld_out : STD_LOGIC;
    signal sout_V_last_V_1_ack_in : STD_LOGIC;
    signal sout_V_last_V_1_ack_out : STD_LOGIC;
    signal sout_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal sout_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal sout_V_last_V_1_sel : STD_LOGIC;
    signal sout_V_last_V_1_load_A : STD_LOGIC;
    signal sout_V_last_V_1_load_B : STD_LOGIC;
    signal sout_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sout_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal sout_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_V_id_V_1_vld_in : STD_LOGIC;
    signal sout_V_id_V_1_vld_out : STD_LOGIC;
    signal sout_V_id_V_1_ack_in : STD_LOGIC;
    signal sout_V_id_V_1_ack_out : STD_LOGIC;
    signal sout_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal sout_V_id_V_1_sel : STD_LOGIC;
    signal sout_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sout_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_V_dest_V_1_vld_in : STD_LOGIC;
    signal sout_V_dest_V_1_vld_out : STD_LOGIC;
    signal sout_V_dest_V_1_ack_in : STD_LOGIC;
    signal sout_V_dest_V_1_ack_out : STD_LOGIC;
    signal sout_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal sout_V_dest_V_1_sel : STD_LOGIC;
    signal sout_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sbox_hw_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_hw_ce0 : STD_LOGIC;
    signal sbox_hw_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sin_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond3_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal i_cast_fu_344_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_cast_reg_545 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_11_fu_354_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_11_reg_553 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_6_fu_366_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal tmp_41_cast_fu_413_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_41_cast_reg_569 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond2_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_424_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_577 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal state_addr_6_reg_582 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_i_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_13_fu_435_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_13_reg_587 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_12_fu_452_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_12_reg_600 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal state_addr_5_reg_605 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_i2_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal i_2_cast_fu_468_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_cast_reg_615 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_block_state25 : BOOLEAN;
    signal i_14_fu_478_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_14_reg_623 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_31_fu_488_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_31_reg_628 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond4_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_7_fu_506_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_7_reg_636 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal exitcond_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_646 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_ce0 : STD_LOGIC;
    signal state_we0 : STD_LOGIC;
    signal state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal round_key_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal round_key_ce0 : STD_LOGIC;
    signal round_key_we0 : STD_LOGIC;
    signal round_key_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal expanded_key_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal expanded_key_ce0 : STD_LOGIC;
    signal expanded_key_we0 : STD_LOGIC;
    signal expanded_key_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_mix_columns_h_fu_308_ap_start : STD_LOGIC;
    signal grp_aes128_mix_columns_h_fu_308_ap_done : STD_LOGIC;
    signal grp_aes128_mix_columns_h_fu_308_ap_idle : STD_LOGIC;
    signal grp_aes128_mix_columns_h_fu_308_ap_ready : STD_LOGIC;
    signal grp_aes128_mix_columns_h_fu_308_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes128_mix_columns_h_fu_308_state_ce0 : STD_LOGIC;
    signal grp_aes128_mix_columns_h_fu_308_state_we0 : STD_LOGIC;
    signal grp_aes128_mix_columns_h_fu_308_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_expand_key_hw_fu_313_ap_start : STD_LOGIC;
    signal grp_aes128_expand_key_hw_fu_313_ap_done : STD_LOGIC;
    signal grp_aes128_expand_key_hw_fu_313_ap_idle : STD_LOGIC;
    signal grp_aes128_expand_key_hw_fu_313_ap_ready : STD_LOGIC;
    signal grp_aes128_expand_key_hw_fu_313_expanded_key_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_expand_key_hw_fu_313_expanded_key_ce0 : STD_LOGIC;
    signal grp_aes128_expand_key_hw_fu_313_expanded_key_we0 : STD_LOGIC;
    signal grp_aes128_expand_key_hw_fu_313_expanded_key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_shift_rows_hw_fu_324_ap_start : STD_LOGIC;
    signal grp_aes128_shift_rows_hw_fu_324_ap_done : STD_LOGIC;
    signal grp_aes128_shift_rows_hw_fu_324_ap_idle : STD_LOGIC;
    signal grp_aes128_shift_rows_hw_fu_324_ap_ready : STD_LOGIC;
    signal grp_aes128_shift_rows_hw_fu_324_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes128_shift_rows_hw_fu_324_state_ce0 : STD_LOGIC;
    signal grp_aes128_shift_rows_hw_fu_324_state_we0 : STD_LOGIC;
    signal grp_aes128_shift_rows_hw_fu_324_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_extract_round_fu_329_ap_start : STD_LOGIC;
    signal grp_aes128_extract_round_fu_329_ap_done : STD_LOGIC;
    signal grp_aes128_extract_round_fu_329_ap_idle : STD_LOGIC;
    signal grp_aes128_extract_round_fu_329_ap_ready : STD_LOGIC;
    signal grp_aes128_extract_round_fu_329_expanded_key_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_extract_round_fu_329_expanded_key_ce0 : STD_LOGIC;
    signal grp_aes128_extract_round_fu_329_expanded_key_offset : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aes128_extract_round_fu_329_round_key_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes128_extract_round_fu_329_round_key_ce0 : STD_LOGIC;
    signal grp_aes128_extract_round_fu_329_round_key_we0 : STD_LOGIC;
    signal grp_aes128_extract_round_fu_329_round_key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_add_round_key_fu_338_ap_start : STD_LOGIC;
    signal grp_aes128_add_round_key_fu_338_ap_done : STD_LOGIC;
    signal grp_aes128_add_round_key_fu_338_ap_idle : STD_LOGIC;
    signal grp_aes128_add_round_key_fu_338_ap_ready : STD_LOGIC;
    signal grp_aes128_add_round_key_fu_338_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes128_add_round_key_fu_338_state_ce0 : STD_LOGIC;
    signal grp_aes128_add_round_key_fu_338_state_we0 : STD_LOGIC;
    signal grp_aes128_add_round_key_fu_338_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_add_round_key_fu_338_round_key_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes128_add_round_key_fu_338_round_key_ce0 : STD_LOGIC;
    signal i_reg_230 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_reg_241 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_252 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_i_reg_264 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_i1_reg_275 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal i_2_reg_286 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal j_1_reg_297 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes128_mix_columns_h_fu_308_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_aes128_expand_key_hw_fu_313_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_aes128_shift_rows_hw_fu_324_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_aes128_extract_round_fu_329_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_aes128_add_round_key_fu_338_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_30_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_20_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i6_fu_463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_377_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_28_fu_381_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_29_fu_389_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_405_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_fu_484_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_37_fu_512_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_32_fu_516_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_33_fu_524_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_cast_fu_496_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_35_fu_534_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_block_state22_on_subcall_done : BOOLEAN;

    component aes128_mix_columns_h IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes128_expand_key_hw IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        expanded_key_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expanded_key_ce0 : OUT STD_LOGIC;
        expanded_key_we0 : OUT STD_LOGIC;
        expanded_key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expanded_key_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes128_shift_rows_hw IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes128_extract_round IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        expanded_key_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expanded_key_ce0 : OUT STD_LOGIC;
        expanded_key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        expanded_key_offset : IN STD_LOGIC_VECTOR (9 downto 0);
        round_key_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        round_key_ce0 : OUT STD_LOGIC;
        round_key_we0 : OUT STD_LOGIC;
        round_key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes128_add_round_key IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        round_key_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        round_key_ce0 : OUT STD_LOGIC;
        round_key_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes128_expand_keycud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes128_encrypt_blhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes128_encrypt_bljbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sbox_hw_U : component aes128_expand_keycud
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sbox_hw_address0,
        ce0 => sbox_hw_ce0,
        q0 => sbox_hw_q0);

    state_U : component aes128_encrypt_blhbi
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => state_address0,
        ce0 => state_ce0,
        we0 => state_we0,
        d0 => state_d0,
        q0 => state_q0);

    round_key_U : component aes128_encrypt_blhbi
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => round_key_address0,
        ce0 => round_key_ce0,
        we0 => round_key_we0,
        d0 => grp_aes128_extract_round_fu_329_round_key_d0,
        q0 => round_key_q0);

    expanded_key_U : component aes128_encrypt_bljbC
    generic map (
        DataWidth => 8,
        AddressRange => 176,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => expanded_key_address0,
        ce0 => expanded_key_ce0,
        we0 => expanded_key_we0,
        d0 => grp_aes128_expand_key_hw_fu_313_expanded_key_d0,
        q0 => expanded_key_q0);

    grp_aes128_mix_columns_h_fu_308 : component aes128_mix_columns_h
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes128_mix_columns_h_fu_308_ap_start,
        ap_done => grp_aes128_mix_columns_h_fu_308_ap_done,
        ap_idle => grp_aes128_mix_columns_h_fu_308_ap_idle,
        ap_ready => grp_aes128_mix_columns_h_fu_308_ap_ready,
        state_address0 => grp_aes128_mix_columns_h_fu_308_state_address0,
        state_ce0 => grp_aes128_mix_columns_h_fu_308_state_ce0,
        state_we0 => grp_aes128_mix_columns_h_fu_308_state_we0,
        state_d0 => grp_aes128_mix_columns_h_fu_308_state_d0,
        state_q0 => state_q0);

    grp_aes128_expand_key_hw_fu_313 : component aes128_expand_key_hw
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes128_expand_key_hw_fu_313_ap_start,
        ap_done => grp_aes128_expand_key_hw_fu_313_ap_done,
        ap_idle => grp_aes128_expand_key_hw_fu_313_ap_idle,
        ap_ready => grp_aes128_expand_key_hw_fu_313_ap_ready,
        expanded_key_address0 => grp_aes128_expand_key_hw_fu_313_expanded_key_address0,
        expanded_key_ce0 => grp_aes128_expand_key_hw_fu_313_expanded_key_ce0,
        expanded_key_we0 => grp_aes128_expand_key_hw_fu_313_expanded_key_we0,
        expanded_key_d0 => grp_aes128_expand_key_hw_fu_313_expanded_key_d0,
        expanded_key_q0 => expanded_key_q0);

    grp_aes128_shift_rows_hw_fu_324 : component aes128_shift_rows_hw
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes128_shift_rows_hw_fu_324_ap_start,
        ap_done => grp_aes128_shift_rows_hw_fu_324_ap_done,
        ap_idle => grp_aes128_shift_rows_hw_fu_324_ap_idle,
        ap_ready => grp_aes128_shift_rows_hw_fu_324_ap_ready,
        state_address0 => grp_aes128_shift_rows_hw_fu_324_state_address0,
        state_ce0 => grp_aes128_shift_rows_hw_fu_324_state_ce0,
        state_we0 => grp_aes128_shift_rows_hw_fu_324_state_we0,
        state_d0 => grp_aes128_shift_rows_hw_fu_324_state_d0,
        state_q0 => state_q0);

    grp_aes128_extract_round_fu_329 : component aes128_extract_round
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes128_extract_round_fu_329_ap_start,
        ap_done => grp_aes128_extract_round_fu_329_ap_done,
        ap_idle => grp_aes128_extract_round_fu_329_ap_idle,
        ap_ready => grp_aes128_extract_round_fu_329_ap_ready,
        expanded_key_address0 => grp_aes128_extract_round_fu_329_expanded_key_address0,
        expanded_key_ce0 => grp_aes128_extract_round_fu_329_expanded_key_ce0,
        expanded_key_q0 => expanded_key_q0,
        expanded_key_offset => grp_aes128_extract_round_fu_329_expanded_key_offset,
        round_key_address0 => grp_aes128_extract_round_fu_329_round_key_address0,
        round_key_ce0 => grp_aes128_extract_round_fu_329_round_key_ce0,
        round_key_we0 => grp_aes128_extract_round_fu_329_round_key_we0,
        round_key_d0 => grp_aes128_extract_round_fu_329_round_key_d0);

    grp_aes128_add_round_key_fu_338 : component aes128_add_round_key
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes128_add_round_key_fu_338_ap_start,
        ap_done => grp_aes128_add_round_key_fu_338_ap_done,
        ap_idle => grp_aes128_add_round_key_fu_338_ap_idle,
        ap_ready => grp_aes128_add_round_key_fu_338_ap_ready,
        state_address0 => grp_aes128_add_round_key_fu_338_state_address0,
        state_ce0 => grp_aes128_add_round_key_fu_338_state_ce0,
        state_we0 => grp_aes128_add_round_key_fu_338_state_we0,
        state_d0 => grp_aes128_add_round_key_fu_338_state_d0,
        state_q0 => state_q0,
        round_key_address0 => grp_aes128_add_round_key_fu_338_round_key_address0,
        round_key_ce0 => grp_aes128_add_round_key_fu_338_round_key_ce0,
        round_key_q0 => round_key_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_aes128_add_round_key_fu_338_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aes128_add_round_key_fu_338_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    grp_aes128_add_round_key_fu_338_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes128_add_round_key_fu_338_ap_ready = ap_const_logic_1)) then 
                    grp_aes128_add_round_key_fu_338_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes128_expand_key_hw_fu_313_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aes128_expand_key_hw_fu_313_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond1_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_aes128_expand_key_hw_fu_313_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes128_expand_key_hw_fu_313_ap_ready = ap_const_logic_1)) then 
                    grp_aes128_expand_key_hw_fu_313_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes128_extract_round_fu_329_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aes128_extract_round_fu_329_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((exitcond_i2_fu_446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((exitcond2_fu_399_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
                    grp_aes128_extract_round_fu_329_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes128_extract_round_fu_329_ap_ready = ap_const_logic_1)) then 
                    grp_aes128_extract_round_fu_329_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes128_mix_columns_h_fu_308_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aes128_mix_columns_h_fu_308_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_aes128_mix_columns_h_fu_308_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes128_mix_columns_h_fu_308_ap_ready = ap_const_logic_1)) then 
                    grp_aes128_mix_columns_h_fu_308_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes128_shift_rows_hw_fu_324_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aes128_shift_rows_hw_fu_324_ap_start_reg <= ap_const_logic_0;
            else
                if ((((exitcond_i2_fu_446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((exitcond_i_fu_418_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
                    grp_aes128_shift_rows_hw_fu_324_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes128_shift_rows_hw_fu_324_ap_ready = ap_const_logic_1)) then 
                    grp_aes128_shift_rows_hw_fu_324_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    sin_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sin_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((sin_V_data_V_0_ack_out = ap_const_logic_1) and (sin_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        sin_V_data_V_0_sel_rd <= not(sin_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sin_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sin_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((sin_V_data_V_0_ack_in = ap_const_logic_1) and (sin_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        sin_V_data_V_0_sel_wr <= not(sin_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    sin_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sin_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((sin_V_data_V_0_state = ap_const_lv2_2) and (sin_V_data_V_0_vld_in = ap_const_logic_0)) or ((sin_V_data_V_0_state = ap_const_lv2_3) and (sin_V_data_V_0_vld_in = ap_const_logic_0) and (sin_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    sin_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((sin_V_data_V_0_state = ap_const_lv2_1) and (sin_V_data_V_0_ack_out = ap_const_logic_0)) or ((sin_V_data_V_0_state = ap_const_lv2_3) and (sin_V_data_V_0_ack_out = ap_const_logic_0) and (sin_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    sin_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((sin_V_data_V_0_vld_in = ap_const_logic_0) and (sin_V_data_V_0_ack_out = ap_const_logic_1))) and not(((sin_V_data_V_0_ack_out = ap_const_logic_0) and (sin_V_data_V_0_vld_in = ap_const_logic_1))) and (sin_V_data_V_0_state = ap_const_lv2_3)) or ((sin_V_data_V_0_state = ap_const_lv2_1) and (sin_V_data_V_0_ack_out = ap_const_logic_1)) or ((sin_V_data_V_0_state = ap_const_lv2_2) and (sin_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    sin_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    sin_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sin_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sin_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((sin_V_dest_V_0_state = ap_const_lv2_2) and (sin_V_dest_V_0_vld_in = ap_const_logic_0)) or ((sin_V_dest_V_0_state = ap_const_lv2_3) and (sin_V_dest_V_0_vld_in = ap_const_logic_0) and (sin_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    sin_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((sin_V_dest_V_0_state = ap_const_lv2_1) and (sin_V_dest_V_0_ack_out = ap_const_logic_0)) or ((sin_V_dest_V_0_state = ap_const_lv2_3) and (sin_V_dest_V_0_ack_out = ap_const_logic_0) and (sin_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    sin_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((sin_V_dest_V_0_vld_in = ap_const_logic_0) and (sin_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((sin_V_dest_V_0_ack_out = ap_const_logic_0) and (sin_V_dest_V_0_vld_in = ap_const_logic_1))) and (sin_V_dest_V_0_state = ap_const_lv2_3)) or ((sin_V_dest_V_0_state = ap_const_lv2_1) and (sin_V_dest_V_0_ack_out = ap_const_logic_1)) or ((sin_V_dest_V_0_state = ap_const_lv2_2) and (sin_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    sin_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    sin_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sout_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((sout_V_data_V_1_ack_out = ap_const_logic_1) and (sout_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        sout_V_data_V_1_sel_rd <= not(sout_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sout_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((sout_V_data_V_1_ack_in = ap_const_logic_1) and (sout_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        sout_V_data_V_1_sel_wr <= not(sout_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    sout_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((sout_V_data_V_1_state = ap_const_lv2_2) and (sout_V_data_V_1_vld_in = ap_const_logic_0)) or ((sout_V_data_V_1_state = ap_const_lv2_3) and (sout_V_data_V_1_vld_in = ap_const_logic_0) and (sout_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    sout_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((sout_V_data_V_1_state = ap_const_lv2_1) and (sout_V_data_V_1_ack_out = ap_const_logic_0)) or ((sout_V_data_V_1_state = ap_const_lv2_3) and (sout_V_data_V_1_ack_out = ap_const_logic_0) and (sout_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((sout_V_data_V_1_vld_in = ap_const_logic_0) and (sout_V_data_V_1_ack_out = ap_const_logic_1))) and not(((sout_V_data_V_1_ack_out = ap_const_logic_0) and (sout_V_data_V_1_vld_in = ap_const_logic_1))) and (sout_V_data_V_1_state = ap_const_lv2_3)) or ((sout_V_data_V_1_state = ap_const_lv2_1) and (sout_V_data_V_1_ack_out = ap_const_logic_1)) or ((sout_V_data_V_1_state = ap_const_lv2_2) and (sout_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    sout_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sout_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((sout_V_dest_V_1_ack_out = ap_const_logic_1) and (sout_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        sout_V_dest_V_1_sel_rd <= not(sout_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sout_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((sout_V_dest_V_1_state = ap_const_lv2_2) and (sout_V_dest_V_1_vld_in = ap_const_logic_0)) or ((sout_V_dest_V_1_state = ap_const_lv2_3) and (sout_V_dest_V_1_vld_in = ap_const_logic_0) and (sout_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    sout_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((sout_V_dest_V_1_state = ap_const_lv2_1) and (sout_V_dest_V_1_ack_out = ap_const_logic_0)) or ((sout_V_dest_V_1_state = ap_const_lv2_3) and (sout_V_dest_V_1_ack_out = ap_const_logic_0) and (sout_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((sout_V_dest_V_1_vld_in = ap_const_logic_0) and (sout_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((sout_V_dest_V_1_ack_out = ap_const_logic_0) and (sout_V_dest_V_1_vld_in = ap_const_logic_1))) and (sout_V_dest_V_1_state = ap_const_lv2_3)) or ((sout_V_dest_V_1_state = ap_const_lv2_1) and (sout_V_dest_V_1_ack_out = ap_const_logic_1)) or ((sout_V_dest_V_1_state = ap_const_lv2_2) and (sout_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    sout_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sout_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((sout_V_id_V_1_ack_out = ap_const_logic_1) and (sout_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        sout_V_id_V_1_sel_rd <= not(sout_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sout_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((sout_V_id_V_1_state = ap_const_lv2_2) and (sout_V_id_V_1_vld_in = ap_const_logic_0)) or ((sout_V_id_V_1_state = ap_const_lv2_3) and (sout_V_id_V_1_vld_in = ap_const_logic_0) and (sout_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    sout_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((sout_V_id_V_1_state = ap_const_lv2_1) and (sout_V_id_V_1_ack_out = ap_const_logic_0)) or ((sout_V_id_V_1_state = ap_const_lv2_3) and (sout_V_id_V_1_ack_out = ap_const_logic_0) and (sout_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((sout_V_id_V_1_vld_in = ap_const_logic_0) and (sout_V_id_V_1_ack_out = ap_const_logic_1))) and not(((sout_V_id_V_1_ack_out = ap_const_logic_0) and (sout_V_id_V_1_vld_in = ap_const_logic_1))) and (sout_V_id_V_1_state = ap_const_lv2_3)) or ((sout_V_id_V_1_state = ap_const_lv2_1) and (sout_V_id_V_1_ack_out = ap_const_logic_1)) or ((sout_V_id_V_1_state = ap_const_lv2_2) and (sout_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    sout_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sout_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((sout_V_keep_V_1_ack_out = ap_const_logic_1) and (sout_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        sout_V_keep_V_1_sel_rd <= not(sout_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sout_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((sout_V_keep_V_1_state = ap_const_lv2_2) and (sout_V_keep_V_1_vld_in = ap_const_logic_0)) or ((sout_V_keep_V_1_state = ap_const_lv2_3) and (sout_V_keep_V_1_vld_in = ap_const_logic_0) and (sout_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    sout_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((sout_V_keep_V_1_state = ap_const_lv2_1) and (sout_V_keep_V_1_ack_out = ap_const_logic_0)) or ((sout_V_keep_V_1_state = ap_const_lv2_3) and (sout_V_keep_V_1_ack_out = ap_const_logic_0) and (sout_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((sout_V_keep_V_1_vld_in = ap_const_logic_0) and (sout_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((sout_V_keep_V_1_ack_out = ap_const_logic_0) and (sout_V_keep_V_1_vld_in = ap_const_logic_1))) and (sout_V_keep_V_1_state = ap_const_lv2_3)) or ((sout_V_keep_V_1_state = ap_const_lv2_1) and (sout_V_keep_V_1_ack_out = ap_const_logic_1)) or ((sout_V_keep_V_1_state = ap_const_lv2_2) and (sout_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    sout_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sout_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((sout_V_last_V_1_ack_out = ap_const_logic_1) and (sout_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        sout_V_last_V_1_sel_rd <= not(sout_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sout_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((sout_V_last_V_1_ack_in = ap_const_logic_1) and (sout_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        sout_V_last_V_1_sel_wr <= not(sout_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    sout_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((sout_V_last_V_1_state = ap_const_lv2_2) and (sout_V_last_V_1_vld_in = ap_const_logic_0)) or ((sout_V_last_V_1_state = ap_const_lv2_3) and (sout_V_last_V_1_vld_in = ap_const_logic_0) and (sout_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    sout_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((sout_V_last_V_1_state = ap_const_lv2_1) and (sout_V_last_V_1_ack_out = ap_const_logic_0)) or ((sout_V_last_V_1_state = ap_const_lv2_3) and (sout_V_last_V_1_ack_out = ap_const_logic_0) and (sout_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((sout_V_last_V_1_vld_in = ap_const_logic_0) and (sout_V_last_V_1_ack_out = ap_const_logic_1))) and not(((sout_V_last_V_1_ack_out = ap_const_logic_0) and (sout_V_last_V_1_vld_in = ap_const_logic_1))) and (sout_V_last_V_1_state = ap_const_lv2_3)) or ((sout_V_last_V_1_state = ap_const_lv2_1) and (sout_V_last_V_1_ack_out = ap_const_logic_1)) or ((sout_V_last_V_1_state = ap_const_lv2_2) and (sout_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    sout_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sout_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((sout_V_strb_V_1_ack_out = ap_const_logic_1) and (sout_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        sout_V_strb_V_1_sel_rd <= not(sout_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sout_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((sout_V_strb_V_1_state = ap_const_lv2_2) and (sout_V_strb_V_1_vld_in = ap_const_logic_0)) or ((sout_V_strb_V_1_state = ap_const_lv2_3) and (sout_V_strb_V_1_vld_in = ap_const_logic_0) and (sout_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    sout_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((sout_V_strb_V_1_state = ap_const_lv2_1) and (sout_V_strb_V_1_ack_out = ap_const_logic_0)) or ((sout_V_strb_V_1_state = ap_const_lv2_3) and (sout_V_strb_V_1_ack_out = ap_const_logic_0) and (sout_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((sout_V_strb_V_1_vld_in = ap_const_logic_0) and (sout_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((sout_V_strb_V_1_ack_out = ap_const_logic_0) and (sout_V_strb_V_1_vld_in = ap_const_logic_1))) and (sout_V_strb_V_1_state = ap_const_lv2_3)) or ((sout_V_strb_V_1_state = ap_const_lv2_1) and (sout_V_strb_V_1_ack_out = ap_const_logic_1)) or ((sout_V_strb_V_1_state = ap_const_lv2_2) and (sout_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    sout_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sout_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((sout_V_user_V_1_ack_out = ap_const_logic_1) and (sout_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        sout_V_user_V_1_sel_rd <= not(sout_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sout_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((sout_V_user_V_1_state = ap_const_lv2_2) and (sout_V_user_V_1_vld_in = ap_const_logic_0)) or ((sout_V_user_V_1_state = ap_const_lv2_3) and (sout_V_user_V_1_vld_in = ap_const_logic_0) and (sout_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    sout_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((sout_V_user_V_1_state = ap_const_lv2_1) and (sout_V_user_V_1_ack_out = ap_const_logic_0)) or ((sout_V_user_V_1_state = ap_const_lv2_3) and (sout_V_user_V_1_ack_out = ap_const_logic_0) and (sout_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((sout_V_user_V_1_vld_in = ap_const_logic_0) and (sout_V_user_V_1_ack_out = ap_const_logic_1))) and not(((sout_V_user_V_1_ack_out = ap_const_logic_0) and (sout_V_user_V_1_vld_in = ap_const_logic_1))) and (sout_V_user_V_1_state = ap_const_lv2_3)) or ((sout_V_user_V_1_state = ap_const_lv2_1) and (sout_V_user_V_1_ack_out = ap_const_logic_1)) or ((sout_V_user_V_1_state = ap_const_lv2_2) and (sout_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    sout_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_aes128_add_round_key_fu_338_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    i_1_reg_252 <= i_13_reg_587;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    i_1_reg_252 <= ap_const_lv4_1;
                end if;
            end if; 
        end if;
    end process;

    i_2_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_500_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                i_2_reg_286 <= i_14_reg_623;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_aes128_add_round_key_fu_338_ap_done = ap_const_logic_1))) then 
                i_2_reg_286 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_i1_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_399_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_i1_reg_275 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                i_i1_reg_275 <= i_12_reg_600;
            end if; 
        end if;
    end process;

    i_i_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_i_reg_264 <= i_3_reg_577;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_aes128_extract_round_fu_329_ap_done = ap_const_logic_1))) then 
                i_i_reg_264 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond3_fu_360_p2 = ap_const_lv1_0) and (sin_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond3_fu_360_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_230 <= i_11_reg_553;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_reg_230 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_1_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((sout_V_dest_V_1_ack_in = ap_const_logic_0) or (sout_V_id_V_1_ack_in = ap_const_logic_0) or (sout_V_last_V_1_ack_in = ap_const_logic_0) or (sout_V_user_V_1_ack_in = ap_const_logic_0) or (sout_V_strb_V_1_ack_in = ap_const_logic_0) or (sout_V_keep_V_1_ack_in = ap_const_logic_0) or (sout_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond4_fu_472_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                j_1_reg_297 <= ap_const_lv3_0;
            elsif (((sout_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                j_1_reg_297 <= j_7_reg_636;
            end if; 
        end if;
    end process;

    j_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_241 <= ap_const_lv3_0;
            elsif ((not(((exitcond3_fu_360_p2 = ap_const_lv1_0) and (sin_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond3_fu_360_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_241 <= j_6_fu_366_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_11_reg_553 <= i_11_fu_354_p2;
                    i_cast_reg_545(2 downto 0) <= i_cast_fu_344_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                i_12_reg_600 <= i_12_fu_452_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_418_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                i_13_reg_587 <= i_13_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((sout_V_dest_V_1_ack_in = ap_const_logic_0) or (sout_V_id_V_1_ack_in = ap_const_logic_0) or (sout_V_last_V_1_ack_in = ap_const_logic_0) or (sout_V_user_V_1_ack_in = ap_const_logic_0) or (sout_V_strb_V_1_ack_in = ap_const_logic_0) or (sout_V_keep_V_1_ack_in = ap_const_logic_0) or (sout_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                i_14_reg_623 <= i_14_fu_478_p2;
                    i_2_cast_reg_615(2 downto 0) <= i_2_cast_fu_468_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_3_reg_577 <= i_3_fu_424_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                j_7_reg_636 <= j_7_fu_506_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((sin_V_data_V_0_load_A = ap_const_logic_1)) then
                sin_V_data_V_0_payload_A <= sin_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((sin_V_data_V_0_load_B = ap_const_logic_1)) then
                sin_V_data_V_0_payload_B <= sin_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((sout_V_data_V_1_load_A = ap_const_logic_1)) then
                sout_V_data_V_1_payload_A <= state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((sout_V_data_V_1_load_B = ap_const_logic_1)) then
                sout_V_data_V_1_payload_B <= state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((sout_V_last_V_1_load_A = ap_const_logic_1)) then
                sout_V_last_V_1_payload_A <= tmp_last_V_reg_646;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((sout_V_last_V_1_load_B = ap_const_logic_1)) then
                sout_V_last_V_1_payload_B <= tmp_last_V_reg_646;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i2_fu_446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                state_addr_5_reg_605 <= tmp_i3_fu_458_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_418_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                state_addr_6_reg_582 <= tmp_i_fu_430_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((sout_V_dest_V_1_ack_in = ap_const_logic_0) or (sout_V_id_V_1_ack_in = ap_const_logic_0) or (sout_V_last_V_1_ack_in = ap_const_logic_0) or (sout_V_user_V_1_ack_in = ap_const_logic_0) or (sout_V_strb_V_1_ack_in = ap_const_logic_0) or (sout_V_keep_V_1_ack_in = ap_const_logic_0) or (sout_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond4_fu_472_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    tmp_31_reg_628(3 downto 2) <= tmp_31_fu_488_p3(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_399_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    tmp_41_cast_reg_569(7 downto 4) <= tmp_41_cast_fu_413_p1(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_500_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                tmp_last_V_reg_646 <= tmp_last_V_fu_539_p2;
            end if;
        end if;
    end process;
    i_cast_reg_545(3) <= '0';
    tmp_41_cast_reg_569(3 downto 0) <= "0000";
    tmp_41_cast_reg_569(9 downto 8) <= "00";
    i_2_cast_reg_615(3) <= '0';
    tmp_31_reg_628(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (sin_V_data_V_0_vld_out, sout_V_data_V_1_ack_in, sout_V_data_V_1_state, sout_V_keep_V_1_ack_in, sout_V_keep_V_1_state, sout_V_strb_V_1_ack_in, sout_V_strb_V_1_state, sout_V_user_V_1_ack_in, sout_V_user_V_1_state, sout_V_last_V_1_ack_in, sout_V_last_V_1_state, sout_V_id_V_1_ack_in, sout_V_id_V_1_state, sout_V_dest_V_1_ack_in, sout_V_dest_V_1_state, ap_CS_fsm, ap_CS_fsm_state3, exitcond3_fu_360_p2, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state2, ap_CS_fsm_state9, exitcond2_fu_399_p2, ap_CS_fsm_state11, exitcond_i_fu_418_p2, ap_CS_fsm_state19, exitcond_i2_fu_446_p2, ap_CS_fsm_state25, exitcond4_fu_472_p2, ap_CS_fsm_state26, exitcond_fu_500_p2, grp_aes128_mix_columns_h_fu_308_ap_done, grp_aes128_expand_key_hw_fu_313_ap_done, grp_aes128_shift_rows_hw_fu_324_ap_done, grp_aes128_extract_round_fu_329_ap_done, grp_aes128_add_round_key_fu_338_ap_done, exitcond1_fu_348_p2, ap_CS_fsm_state8, ap_CS_fsm_state18, ap_CS_fsm_state10, ap_CS_fsm_state24, ap_CS_fsm_state16, ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state22, ap_CS_fsm_state6, ap_block_state22_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((exitcond3_fu_360_p2 = ap_const_lv1_0) and (sin_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond3_fu_360_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((exitcond3_fu_360_p2 = ap_const_lv1_0) and (sin_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond3_fu_360_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_aes128_expand_key_hw_fu_313_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_aes128_extract_round_fu_329_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_aes128_add_round_key_fu_338_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((exitcond2_fu_399_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_aes128_extract_round_fu_329_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((exitcond_i_fu_418_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_aes128_shift_rows_hw_fu_324_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_aes128_mix_columns_h_fu_308_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_aes128_add_round_key_fu_338_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((exitcond_i2_fu_446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (ap_const_boolean_0 = ap_block_state22_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_aes128_add_round_key_fu_338_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if ((not(((sout_V_dest_V_1_ack_in = ap_const_logic_0) or (sout_V_id_V_1_ack_in = ap_const_logic_0) or (sout_V_last_V_1_ack_in = ap_const_logic_0) or (sout_V_user_V_1_ack_in = ap_const_logic_0) or (sout_V_strb_V_1_ack_in = ap_const_logic_0) or (sout_V_keep_V_1_ack_in = ap_const_logic_0) or (sout_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond4_fu_472_p2 = ap_const_lv1_1) and (sout_V_dest_V_1_state(0) = ap_const_logic_0) and (sout_V_id_V_1_state(0) = ap_const_logic_0) and (sout_V_last_V_1_state(0) = ap_const_logic_0) and (sout_V_user_V_1_state(0) = ap_const_logic_0) and (sout_V_strb_V_1_state(0) = ap_const_logic_0) and (sout_V_keep_V_1_state(0) = ap_const_logic_0) and (sout_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((sout_V_dest_V_1_ack_in = ap_const_logic_0) or (sout_V_id_V_1_ack_in = ap_const_logic_0) or (sout_V_last_V_1_ack_in = ap_const_logic_0) or (sout_V_user_V_1_ack_in = ap_const_logic_0) or (sout_V_strb_V_1_ack_in = ap_const_logic_0) or (sout_V_keep_V_1_ack_in = ap_const_logic_0) or (sout_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond4_fu_472_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((exitcond_fu_500_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                if (((sout_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((sout_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state22_on_subcall_done_assign_proc : process(grp_aes128_shift_rows_hw_fu_324_ap_done, grp_aes128_extract_round_fu_329_ap_done)
    begin
                ap_block_state22_on_subcall_done <= ((grp_aes128_extract_round_fu_329_ap_done = ap_const_logic_0) or (grp_aes128_shift_rows_hw_fu_324_ap_done = ap_const_logic_0));
    end process;


    ap_block_state25_assign_proc : process(sout_V_data_V_1_ack_in, sout_V_keep_V_1_ack_in, sout_V_strb_V_1_ack_in, sout_V_user_V_1_ack_in, sout_V_last_V_1_ack_in, sout_V_id_V_1_ack_in, sout_V_dest_V_1_ack_in)
    begin
                ap_block_state25 <= ((sout_V_dest_V_1_ack_in = ap_const_logic_0) or (sout_V_id_V_1_ack_in = ap_const_logic_0) or (sout_V_last_V_1_ack_in = ap_const_logic_0) or (sout_V_user_V_1_ack_in = ap_const_logic_0) or (sout_V_strb_V_1_ack_in = ap_const_logic_0) or (sout_V_keep_V_1_ack_in = ap_const_logic_0) or (sout_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(sin_V_data_V_0_vld_out, exitcond3_fu_360_p2)
    begin
                ap_block_state3 <= ((exitcond3_fu_360_p2 = ap_const_lv1_0) and (sin_V_data_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond1_fu_348_p2 <= "1" when (i_reg_230 = ap_const_lv3_4) else "0";
    exitcond2_fu_399_p2 <= "1" when (i_1_reg_252 = ap_const_lv4_A) else "0";
    exitcond3_fu_360_p2 <= "1" when (j_reg_241 = ap_const_lv3_4) else "0";
    exitcond4_fu_472_p2 <= "1" when (i_2_reg_286 = ap_const_lv3_4) else "0";
    exitcond_fu_500_p2 <= "1" when (j_1_reg_297 = ap_const_lv3_4) else "0";
    exitcond_i2_fu_446_p2 <= "1" when (i_i1_reg_275 = ap_const_lv5_10) else "0";
    exitcond_i_fu_418_p2 <= "1" when (i_i_reg_264 = ap_const_lv5_10) else "0";

    expanded_key_address0_assign_proc : process(grp_aes128_expand_key_hw_fu_313_expanded_key_address0, grp_aes128_extract_round_fu_329_expanded_key_address0, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_CS_fsm_state22, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            expanded_key_address0 <= grp_aes128_extract_round_fu_329_expanded_key_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expanded_key_address0 <= grp_aes128_expand_key_hw_fu_313_expanded_key_address0;
        else 
            expanded_key_address0 <= "XXXXXXXX";
        end if; 
    end process;


    expanded_key_ce0_assign_proc : process(grp_aes128_expand_key_hw_fu_313_expanded_key_ce0, grp_aes128_extract_round_fu_329_expanded_key_ce0, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_CS_fsm_state22, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            expanded_key_ce0 <= grp_aes128_extract_round_fu_329_expanded_key_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expanded_key_ce0 <= grp_aes128_expand_key_hw_fu_313_expanded_key_ce0;
        else 
            expanded_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expanded_key_we0_assign_proc : process(grp_aes128_expand_key_hw_fu_313_expanded_key_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expanded_key_we0 <= grp_aes128_expand_key_hw_fu_313_expanded_key_we0;
        else 
            expanded_key_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_aes128_add_round_key_fu_338_ap_start <= grp_aes128_add_round_key_fu_338_ap_start_reg;
    grp_aes128_expand_key_hw_fu_313_ap_start <= grp_aes128_expand_key_hw_fu_313_ap_start_reg;
    grp_aes128_extract_round_fu_329_ap_start <= grp_aes128_extract_round_fu_329_ap_start_reg;

    grp_aes128_extract_round_fu_329_expanded_key_offset_assign_proc : process(tmp_41_cast_reg_569, ap_CS_fsm_state10, ap_CS_fsm_state22, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_aes128_extract_round_fu_329_expanded_key_offset <= ap_const_lv10_A0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_aes128_extract_round_fu_329_expanded_key_offset <= tmp_41_cast_reg_569;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_aes128_extract_round_fu_329_expanded_key_offset <= ap_const_lv10_0;
        else 
            grp_aes128_extract_round_fu_329_expanded_key_offset <= "XXXXXXXXXX";
        end if; 
    end process;

    grp_aes128_mix_columns_h_fu_308_ap_start <= grp_aes128_mix_columns_h_fu_308_ap_start_reg;
    grp_aes128_shift_rows_hw_fu_324_ap_start <= grp_aes128_shift_rows_hw_fu_324_ap_start_reg;
    i_11_fu_354_p2 <= std_logic_vector(unsigned(i_reg_230) + unsigned(ap_const_lv3_1));
    i_12_fu_452_p2 <= std_logic_vector(unsigned(i_i1_reg_275) + unsigned(ap_const_lv5_1));
    i_13_fu_435_p2 <= std_logic_vector(unsigned(i_1_reg_252) + unsigned(ap_const_lv4_1));
    i_14_fu_478_p2 <= std_logic_vector(unsigned(i_2_reg_286) + unsigned(ap_const_lv3_1));
    i_2_cast_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_286),4));
    i_3_fu_424_p2 <= std_logic_vector(unsigned(i_i_reg_264) + unsigned(ap_const_lv5_1));
    i_cast_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_230),4));
    j_1_cast_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_297),4));
    j_6_fu_366_p2 <= std_logic_vector(unsigned(j_reg_241) + unsigned(ap_const_lv3_1));
    j_7_fu_506_p2 <= std_logic_vector(unsigned(j_1_reg_297) + unsigned(ap_const_lv3_1));

    round_key_address0_assign_proc : process(grp_aes128_extract_round_fu_329_round_key_address0, grp_aes128_add_round_key_fu_338_round_key_address0, ap_CS_fsm_state8, ap_CS_fsm_state18, ap_CS_fsm_state10, ap_CS_fsm_state24, ap_CS_fsm_state22, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            round_key_address0 <= grp_aes128_add_round_key_fu_338_round_key_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            round_key_address0 <= grp_aes128_extract_round_fu_329_round_key_address0;
        else 
            round_key_address0 <= "XXXX";
        end if; 
    end process;


    round_key_ce0_assign_proc : process(grp_aes128_extract_round_fu_329_round_key_ce0, grp_aes128_add_round_key_fu_338_round_key_ce0, ap_CS_fsm_state8, ap_CS_fsm_state18, ap_CS_fsm_state10, ap_CS_fsm_state24, ap_CS_fsm_state22, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            round_key_ce0 <= grp_aes128_add_round_key_fu_338_round_key_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            round_key_ce0 <= grp_aes128_extract_round_fu_329_round_key_ce0;
        else 
            round_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    round_key_we0_assign_proc : process(grp_aes128_extract_round_fu_329_round_key_we0, ap_CS_fsm_state10, ap_CS_fsm_state22, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            round_key_we0 <= grp_aes128_extract_round_fu_329_round_key_we0;
        else 
            round_key_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_hw_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state4, tmp_i_20_fu_441_p1, tmp_i6_fu_463_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sbox_hw_address0 <= tmp_i6_fu_463_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sbox_hw_address0 <= tmp_i_20_fu_441_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sbox_hw_address0 <= ap_const_lv8_0;
        else 
            sbox_hw_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_hw_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            sbox_hw_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sbox_hw_ce0 <= ap_const_logic_0;
        else 
            sbox_hw_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sin_TDATA_blk_n_assign_proc : process(sin_V_data_V_0_state, ap_CS_fsm_state3, exitcond3_fu_360_p2)
    begin
        if (((exitcond3_fu_360_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sin_TDATA_blk_n <= sin_V_data_V_0_state(0);
        else 
            sin_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    sin_TREADY <= sin_V_dest_V_0_state(1);
    sin_V_data_V_0_ack_in <= sin_V_data_V_0_state(1);

    sin_V_data_V_0_ack_out_assign_proc : process(sin_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond3_fu_360_p2)
    begin
        if ((not(((exitcond3_fu_360_p2 = ap_const_lv1_0) and (sin_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond3_fu_360_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sin_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            sin_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    sin_V_data_V_0_data_out_assign_proc : process(sin_V_data_V_0_payload_A, sin_V_data_V_0_payload_B, sin_V_data_V_0_sel)
    begin
        if ((sin_V_data_V_0_sel = ap_const_logic_1)) then 
            sin_V_data_V_0_data_out <= sin_V_data_V_0_payload_B;
        else 
            sin_V_data_V_0_data_out <= sin_V_data_V_0_payload_A;
        end if; 
    end process;

    sin_V_data_V_0_load_A <= (sin_V_data_V_0_state_cmp_full and not(sin_V_data_V_0_sel_wr));
    sin_V_data_V_0_load_B <= (sin_V_data_V_0_state_cmp_full and sin_V_data_V_0_sel_wr);
    sin_V_data_V_0_sel <= sin_V_data_V_0_sel_rd;
    sin_V_data_V_0_state_cmp_full <= '0' when (sin_V_data_V_0_state = ap_const_lv2_1) else '1';
    sin_V_data_V_0_vld_in <= sin_TVALID;
    sin_V_data_V_0_vld_out <= sin_V_data_V_0_state(0);

    sin_V_dest_V_0_ack_out_assign_proc : process(sin_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond3_fu_360_p2)
    begin
        if ((not(((exitcond3_fu_360_p2 = ap_const_lv1_0) and (sin_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond3_fu_360_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sin_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            sin_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    sin_V_dest_V_0_vld_in <= sin_TVALID;
    sout_TDATA <= sout_V_data_V_1_data_out;

    sout_TDATA_blk_n_assign_proc : process(sout_V_data_V_1_state, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sout_TDATA_blk_n <= sout_V_data_V_1_state(1);
        else 
            sout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    sout_TDEST <= sout_V_dest_V_1_data_out;
    sout_TID <= sout_V_id_V_1_data_out;
    sout_TKEEP <= sout_V_keep_V_1_data_out;
    sout_TLAST <= sout_V_last_V_1_data_out;
    sout_TSTRB <= sout_V_strb_V_1_data_out;
    sout_TUSER <= sout_V_user_V_1_data_out;
    sout_TVALID <= sout_V_dest_V_1_state(0);
    sout_V_data_V_1_ack_in <= sout_V_data_V_1_state(1);
    sout_V_data_V_1_ack_out <= sout_TREADY;

    sout_V_data_V_1_data_out_assign_proc : process(sout_V_data_V_1_payload_A, sout_V_data_V_1_payload_B, sout_V_data_V_1_sel)
    begin
        if ((sout_V_data_V_1_sel = ap_const_logic_1)) then 
            sout_V_data_V_1_data_out <= sout_V_data_V_1_payload_B;
        else 
            sout_V_data_V_1_data_out <= sout_V_data_V_1_payload_A;
        end if; 
    end process;

    sout_V_data_V_1_load_A <= (sout_V_data_V_1_state_cmp_full and not(sout_V_data_V_1_sel_wr));
    sout_V_data_V_1_load_B <= (sout_V_data_V_1_state_cmp_full and sout_V_data_V_1_sel_wr);
    sout_V_data_V_1_sel <= sout_V_data_V_1_sel_rd;
    sout_V_data_V_1_state_cmp_full <= '0' when (sout_V_data_V_1_state = ap_const_lv2_1) else '1';

    sout_V_data_V_1_vld_in_assign_proc : process(sout_V_data_V_1_ack_in, ap_CS_fsm_state27)
    begin
        if (((sout_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sout_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            sout_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    sout_V_data_V_1_vld_out <= sout_V_data_V_1_state(0);
    sout_V_dest_V_1_ack_in <= sout_V_dest_V_1_state(1);
    sout_V_dest_V_1_ack_out <= sout_TREADY;
    sout_V_dest_V_1_data_out <= ap_const_lv1_0;
    sout_V_dest_V_1_sel <= sout_V_dest_V_1_sel_rd;

    sout_V_dest_V_1_vld_in_assign_proc : process(sout_V_data_V_1_ack_in, ap_CS_fsm_state27)
    begin
        if (((sout_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sout_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            sout_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    sout_V_dest_V_1_vld_out <= sout_V_dest_V_1_state(0);
    sout_V_id_V_1_ack_in <= sout_V_id_V_1_state(1);
    sout_V_id_V_1_ack_out <= sout_TREADY;
    sout_V_id_V_1_data_out <= ap_const_lv1_0;
    sout_V_id_V_1_sel <= sout_V_id_V_1_sel_rd;

    sout_V_id_V_1_vld_in_assign_proc : process(sout_V_data_V_1_ack_in, ap_CS_fsm_state27)
    begin
        if (((sout_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sout_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            sout_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    sout_V_id_V_1_vld_out <= sout_V_id_V_1_state(0);
    sout_V_keep_V_1_ack_in <= sout_V_keep_V_1_state(1);
    sout_V_keep_V_1_ack_out <= sout_TREADY;
    sout_V_keep_V_1_data_out <= ap_const_lv1_1;
    sout_V_keep_V_1_sel <= sout_V_keep_V_1_sel_rd;

    sout_V_keep_V_1_vld_in_assign_proc : process(sout_V_data_V_1_ack_in, ap_CS_fsm_state27)
    begin
        if (((sout_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sout_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            sout_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    sout_V_keep_V_1_vld_out <= sout_V_keep_V_1_state(0);
    sout_V_last_V_1_ack_in <= sout_V_last_V_1_state(1);
    sout_V_last_V_1_ack_out <= sout_TREADY;

    sout_V_last_V_1_data_out_assign_proc : process(sout_V_last_V_1_payload_A, sout_V_last_V_1_payload_B, sout_V_last_V_1_sel)
    begin
        if ((sout_V_last_V_1_sel = ap_const_logic_1)) then 
            sout_V_last_V_1_data_out <= sout_V_last_V_1_payload_B;
        else 
            sout_V_last_V_1_data_out <= sout_V_last_V_1_payload_A;
        end if; 
    end process;

    sout_V_last_V_1_load_A <= (sout_V_last_V_1_state_cmp_full and not(sout_V_last_V_1_sel_wr));
    sout_V_last_V_1_load_B <= (sout_V_last_V_1_state_cmp_full and sout_V_last_V_1_sel_wr);
    sout_V_last_V_1_sel <= sout_V_last_V_1_sel_rd;
    sout_V_last_V_1_state_cmp_full <= '0' when (sout_V_last_V_1_state = ap_const_lv2_1) else '1';

    sout_V_last_V_1_vld_in_assign_proc : process(sout_V_data_V_1_ack_in, ap_CS_fsm_state27)
    begin
        if (((sout_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sout_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            sout_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    sout_V_last_V_1_vld_out <= sout_V_last_V_1_state(0);
    sout_V_strb_V_1_ack_in <= sout_V_strb_V_1_state(1);
    sout_V_strb_V_1_ack_out <= sout_TREADY;
    sout_V_strb_V_1_data_out <= ap_const_lv1_0;
    sout_V_strb_V_1_sel <= sout_V_strb_V_1_sel_rd;

    sout_V_strb_V_1_vld_in_assign_proc : process(sout_V_data_V_1_ack_in, ap_CS_fsm_state27)
    begin
        if (((sout_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sout_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            sout_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    sout_V_strb_V_1_vld_out <= sout_V_strb_V_1_state(0);
    sout_V_user_V_1_ack_in <= sout_V_user_V_1_state(1);
    sout_V_user_V_1_ack_out <= sout_TREADY;
    sout_V_user_V_1_data_out <= ap_const_lv1_0;
    sout_V_user_V_1_sel <= sout_V_user_V_1_sel_rd;

    sout_V_user_V_1_vld_in_assign_proc : process(sout_V_data_V_1_ack_in, ap_CS_fsm_state27)
    begin
        if (((sout_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sout_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            sout_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    sout_V_user_V_1_vld_out <= sout_V_user_V_1_state(0);

    state_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state11, state_addr_6_reg_582, exitcond_i_fu_418_p2, ap_CS_fsm_state19, state_addr_5_reg_605, exitcond_i2_fu_446_p2, ap_CS_fsm_state26, grp_aes128_mix_columns_h_fu_308_state_address0, grp_aes128_shift_rows_hw_fu_324_state_address0, grp_aes128_add_round_key_fu_338_state_address0, ap_CS_fsm_state8, ap_CS_fsm_state18, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state24, ap_CS_fsm_state16, ap_CS_fsm_state14, ap_CS_fsm_state22, tmp_30_fu_394_p1, tmp_i_fu_430_p1, tmp_i3_fu_458_p1, tmp_34_fu_529_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            state_address0 <= tmp_34_fu_529_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            state_address0 <= state_addr_5_reg_605;
        elsif (((exitcond_i2_fu_446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            state_address0 <= tmp_i3_fu_458_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_address0 <= state_addr_6_reg_582;
        elsif (((exitcond_i_fu_418_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            state_address0 <= tmp_i_fu_430_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address0 <= tmp_30_fu_394_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            state_address0 <= grp_aes128_add_round_key_fu_338_state_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            state_address0 <= grp_aes128_shift_rows_hw_fu_324_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_address0 <= grp_aes128_mix_columns_h_fu_308_state_address0;
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(sin_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond3_fu_360_p2, ap_CS_fsm_state11, exitcond_i_fu_418_p2, ap_CS_fsm_state19, exitcond_i2_fu_446_p2, ap_CS_fsm_state26, grp_aes128_mix_columns_h_fu_308_state_ce0, grp_aes128_shift_rows_hw_fu_324_state_ce0, grp_aes128_add_round_key_fu_338_state_ce0, ap_CS_fsm_state8, ap_CS_fsm_state18, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state24, ap_CS_fsm_state16, ap_CS_fsm_state14, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((exitcond_i2_fu_446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((exitcond_i_fu_418_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((exitcond3_fu_360_p2 = ap_const_lv1_0) and (sin_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            state_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            state_ce0 <= grp_aes128_add_round_key_fu_338_state_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            state_ce0 <= grp_aes128_shift_rows_hw_fu_324_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_ce0 <= grp_aes128_mix_columns_h_fu_308_state_ce0;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(sin_V_data_V_0_data_out, sbox_hw_q0, ap_CS_fsm_state3, grp_aes128_mix_columns_h_fu_308_state_d0, grp_aes128_shift_rows_hw_fu_324_state_d0, grp_aes128_add_round_key_fu_338_state_d0, ap_CS_fsm_state8, ap_CS_fsm_state18, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state24, ap_CS_fsm_state16, ap_CS_fsm_state14, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            state_d0 <= sbox_hw_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_d0 <= sin_V_data_V_0_data_out;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            state_d0 <= grp_aes128_add_round_key_fu_338_state_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            state_d0 <= grp_aes128_shift_rows_hw_fu_324_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_d0 <= grp_aes128_mix_columns_h_fu_308_state_d0;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(sin_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond3_fu_360_p2, grp_aes128_mix_columns_h_fu_308_state_we0, grp_aes128_shift_rows_hw_fu_324_state_we0, grp_aes128_add_round_key_fu_338_state_we0, ap_CS_fsm_state8, ap_CS_fsm_state18, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state24, ap_CS_fsm_state16, ap_CS_fsm_state14, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state13) or (not(((exitcond3_fu_360_p2 = ap_const_lv1_0) and (sin_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond3_fu_360_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            state_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            state_we0 <= grp_aes128_add_round_key_fu_338_state_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            state_we0 <= grp_aes128_shift_rows_hw_fu_324_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_we0 <= grp_aes128_mix_columns_h_fu_308_state_we0;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_28_fu_381_p3 <= (tmp_fu_377_p1 & ap_const_lv2_0);
    tmp_29_fu_389_p2 <= std_logic_vector(unsigned(tmp_28_fu_381_p3) + unsigned(i_cast_reg_545));
    tmp_30_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_389_p2),64));
    tmp_31_fu_488_p3 <= (tmp_36_fu_484_p1 & ap_const_lv2_0);
    tmp_32_fu_516_p3 <= (tmp_37_fu_512_p1 & ap_const_lv2_0);
    tmp_33_fu_524_p2 <= std_logic_vector(unsigned(i_2_cast_reg_615) + unsigned(tmp_32_fu_516_p3));
    tmp_34_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_524_p2),64));
    tmp_35_fu_534_p2 <= std_logic_vector(unsigned(tmp_31_reg_628) + unsigned(j_1_cast_fu_496_p1));
    tmp_36_fu_484_p1 <= i_2_reg_286(2 - 1 downto 0);
    tmp_37_fu_512_p1 <= j_1_reg_297(2 - 1 downto 0);
    tmp_41_cast_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_405_p3),10));
    tmp_fu_377_p1 <= j_reg_241(2 - 1 downto 0);
    tmp_i3_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_275),64));
    tmp_i6_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q0),64));
    tmp_i_20_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q0),64));
    tmp_i_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_264),64));
    tmp_last_V_fu_539_p2 <= "1" when (tmp_35_fu_534_p2 = ap_const_lv4_F) else "0";
    tmp_s_fu_405_p3 <= (i_1_reg_252 & ap_const_lv4_0);
end behav;
