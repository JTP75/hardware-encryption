// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aes128_encrypt_block_hw.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aes128_encrypt_block_hw::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aes128_encrypt_block_hw::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state1 = "1";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state2 = "10";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state3 = "100";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state4 = "1000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state5 = "10000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state6 = "100000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state7 = "1000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state8 = "10000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state9 = "100000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state10 = "1000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state11 = "10000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state12 = "100000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<1> aes128_encrypt_block_hw::ap_const_lv1_0 = "0";
const sc_lv<1> aes128_encrypt_block_hw::ap_const_lv1_1 = "1";
const sc_lv<2> aes128_encrypt_block_hw::ap_const_lv2_0 = "00";
const sc_lv<2> aes128_encrypt_block_hw::ap_const_lv2_2 = "10";
const sc_lv<2> aes128_encrypt_block_hw::ap_const_lv2_3 = "11";
const sc_lv<2> aes128_encrypt_block_hw::ap_const_lv2_1 = "1";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_2 = "10";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_1A = "11010";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_1B = "11011";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_1 = "1";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_8 = "1000";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_A = "1010";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_B = "1011";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_12 = "10010";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_13 = "10011";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_18 = "11000";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_19 = "11001";
const sc_lv<3> aes128_encrypt_block_hw::ap_const_lv3_0 = "000";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<4> aes128_encrypt_block_hw::ap_const_lv4_1 = "1";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_7 = "111";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_11 = "10001";
const sc_lv<5> aes128_encrypt_block_hw::ap_const_lv5_0 = "00000";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_9 = "1001";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_C = "1100";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_14 = "10100";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_17 = "10111";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_E = "1110";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_F = "1111";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_3 = "11";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_D = "1101";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_15 = "10101";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_4 = "100";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_5 = "101";
const sc_lv<10> aes128_encrypt_block_hw::ap_const_lv10_0 = "0000000000";
const sc_lv<10> aes128_encrypt_block_hw::ap_const_lv10_A0 = "10100000";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_6 = "110";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_10 = "10000";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_16 = "10110";
const sc_lv<3> aes128_encrypt_block_hw::ap_const_lv3_4 = "100";
const sc_lv<3> aes128_encrypt_block_hw::ap_const_lv3_1 = "1";
const sc_lv<4> aes128_encrypt_block_hw::ap_const_lv4_A = "1010";
const sc_lv<4> aes128_encrypt_block_hw::ap_const_lv4_0 = "0000";
const sc_lv<5> aes128_encrypt_block_hw::ap_const_lv5_10 = "10000";
const sc_lv<5> aes128_encrypt_block_hw::ap_const_lv5_1 = "1";
const sc_lv<4> aes128_encrypt_block_hw::ap_const_lv4_F = "1111";
const bool aes128_encrypt_block_hw::ap_const_boolean_0 = false;
const sc_lv<8> aes128_encrypt_block_hw::ap_const_lv8_0 = "00000000";
const bool aes128_encrypt_block_hw::ap_const_boolean_1 = true;

aes128_encrypt_block_hw::aes128_encrypt_block_hw(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sbox_hw_U = new aes128_expand_keycud("sbox_hw_U");
    sbox_hw_U->clk(ap_clk);
    sbox_hw_U->reset(ap_rst_n_inv);
    sbox_hw_U->address0(sbox_hw_address0);
    sbox_hw_U->ce0(sbox_hw_ce0);
    sbox_hw_U->q0(sbox_hw_q0);
    state_U = new aes128_encrypt_blhbi("state_U");
    state_U->clk(ap_clk);
    state_U->reset(ap_rst_n_inv);
    state_U->address0(state_address0);
    state_U->ce0(state_ce0);
    state_U->we0(state_we0);
    state_U->d0(state_d0);
    state_U->q0(state_q0);
    round_key_U = new aes128_encrypt_blhbi("round_key_U");
    round_key_U->clk(ap_clk);
    round_key_U->reset(ap_rst_n_inv);
    round_key_U->address0(round_key_address0);
    round_key_U->ce0(round_key_ce0);
    round_key_U->we0(round_key_we0);
    round_key_U->d0(grp_aes128_extract_round_fu_329_round_key_d0);
    round_key_U->q0(round_key_q0);
    expanded_key_U = new aes128_encrypt_bljbC("expanded_key_U");
    expanded_key_U->clk(ap_clk);
    expanded_key_U->reset(ap_rst_n_inv);
    expanded_key_U->address0(expanded_key_address0);
    expanded_key_U->ce0(expanded_key_ce0);
    expanded_key_U->we0(expanded_key_we0);
    expanded_key_U->d0(grp_aes128_expand_key_hw_fu_313_expanded_key_d0);
    expanded_key_U->q0(expanded_key_q0);
    grp_aes128_mix_columns_h_fu_308 = new aes128_mix_columns_h("grp_aes128_mix_columns_h_fu_308");
    grp_aes128_mix_columns_h_fu_308->ap_clk(ap_clk);
    grp_aes128_mix_columns_h_fu_308->ap_rst(ap_rst_n_inv);
    grp_aes128_mix_columns_h_fu_308->ap_start(grp_aes128_mix_columns_h_fu_308_ap_start);
    grp_aes128_mix_columns_h_fu_308->ap_done(grp_aes128_mix_columns_h_fu_308_ap_done);
    grp_aes128_mix_columns_h_fu_308->ap_idle(grp_aes128_mix_columns_h_fu_308_ap_idle);
    grp_aes128_mix_columns_h_fu_308->ap_ready(grp_aes128_mix_columns_h_fu_308_ap_ready);
    grp_aes128_mix_columns_h_fu_308->state_address0(grp_aes128_mix_columns_h_fu_308_state_address0);
    grp_aes128_mix_columns_h_fu_308->state_ce0(grp_aes128_mix_columns_h_fu_308_state_ce0);
    grp_aes128_mix_columns_h_fu_308->state_we0(grp_aes128_mix_columns_h_fu_308_state_we0);
    grp_aes128_mix_columns_h_fu_308->state_d0(grp_aes128_mix_columns_h_fu_308_state_d0);
    grp_aes128_mix_columns_h_fu_308->state_q0(state_q0);
    grp_aes128_expand_key_hw_fu_313 = new aes128_expand_key_hw("grp_aes128_expand_key_hw_fu_313");
    grp_aes128_expand_key_hw_fu_313->ap_clk(ap_clk);
    grp_aes128_expand_key_hw_fu_313->ap_rst(ap_rst_n_inv);
    grp_aes128_expand_key_hw_fu_313->ap_start(grp_aes128_expand_key_hw_fu_313_ap_start);
    grp_aes128_expand_key_hw_fu_313->ap_done(grp_aes128_expand_key_hw_fu_313_ap_done);
    grp_aes128_expand_key_hw_fu_313->ap_idle(grp_aes128_expand_key_hw_fu_313_ap_idle);
    grp_aes128_expand_key_hw_fu_313->ap_ready(grp_aes128_expand_key_hw_fu_313_ap_ready);
    grp_aes128_expand_key_hw_fu_313->expanded_key_address0(grp_aes128_expand_key_hw_fu_313_expanded_key_address0);
    grp_aes128_expand_key_hw_fu_313->expanded_key_ce0(grp_aes128_expand_key_hw_fu_313_expanded_key_ce0);
    grp_aes128_expand_key_hw_fu_313->expanded_key_we0(grp_aes128_expand_key_hw_fu_313_expanded_key_we0);
    grp_aes128_expand_key_hw_fu_313->expanded_key_d0(grp_aes128_expand_key_hw_fu_313_expanded_key_d0);
    grp_aes128_expand_key_hw_fu_313->expanded_key_q0(expanded_key_q0);
    grp_aes128_shift_rows_hw_fu_324 = new aes128_shift_rows_hw("grp_aes128_shift_rows_hw_fu_324");
    grp_aes128_shift_rows_hw_fu_324->ap_clk(ap_clk);
    grp_aes128_shift_rows_hw_fu_324->ap_rst(ap_rst_n_inv);
    grp_aes128_shift_rows_hw_fu_324->ap_start(grp_aes128_shift_rows_hw_fu_324_ap_start);
    grp_aes128_shift_rows_hw_fu_324->ap_done(grp_aes128_shift_rows_hw_fu_324_ap_done);
    grp_aes128_shift_rows_hw_fu_324->ap_idle(grp_aes128_shift_rows_hw_fu_324_ap_idle);
    grp_aes128_shift_rows_hw_fu_324->ap_ready(grp_aes128_shift_rows_hw_fu_324_ap_ready);
    grp_aes128_shift_rows_hw_fu_324->state_address0(grp_aes128_shift_rows_hw_fu_324_state_address0);
    grp_aes128_shift_rows_hw_fu_324->state_ce0(grp_aes128_shift_rows_hw_fu_324_state_ce0);
    grp_aes128_shift_rows_hw_fu_324->state_we0(grp_aes128_shift_rows_hw_fu_324_state_we0);
    grp_aes128_shift_rows_hw_fu_324->state_d0(grp_aes128_shift_rows_hw_fu_324_state_d0);
    grp_aes128_shift_rows_hw_fu_324->state_q0(state_q0);
    grp_aes128_extract_round_fu_329 = new aes128_extract_round("grp_aes128_extract_round_fu_329");
    grp_aes128_extract_round_fu_329->ap_clk(ap_clk);
    grp_aes128_extract_round_fu_329->ap_rst(ap_rst_n_inv);
    grp_aes128_extract_round_fu_329->ap_start(grp_aes128_extract_round_fu_329_ap_start);
    grp_aes128_extract_round_fu_329->ap_done(grp_aes128_extract_round_fu_329_ap_done);
    grp_aes128_extract_round_fu_329->ap_idle(grp_aes128_extract_round_fu_329_ap_idle);
    grp_aes128_extract_round_fu_329->ap_ready(grp_aes128_extract_round_fu_329_ap_ready);
    grp_aes128_extract_round_fu_329->expanded_key_address0(grp_aes128_extract_round_fu_329_expanded_key_address0);
    grp_aes128_extract_round_fu_329->expanded_key_ce0(grp_aes128_extract_round_fu_329_expanded_key_ce0);
    grp_aes128_extract_round_fu_329->expanded_key_q0(expanded_key_q0);
    grp_aes128_extract_round_fu_329->expanded_key_offset(grp_aes128_extract_round_fu_329_expanded_key_offset);
    grp_aes128_extract_round_fu_329->round_key_address0(grp_aes128_extract_round_fu_329_round_key_address0);
    grp_aes128_extract_round_fu_329->round_key_ce0(grp_aes128_extract_round_fu_329_round_key_ce0);
    grp_aes128_extract_round_fu_329->round_key_we0(grp_aes128_extract_round_fu_329_round_key_we0);
    grp_aes128_extract_round_fu_329->round_key_d0(grp_aes128_extract_round_fu_329_round_key_d0);
    grp_aes128_add_round_key_fu_338 = new aes128_add_round_key("grp_aes128_add_round_key_fu_338");
    grp_aes128_add_round_key_fu_338->ap_clk(ap_clk);
    grp_aes128_add_round_key_fu_338->ap_rst(ap_rst_n_inv);
    grp_aes128_add_round_key_fu_338->ap_start(grp_aes128_add_round_key_fu_338_ap_start);
    grp_aes128_add_round_key_fu_338->ap_done(grp_aes128_add_round_key_fu_338_ap_done);
    grp_aes128_add_round_key_fu_338->ap_idle(grp_aes128_add_round_key_fu_338_ap_idle);
    grp_aes128_add_round_key_fu_338->ap_ready(grp_aes128_add_round_key_fu_338_ap_ready);
    grp_aes128_add_round_key_fu_338->state_address0(grp_aes128_add_round_key_fu_338_state_address0);
    grp_aes128_add_round_key_fu_338->state_ce0(grp_aes128_add_round_key_fu_338_state_ce0);
    grp_aes128_add_round_key_fu_338->state_we0(grp_aes128_add_round_key_fu_338_state_we0);
    grp_aes128_add_round_key_fu_338->state_d0(grp_aes128_add_round_key_fu_338_state_d0);
    grp_aes128_add_round_key_fu_338->state_q0(state_q0);
    grp_aes128_add_round_key_fu_338->round_key_address0(grp_aes128_add_round_key_fu_338_round_key_address0);
    grp_aes128_add_round_key_fu_338->round_key_ce0(grp_aes128_add_round_key_fu_338_round_key_ce0);
    grp_aes128_add_round_key_fu_338->round_key_q0(round_key_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state22_on_subcall_done);
    sensitive << ( grp_aes128_shift_rows_hw_fu_324_ap_done );
    sensitive << ( grp_aes128_extract_round_fu_329_ap_done );

    SC_METHOD(thread_ap_block_state25);
    sensitive << ( sout_V_data_V_1_ack_in );
    sensitive << ( sout_V_keep_V_1_ack_in );
    sensitive << ( sout_V_strb_V_1_ack_in );
    sensitive << ( sout_V_user_V_1_ack_in );
    sensitive << ( sout_V_last_V_1_ack_in );
    sensitive << ( sout_V_id_V_1_ack_in );
    sensitive << ( sout_V_dest_V_1_ack_in );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( sin_V_data_V_0_vld_out );
    sensitive << ( exitcond3_fu_360_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_exitcond1_fu_348_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_230 );

    SC_METHOD(thread_exitcond2_fu_399_p2);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( i_1_reg_252 );

    SC_METHOD(thread_exitcond3_fu_360_p2);
    sensitive << ( sin_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond3_fu_360_p2 );
    sensitive << ( j_reg_241 );

    SC_METHOD(thread_exitcond4_fu_472_p2);
    sensitive << ( sout_V_data_V_1_ack_in );
    sensitive << ( sout_V_keep_V_1_ack_in );
    sensitive << ( sout_V_strb_V_1_ack_in );
    sensitive << ( sout_V_user_V_1_ack_in );
    sensitive << ( sout_V_last_V_1_ack_in );
    sensitive << ( sout_V_id_V_1_ack_in );
    sensitive << ( sout_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( i_2_reg_286 );

    SC_METHOD(thread_exitcond_fu_500_p2);
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( j_1_reg_297 );

    SC_METHOD(thread_exitcond_i2_fu_446_p2);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( i_i1_reg_275 );

    SC_METHOD(thread_exitcond_i_fu_418_p2);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( i_i_reg_264 );

    SC_METHOD(thread_expanded_key_address0);
    sensitive << ( grp_aes128_expand_key_hw_fu_313_expanded_key_address0 );
    sensitive << ( grp_aes128_extract_round_fu_329_expanded_key_address0 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_expanded_key_ce0);
    sensitive << ( grp_aes128_expand_key_hw_fu_313_expanded_key_ce0 );
    sensitive << ( grp_aes128_extract_round_fu_329_expanded_key_ce0 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_expanded_key_we0);
    sensitive << ( grp_aes128_expand_key_hw_fu_313_expanded_key_we0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_aes128_add_round_key_fu_338_ap_start);
    sensitive << ( grp_aes128_add_round_key_fu_338_ap_start_reg );

    SC_METHOD(thread_grp_aes128_expand_key_hw_fu_313_ap_start);
    sensitive << ( grp_aes128_expand_key_hw_fu_313_ap_start_reg );

    SC_METHOD(thread_grp_aes128_extract_round_fu_329_ap_start);
    sensitive << ( grp_aes128_extract_round_fu_329_ap_start_reg );

    SC_METHOD(thread_grp_aes128_extract_round_fu_329_expanded_key_offset);
    sensitive << ( tmp_41_cast_reg_569 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_grp_aes128_mix_columns_h_fu_308_ap_start);
    sensitive << ( grp_aes128_mix_columns_h_fu_308_ap_start_reg );

    SC_METHOD(thread_grp_aes128_shift_rows_hw_fu_324_ap_start);
    sensitive << ( grp_aes128_shift_rows_hw_fu_324_ap_start_reg );

    SC_METHOD(thread_i_11_fu_354_p2);
    sensitive << ( i_reg_230 );

    SC_METHOD(thread_i_12_fu_452_p2);
    sensitive << ( i_i1_reg_275 );

    SC_METHOD(thread_i_13_fu_435_p2);
    sensitive << ( i_1_reg_252 );

    SC_METHOD(thread_i_14_fu_478_p2);
    sensitive << ( i_2_reg_286 );

    SC_METHOD(thread_i_2_cast_fu_468_p1);
    sensitive << ( i_2_reg_286 );

    SC_METHOD(thread_i_3_fu_424_p2);
    sensitive << ( i_i_reg_264 );

    SC_METHOD(thread_i_cast_fu_344_p1);
    sensitive << ( i_reg_230 );

    SC_METHOD(thread_j_1_cast_fu_496_p1);
    sensitive << ( j_1_reg_297 );

    SC_METHOD(thread_j_6_fu_366_p2);
    sensitive << ( j_reg_241 );

    SC_METHOD(thread_j_7_fu_506_p2);
    sensitive << ( j_1_reg_297 );

    SC_METHOD(thread_round_key_address0);
    sensitive << ( grp_aes128_extract_round_fu_329_round_key_address0 );
    sensitive << ( grp_aes128_add_round_key_fu_338_round_key_address0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_round_key_ce0);
    sensitive << ( grp_aes128_extract_round_fu_329_round_key_ce0 );
    sensitive << ( grp_aes128_add_round_key_fu_338_round_key_ce0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_round_key_we0);
    sensitive << ( grp_aes128_extract_round_fu_329_round_key_we0 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_sbox_hw_address0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_i_20_fu_441_p1 );
    sensitive << ( tmp_i6_fu_463_p1 );

    SC_METHOD(thread_sbox_hw_ce0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_sin_TDATA_blk_n);
    sensitive << ( sin_V_data_V_0_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond3_fu_360_p2 );

    SC_METHOD(thread_sin_TREADY);
    sensitive << ( sin_V_dest_V_0_state );

    SC_METHOD(thread_sin_V_data_V_0_ack_in);
    sensitive << ( sin_V_data_V_0_state );

    SC_METHOD(thread_sin_V_data_V_0_ack_out);
    sensitive << ( sin_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond3_fu_360_p2 );

    SC_METHOD(thread_sin_V_data_V_0_data_out);
    sensitive << ( sin_V_data_V_0_payload_A );
    sensitive << ( sin_V_data_V_0_payload_B );
    sensitive << ( sin_V_data_V_0_sel );

    SC_METHOD(thread_sin_V_data_V_0_load_A);
    sensitive << ( sin_V_data_V_0_sel_wr );
    sensitive << ( sin_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_sin_V_data_V_0_load_B);
    sensitive << ( sin_V_data_V_0_sel_wr );
    sensitive << ( sin_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_sin_V_data_V_0_sel);
    sensitive << ( sin_V_data_V_0_sel_rd );

    SC_METHOD(thread_sin_V_data_V_0_state_cmp_full);
    sensitive << ( sin_V_data_V_0_state );

    SC_METHOD(thread_sin_V_data_V_0_vld_in);
    sensitive << ( sin_TVALID );

    SC_METHOD(thread_sin_V_data_V_0_vld_out);
    sensitive << ( sin_V_data_V_0_state );

    SC_METHOD(thread_sin_V_dest_V_0_ack_out);
    sensitive << ( sin_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond3_fu_360_p2 );

    SC_METHOD(thread_sin_V_dest_V_0_vld_in);
    sensitive << ( sin_TVALID );

    SC_METHOD(thread_sout_TDATA);
    sensitive << ( sout_V_data_V_1_data_out );

    SC_METHOD(thread_sout_TDATA_blk_n);
    sensitive << ( sout_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );

    SC_METHOD(thread_sout_TDEST);
    sensitive << ( sout_V_dest_V_1_data_out );

    SC_METHOD(thread_sout_TID);
    sensitive << ( sout_V_id_V_1_data_out );

    SC_METHOD(thread_sout_TKEEP);
    sensitive << ( sout_V_keep_V_1_data_out );

    SC_METHOD(thread_sout_TLAST);
    sensitive << ( sout_V_last_V_1_data_out );

    SC_METHOD(thread_sout_TSTRB);
    sensitive << ( sout_V_strb_V_1_data_out );

    SC_METHOD(thread_sout_TUSER);
    sensitive << ( sout_V_user_V_1_data_out );

    SC_METHOD(thread_sout_TVALID);
    sensitive << ( sout_V_dest_V_1_state );

    SC_METHOD(thread_sout_V_data_V_1_ack_in);
    sensitive << ( sout_V_data_V_1_state );

    SC_METHOD(thread_sout_V_data_V_1_ack_out);
    sensitive << ( sout_TREADY );

    SC_METHOD(thread_sout_V_data_V_1_data_out);
    sensitive << ( sout_V_data_V_1_payload_A );
    sensitive << ( sout_V_data_V_1_payload_B );
    sensitive << ( sout_V_data_V_1_sel );

    SC_METHOD(thread_sout_V_data_V_1_load_A);
    sensitive << ( sout_V_data_V_1_sel_wr );
    sensitive << ( sout_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_sout_V_data_V_1_load_B);
    sensitive << ( sout_V_data_V_1_sel_wr );
    sensitive << ( sout_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_sout_V_data_V_1_sel);
    sensitive << ( sout_V_data_V_1_sel_rd );

    SC_METHOD(thread_sout_V_data_V_1_state_cmp_full);
    sensitive << ( sout_V_data_V_1_state );

    SC_METHOD(thread_sout_V_data_V_1_vld_in);
    sensitive << ( sout_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_sout_V_data_V_1_vld_out);
    sensitive << ( sout_V_data_V_1_state );

    SC_METHOD(thread_sout_V_dest_V_1_ack_in);
    sensitive << ( sout_V_dest_V_1_state );

    SC_METHOD(thread_sout_V_dest_V_1_ack_out);
    sensitive << ( sout_TREADY );

    SC_METHOD(thread_sout_V_dest_V_1_data_out);
    sensitive << ( sout_V_dest_V_1_sel );

    SC_METHOD(thread_sout_V_dest_V_1_sel);
    sensitive << ( sout_V_dest_V_1_sel_rd );

    SC_METHOD(thread_sout_V_dest_V_1_vld_in);
    sensitive << ( sout_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_sout_V_dest_V_1_vld_out);
    sensitive << ( sout_V_dest_V_1_state );

    SC_METHOD(thread_sout_V_id_V_1_ack_in);
    sensitive << ( sout_V_id_V_1_state );

    SC_METHOD(thread_sout_V_id_V_1_ack_out);
    sensitive << ( sout_TREADY );

    SC_METHOD(thread_sout_V_id_V_1_data_out);
    sensitive << ( sout_V_id_V_1_sel );

    SC_METHOD(thread_sout_V_id_V_1_sel);
    sensitive << ( sout_V_id_V_1_sel_rd );

    SC_METHOD(thread_sout_V_id_V_1_vld_in);
    sensitive << ( sout_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_sout_V_id_V_1_vld_out);
    sensitive << ( sout_V_id_V_1_state );

    SC_METHOD(thread_sout_V_keep_V_1_ack_in);
    sensitive << ( sout_V_keep_V_1_state );

    SC_METHOD(thread_sout_V_keep_V_1_ack_out);
    sensitive << ( sout_TREADY );

    SC_METHOD(thread_sout_V_keep_V_1_data_out);
    sensitive << ( sout_V_keep_V_1_sel );

    SC_METHOD(thread_sout_V_keep_V_1_sel);
    sensitive << ( sout_V_keep_V_1_sel_rd );

    SC_METHOD(thread_sout_V_keep_V_1_vld_in);
    sensitive << ( sout_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_sout_V_keep_V_1_vld_out);
    sensitive << ( sout_V_keep_V_1_state );

    SC_METHOD(thread_sout_V_last_V_1_ack_in);
    sensitive << ( sout_V_last_V_1_state );

    SC_METHOD(thread_sout_V_last_V_1_ack_out);
    sensitive << ( sout_TREADY );

    SC_METHOD(thread_sout_V_last_V_1_data_out);
    sensitive << ( sout_V_last_V_1_payload_A );
    sensitive << ( sout_V_last_V_1_payload_B );
    sensitive << ( sout_V_last_V_1_sel );

    SC_METHOD(thread_sout_V_last_V_1_load_A);
    sensitive << ( sout_V_last_V_1_sel_wr );
    sensitive << ( sout_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_sout_V_last_V_1_load_B);
    sensitive << ( sout_V_last_V_1_sel_wr );
    sensitive << ( sout_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_sout_V_last_V_1_sel);
    sensitive << ( sout_V_last_V_1_sel_rd );

    SC_METHOD(thread_sout_V_last_V_1_state_cmp_full);
    sensitive << ( sout_V_last_V_1_state );

    SC_METHOD(thread_sout_V_last_V_1_vld_in);
    sensitive << ( sout_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_sout_V_last_V_1_vld_out);
    sensitive << ( sout_V_last_V_1_state );

    SC_METHOD(thread_sout_V_strb_V_1_ack_in);
    sensitive << ( sout_V_strb_V_1_state );

    SC_METHOD(thread_sout_V_strb_V_1_ack_out);
    sensitive << ( sout_TREADY );

    SC_METHOD(thread_sout_V_strb_V_1_data_out);
    sensitive << ( sout_V_strb_V_1_sel );

    SC_METHOD(thread_sout_V_strb_V_1_sel);
    sensitive << ( sout_V_strb_V_1_sel_rd );

    SC_METHOD(thread_sout_V_strb_V_1_vld_in);
    sensitive << ( sout_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_sout_V_strb_V_1_vld_out);
    sensitive << ( sout_V_strb_V_1_state );

    SC_METHOD(thread_sout_V_user_V_1_ack_in);
    sensitive << ( sout_V_user_V_1_state );

    SC_METHOD(thread_sout_V_user_V_1_ack_out);
    sensitive << ( sout_TREADY );

    SC_METHOD(thread_sout_V_user_V_1_data_out);
    sensitive << ( sout_V_user_V_1_sel );

    SC_METHOD(thread_sout_V_user_V_1_sel);
    sensitive << ( sout_V_user_V_1_sel_rd );

    SC_METHOD(thread_sout_V_user_V_1_vld_in);
    sensitive << ( sout_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_sout_V_user_V_1_vld_out);
    sensitive << ( sout_V_user_V_1_state );

    SC_METHOD(thread_state_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( state_addr_6_reg_582 );
    sensitive << ( exitcond_i_fu_418_p2 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( state_addr_5_reg_605 );
    sensitive << ( exitcond_i2_fu_446_p2 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( grp_aes128_mix_columns_h_fu_308_state_address0 );
    sensitive << ( grp_aes128_shift_rows_hw_fu_324_state_address0 );
    sensitive << ( grp_aes128_add_round_key_fu_338_state_address0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( tmp_30_fu_394_p1 );
    sensitive << ( tmp_i_fu_430_p1 );
    sensitive << ( tmp_i3_fu_458_p1 );
    sensitive << ( tmp_34_fu_529_p1 );

    SC_METHOD(thread_state_ce0);
    sensitive << ( sin_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond3_fu_360_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( exitcond_i_fu_418_p2 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( exitcond_i2_fu_446_p2 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( grp_aes128_mix_columns_h_fu_308_state_ce0 );
    sensitive << ( grp_aes128_shift_rows_hw_fu_324_state_ce0 );
    sensitive << ( grp_aes128_add_round_key_fu_338_state_ce0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state22 );

    SC_METHOD(thread_state_d0);
    sensitive << ( sin_V_data_V_0_data_out );
    sensitive << ( sbox_hw_q0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_aes128_mix_columns_h_fu_308_state_d0 );
    sensitive << ( grp_aes128_shift_rows_hw_fu_324_state_d0 );
    sensitive << ( grp_aes128_add_round_key_fu_338_state_d0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state22 );

    SC_METHOD(thread_state_we0);
    sensitive << ( sin_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond3_fu_360_p2 );
    sensitive << ( grp_aes128_mix_columns_h_fu_308_state_we0 );
    sensitive << ( grp_aes128_shift_rows_hw_fu_324_state_we0 );
    sensitive << ( grp_aes128_add_round_key_fu_338_state_we0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state22 );

    SC_METHOD(thread_tmp_28_fu_381_p3);
    sensitive << ( tmp_fu_377_p1 );

    SC_METHOD(thread_tmp_29_fu_389_p2);
    sensitive << ( i_cast_reg_545 );
    sensitive << ( tmp_28_fu_381_p3 );

    SC_METHOD(thread_tmp_30_fu_394_p1);
    sensitive << ( tmp_29_fu_389_p2 );

    SC_METHOD(thread_tmp_31_fu_488_p3);
    sensitive << ( tmp_36_fu_484_p1 );

    SC_METHOD(thread_tmp_32_fu_516_p3);
    sensitive << ( tmp_37_fu_512_p1 );

    SC_METHOD(thread_tmp_33_fu_524_p2);
    sensitive << ( i_2_cast_reg_615 );
    sensitive << ( tmp_32_fu_516_p3 );

    SC_METHOD(thread_tmp_34_fu_529_p1);
    sensitive << ( tmp_33_fu_524_p2 );

    SC_METHOD(thread_tmp_35_fu_534_p2);
    sensitive << ( tmp_31_reg_628 );
    sensitive << ( j_1_cast_fu_496_p1 );

    SC_METHOD(thread_tmp_36_fu_484_p1);
    sensitive << ( i_2_reg_286 );

    SC_METHOD(thread_tmp_37_fu_512_p1);
    sensitive << ( j_1_reg_297 );

    SC_METHOD(thread_tmp_41_cast_fu_413_p1);
    sensitive << ( tmp_s_fu_405_p3 );

    SC_METHOD(thread_tmp_fu_377_p1);
    sensitive << ( j_reg_241 );

    SC_METHOD(thread_tmp_i3_fu_458_p1);
    sensitive << ( i_i1_reg_275 );

    SC_METHOD(thread_tmp_i6_fu_463_p1);
    sensitive << ( state_q0 );

    SC_METHOD(thread_tmp_i_20_fu_441_p1);
    sensitive << ( state_q0 );

    SC_METHOD(thread_tmp_i_fu_430_p1);
    sensitive << ( i_i_reg_264 );

    SC_METHOD(thread_tmp_last_V_fu_539_p2);
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( exitcond_fu_500_p2 );
    sensitive << ( tmp_35_fu_534_p2 );

    SC_METHOD(thread_tmp_s_fu_405_p3);
    sensitive << ( i_1_reg_252 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( sin_V_data_V_0_vld_out );
    sensitive << ( sout_V_data_V_1_ack_in );
    sensitive << ( sout_V_data_V_1_state );
    sensitive << ( sout_V_keep_V_1_ack_in );
    sensitive << ( sout_V_keep_V_1_state );
    sensitive << ( sout_V_strb_V_1_ack_in );
    sensitive << ( sout_V_strb_V_1_state );
    sensitive << ( sout_V_user_V_1_ack_in );
    sensitive << ( sout_V_user_V_1_state );
    sensitive << ( sout_V_last_V_1_ack_in );
    sensitive << ( sout_V_last_V_1_state );
    sensitive << ( sout_V_id_V_1_ack_in );
    sensitive << ( sout_V_id_V_1_state );
    sensitive << ( sout_V_dest_V_1_ack_in );
    sensitive << ( sout_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond3_fu_360_p2 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond2_fu_399_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( exitcond_i_fu_418_p2 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( exitcond_i2_fu_446_p2 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( exitcond4_fu_472_p2 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( exitcond_fu_500_p2 );
    sensitive << ( grp_aes128_mix_columns_h_fu_308_ap_done );
    sensitive << ( grp_aes128_expand_key_hw_fu_313_ap_done );
    sensitive << ( grp_aes128_shift_rows_hw_fu_324_ap_done );
    sensitive << ( grp_aes128_extract_round_fu_329_ap_done );
    sensitive << ( grp_aes128_add_round_key_fu_338_ap_done );
    sensitive << ( exitcond1_fu_348_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_block_state22_on_subcall_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    sin_V_data_V_0_sel_rd = SC_LOGIC_0;
    sin_V_data_V_0_sel_wr = SC_LOGIC_0;
    sin_V_data_V_0_state = "00";
    sin_V_dest_V_0_state = "00";
    sout_V_data_V_1_sel_rd = SC_LOGIC_0;
    sout_V_data_V_1_sel_wr = SC_LOGIC_0;
    sout_V_data_V_1_state = "00";
    sout_V_keep_V_1_sel_rd = SC_LOGIC_0;
    sout_V_keep_V_1_state = "00";
    sout_V_strb_V_1_sel_rd = SC_LOGIC_0;
    sout_V_strb_V_1_state = "00";
    sout_V_user_V_1_sel_rd = SC_LOGIC_0;
    sout_V_user_V_1_state = "00";
    sout_V_last_V_1_sel_rd = SC_LOGIC_0;
    sout_V_last_V_1_sel_wr = SC_LOGIC_0;
    sout_V_last_V_1_state = "00";
    sout_V_id_V_1_sel_rd = SC_LOGIC_0;
    sout_V_id_V_1_state = "00";
    sout_V_dest_V_1_sel_rd = SC_LOGIC_0;
    sout_V_dest_V_1_state = "00";
    ap_CS_fsm = "0000000000000000000000000001";
    grp_aes128_mix_columns_h_fu_308_ap_start_reg = SC_LOGIC_0;
    grp_aes128_expand_key_hw_fu_313_ap_start_reg = SC_LOGIC_0;
    grp_aes128_shift_rows_hw_fu_324_ap_start_reg = SC_LOGIC_0;
    grp_aes128_extract_round_fu_329_ap_start_reg = SC_LOGIC_0;
    grp_aes128_add_round_key_fu_338_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aes128_encrypt_block_hw_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, sin_TDATA, "(port)sin_TDATA");
    sc_trace(mVcdFile, sin_TVALID, "(port)sin_TVALID");
    sc_trace(mVcdFile, sin_TREADY, "(port)sin_TREADY");
    sc_trace(mVcdFile, sin_TKEEP, "(port)sin_TKEEP");
    sc_trace(mVcdFile, sin_TSTRB, "(port)sin_TSTRB");
    sc_trace(mVcdFile, sin_TUSER, "(port)sin_TUSER");
    sc_trace(mVcdFile, sin_TLAST, "(port)sin_TLAST");
    sc_trace(mVcdFile, sin_TID, "(port)sin_TID");
    sc_trace(mVcdFile, sin_TDEST, "(port)sin_TDEST");
    sc_trace(mVcdFile, sout_TDATA, "(port)sout_TDATA");
    sc_trace(mVcdFile, sout_TVALID, "(port)sout_TVALID");
    sc_trace(mVcdFile, sout_TREADY, "(port)sout_TREADY");
    sc_trace(mVcdFile, sout_TKEEP, "(port)sout_TKEEP");
    sc_trace(mVcdFile, sout_TSTRB, "(port)sout_TSTRB");
    sc_trace(mVcdFile, sout_TUSER, "(port)sout_TUSER");
    sc_trace(mVcdFile, sout_TLAST, "(port)sout_TLAST");
    sc_trace(mVcdFile, sout_TID, "(port)sout_TID");
    sc_trace(mVcdFile, sout_TDEST, "(port)sout_TDEST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, sin_V_data_V_0_data_out, "sin_V_data_V_0_data_out");
    sc_trace(mVcdFile, sin_V_data_V_0_vld_in, "sin_V_data_V_0_vld_in");
    sc_trace(mVcdFile, sin_V_data_V_0_vld_out, "sin_V_data_V_0_vld_out");
    sc_trace(mVcdFile, sin_V_data_V_0_ack_in, "sin_V_data_V_0_ack_in");
    sc_trace(mVcdFile, sin_V_data_V_0_ack_out, "sin_V_data_V_0_ack_out");
    sc_trace(mVcdFile, sin_V_data_V_0_payload_A, "sin_V_data_V_0_payload_A");
    sc_trace(mVcdFile, sin_V_data_V_0_payload_B, "sin_V_data_V_0_payload_B");
    sc_trace(mVcdFile, sin_V_data_V_0_sel_rd, "sin_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, sin_V_data_V_0_sel_wr, "sin_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, sin_V_data_V_0_sel, "sin_V_data_V_0_sel");
    sc_trace(mVcdFile, sin_V_data_V_0_load_A, "sin_V_data_V_0_load_A");
    sc_trace(mVcdFile, sin_V_data_V_0_load_B, "sin_V_data_V_0_load_B");
    sc_trace(mVcdFile, sin_V_data_V_0_state, "sin_V_data_V_0_state");
    sc_trace(mVcdFile, sin_V_data_V_0_state_cmp_full, "sin_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, sin_V_dest_V_0_vld_in, "sin_V_dest_V_0_vld_in");
    sc_trace(mVcdFile, sin_V_dest_V_0_ack_out, "sin_V_dest_V_0_ack_out");
    sc_trace(mVcdFile, sin_V_dest_V_0_state, "sin_V_dest_V_0_state");
    sc_trace(mVcdFile, sout_V_data_V_1_data_out, "sout_V_data_V_1_data_out");
    sc_trace(mVcdFile, sout_V_data_V_1_vld_in, "sout_V_data_V_1_vld_in");
    sc_trace(mVcdFile, sout_V_data_V_1_vld_out, "sout_V_data_V_1_vld_out");
    sc_trace(mVcdFile, sout_V_data_V_1_ack_in, "sout_V_data_V_1_ack_in");
    sc_trace(mVcdFile, sout_V_data_V_1_ack_out, "sout_V_data_V_1_ack_out");
    sc_trace(mVcdFile, sout_V_data_V_1_payload_A, "sout_V_data_V_1_payload_A");
    sc_trace(mVcdFile, sout_V_data_V_1_payload_B, "sout_V_data_V_1_payload_B");
    sc_trace(mVcdFile, sout_V_data_V_1_sel_rd, "sout_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, sout_V_data_V_1_sel_wr, "sout_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, sout_V_data_V_1_sel, "sout_V_data_V_1_sel");
    sc_trace(mVcdFile, sout_V_data_V_1_load_A, "sout_V_data_V_1_load_A");
    sc_trace(mVcdFile, sout_V_data_V_1_load_B, "sout_V_data_V_1_load_B");
    sc_trace(mVcdFile, sout_V_data_V_1_state, "sout_V_data_V_1_state");
    sc_trace(mVcdFile, sout_V_data_V_1_state_cmp_full, "sout_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, sout_V_keep_V_1_data_out, "sout_V_keep_V_1_data_out");
    sc_trace(mVcdFile, sout_V_keep_V_1_vld_in, "sout_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, sout_V_keep_V_1_vld_out, "sout_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, sout_V_keep_V_1_ack_in, "sout_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, sout_V_keep_V_1_ack_out, "sout_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, sout_V_keep_V_1_sel_rd, "sout_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, sout_V_keep_V_1_sel, "sout_V_keep_V_1_sel");
    sc_trace(mVcdFile, sout_V_keep_V_1_state, "sout_V_keep_V_1_state");
    sc_trace(mVcdFile, sout_V_strb_V_1_data_out, "sout_V_strb_V_1_data_out");
    sc_trace(mVcdFile, sout_V_strb_V_1_vld_in, "sout_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, sout_V_strb_V_1_vld_out, "sout_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, sout_V_strb_V_1_ack_in, "sout_V_strb_V_1_ack_in");
    sc_trace(mVcdFile, sout_V_strb_V_1_ack_out, "sout_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, sout_V_strb_V_1_sel_rd, "sout_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, sout_V_strb_V_1_sel, "sout_V_strb_V_1_sel");
    sc_trace(mVcdFile, sout_V_strb_V_1_state, "sout_V_strb_V_1_state");
    sc_trace(mVcdFile, sout_V_user_V_1_data_out, "sout_V_user_V_1_data_out");
    sc_trace(mVcdFile, sout_V_user_V_1_vld_in, "sout_V_user_V_1_vld_in");
    sc_trace(mVcdFile, sout_V_user_V_1_vld_out, "sout_V_user_V_1_vld_out");
    sc_trace(mVcdFile, sout_V_user_V_1_ack_in, "sout_V_user_V_1_ack_in");
    sc_trace(mVcdFile, sout_V_user_V_1_ack_out, "sout_V_user_V_1_ack_out");
    sc_trace(mVcdFile, sout_V_user_V_1_sel_rd, "sout_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, sout_V_user_V_1_sel, "sout_V_user_V_1_sel");
    sc_trace(mVcdFile, sout_V_user_V_1_state, "sout_V_user_V_1_state");
    sc_trace(mVcdFile, sout_V_last_V_1_data_out, "sout_V_last_V_1_data_out");
    sc_trace(mVcdFile, sout_V_last_V_1_vld_in, "sout_V_last_V_1_vld_in");
    sc_trace(mVcdFile, sout_V_last_V_1_vld_out, "sout_V_last_V_1_vld_out");
    sc_trace(mVcdFile, sout_V_last_V_1_ack_in, "sout_V_last_V_1_ack_in");
    sc_trace(mVcdFile, sout_V_last_V_1_ack_out, "sout_V_last_V_1_ack_out");
    sc_trace(mVcdFile, sout_V_last_V_1_payload_A, "sout_V_last_V_1_payload_A");
    sc_trace(mVcdFile, sout_V_last_V_1_payload_B, "sout_V_last_V_1_payload_B");
    sc_trace(mVcdFile, sout_V_last_V_1_sel_rd, "sout_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, sout_V_last_V_1_sel_wr, "sout_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, sout_V_last_V_1_sel, "sout_V_last_V_1_sel");
    sc_trace(mVcdFile, sout_V_last_V_1_load_A, "sout_V_last_V_1_load_A");
    sc_trace(mVcdFile, sout_V_last_V_1_load_B, "sout_V_last_V_1_load_B");
    sc_trace(mVcdFile, sout_V_last_V_1_state, "sout_V_last_V_1_state");
    sc_trace(mVcdFile, sout_V_last_V_1_state_cmp_full, "sout_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, sout_V_id_V_1_data_out, "sout_V_id_V_1_data_out");
    sc_trace(mVcdFile, sout_V_id_V_1_vld_in, "sout_V_id_V_1_vld_in");
    sc_trace(mVcdFile, sout_V_id_V_1_vld_out, "sout_V_id_V_1_vld_out");
    sc_trace(mVcdFile, sout_V_id_V_1_ack_in, "sout_V_id_V_1_ack_in");
    sc_trace(mVcdFile, sout_V_id_V_1_ack_out, "sout_V_id_V_1_ack_out");
    sc_trace(mVcdFile, sout_V_id_V_1_sel_rd, "sout_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, sout_V_id_V_1_sel, "sout_V_id_V_1_sel");
    sc_trace(mVcdFile, sout_V_id_V_1_state, "sout_V_id_V_1_state");
    sc_trace(mVcdFile, sout_V_dest_V_1_data_out, "sout_V_dest_V_1_data_out");
    sc_trace(mVcdFile, sout_V_dest_V_1_vld_in, "sout_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, sout_V_dest_V_1_vld_out, "sout_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, sout_V_dest_V_1_ack_in, "sout_V_dest_V_1_ack_in");
    sc_trace(mVcdFile, sout_V_dest_V_1_ack_out, "sout_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, sout_V_dest_V_1_sel_rd, "sout_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, sout_V_dest_V_1_sel, "sout_V_dest_V_1_sel");
    sc_trace(mVcdFile, sout_V_dest_V_1_state, "sout_V_dest_V_1_state");
    sc_trace(mVcdFile, sbox_hw_address0, "sbox_hw_address0");
    sc_trace(mVcdFile, sbox_hw_ce0, "sbox_hw_ce0");
    sc_trace(mVcdFile, sbox_hw_q0, "sbox_hw_q0");
    sc_trace(mVcdFile, sin_TDATA_blk_n, "sin_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond3_fu_360_p2, "exitcond3_fu_360_p2");
    sc_trace(mVcdFile, sout_TDATA_blk_n, "sout_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, i_cast_fu_344_p1, "i_cast_fu_344_p1");
    sc_trace(mVcdFile, i_cast_reg_545, "i_cast_reg_545");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_11_fu_354_p2, "i_11_fu_354_p2");
    sc_trace(mVcdFile, i_11_reg_553, "i_11_reg_553");
    sc_trace(mVcdFile, j_6_fu_366_p2, "j_6_fu_366_p2");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, tmp_41_cast_fu_413_p1, "tmp_41_cast_fu_413_p1");
    sc_trace(mVcdFile, tmp_41_cast_reg_569, "tmp_41_cast_reg_569");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, exitcond2_fu_399_p2, "exitcond2_fu_399_p2");
    sc_trace(mVcdFile, i_3_fu_424_p2, "i_3_fu_424_p2");
    sc_trace(mVcdFile, i_3_reg_577, "i_3_reg_577");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, state_addr_6_reg_582, "state_addr_6_reg_582");
    sc_trace(mVcdFile, exitcond_i_fu_418_p2, "exitcond_i_fu_418_p2");
    sc_trace(mVcdFile, i_13_fu_435_p2, "i_13_fu_435_p2");
    sc_trace(mVcdFile, i_13_reg_587, "i_13_reg_587");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, i_12_fu_452_p2, "i_12_fu_452_p2");
    sc_trace(mVcdFile, i_12_reg_600, "i_12_reg_600");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, state_addr_5_reg_605, "state_addr_5_reg_605");
    sc_trace(mVcdFile, exitcond_i2_fu_446_p2, "exitcond_i2_fu_446_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, i_2_cast_fu_468_p1, "i_2_cast_fu_468_p1");
    sc_trace(mVcdFile, i_2_cast_reg_615, "i_2_cast_reg_615");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_block_state25, "ap_block_state25");
    sc_trace(mVcdFile, i_14_fu_478_p2, "i_14_fu_478_p2");
    sc_trace(mVcdFile, i_14_reg_623, "i_14_reg_623");
    sc_trace(mVcdFile, tmp_31_fu_488_p3, "tmp_31_fu_488_p3");
    sc_trace(mVcdFile, tmp_31_reg_628, "tmp_31_reg_628");
    sc_trace(mVcdFile, exitcond4_fu_472_p2, "exitcond4_fu_472_p2");
    sc_trace(mVcdFile, j_7_fu_506_p2, "j_7_fu_506_p2");
    sc_trace(mVcdFile, j_7_reg_636, "j_7_reg_636");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, exitcond_fu_500_p2, "exitcond_fu_500_p2");
    sc_trace(mVcdFile, tmp_last_V_fu_539_p2, "tmp_last_V_fu_539_p2");
    sc_trace(mVcdFile, tmp_last_V_reg_646, "tmp_last_V_reg_646");
    sc_trace(mVcdFile, state_q0, "state_q0");
    sc_trace(mVcdFile, state_address0, "state_address0");
    sc_trace(mVcdFile, state_ce0, "state_ce0");
    sc_trace(mVcdFile, state_we0, "state_we0");
    sc_trace(mVcdFile, state_d0, "state_d0");
    sc_trace(mVcdFile, round_key_address0, "round_key_address0");
    sc_trace(mVcdFile, round_key_ce0, "round_key_ce0");
    sc_trace(mVcdFile, round_key_we0, "round_key_we0");
    sc_trace(mVcdFile, round_key_q0, "round_key_q0");
    sc_trace(mVcdFile, expanded_key_address0, "expanded_key_address0");
    sc_trace(mVcdFile, expanded_key_ce0, "expanded_key_ce0");
    sc_trace(mVcdFile, expanded_key_we0, "expanded_key_we0");
    sc_trace(mVcdFile, expanded_key_q0, "expanded_key_q0");
    sc_trace(mVcdFile, grp_aes128_mix_columns_h_fu_308_ap_start, "grp_aes128_mix_columns_h_fu_308_ap_start");
    sc_trace(mVcdFile, grp_aes128_mix_columns_h_fu_308_ap_done, "grp_aes128_mix_columns_h_fu_308_ap_done");
    sc_trace(mVcdFile, grp_aes128_mix_columns_h_fu_308_ap_idle, "grp_aes128_mix_columns_h_fu_308_ap_idle");
    sc_trace(mVcdFile, grp_aes128_mix_columns_h_fu_308_ap_ready, "grp_aes128_mix_columns_h_fu_308_ap_ready");
    sc_trace(mVcdFile, grp_aes128_mix_columns_h_fu_308_state_address0, "grp_aes128_mix_columns_h_fu_308_state_address0");
    sc_trace(mVcdFile, grp_aes128_mix_columns_h_fu_308_state_ce0, "grp_aes128_mix_columns_h_fu_308_state_ce0");
    sc_trace(mVcdFile, grp_aes128_mix_columns_h_fu_308_state_we0, "grp_aes128_mix_columns_h_fu_308_state_we0");
    sc_trace(mVcdFile, grp_aes128_mix_columns_h_fu_308_state_d0, "grp_aes128_mix_columns_h_fu_308_state_d0");
    sc_trace(mVcdFile, grp_aes128_expand_key_hw_fu_313_ap_start, "grp_aes128_expand_key_hw_fu_313_ap_start");
    sc_trace(mVcdFile, grp_aes128_expand_key_hw_fu_313_ap_done, "grp_aes128_expand_key_hw_fu_313_ap_done");
    sc_trace(mVcdFile, grp_aes128_expand_key_hw_fu_313_ap_idle, "grp_aes128_expand_key_hw_fu_313_ap_idle");
    sc_trace(mVcdFile, grp_aes128_expand_key_hw_fu_313_ap_ready, "grp_aes128_expand_key_hw_fu_313_ap_ready");
    sc_trace(mVcdFile, grp_aes128_expand_key_hw_fu_313_expanded_key_address0, "grp_aes128_expand_key_hw_fu_313_expanded_key_address0");
    sc_trace(mVcdFile, grp_aes128_expand_key_hw_fu_313_expanded_key_ce0, "grp_aes128_expand_key_hw_fu_313_expanded_key_ce0");
    sc_trace(mVcdFile, grp_aes128_expand_key_hw_fu_313_expanded_key_we0, "grp_aes128_expand_key_hw_fu_313_expanded_key_we0");
    sc_trace(mVcdFile, grp_aes128_expand_key_hw_fu_313_expanded_key_d0, "grp_aes128_expand_key_hw_fu_313_expanded_key_d0");
    sc_trace(mVcdFile, grp_aes128_shift_rows_hw_fu_324_ap_start, "grp_aes128_shift_rows_hw_fu_324_ap_start");
    sc_trace(mVcdFile, grp_aes128_shift_rows_hw_fu_324_ap_done, "grp_aes128_shift_rows_hw_fu_324_ap_done");
    sc_trace(mVcdFile, grp_aes128_shift_rows_hw_fu_324_ap_idle, "grp_aes128_shift_rows_hw_fu_324_ap_idle");
    sc_trace(mVcdFile, grp_aes128_shift_rows_hw_fu_324_ap_ready, "grp_aes128_shift_rows_hw_fu_324_ap_ready");
    sc_trace(mVcdFile, grp_aes128_shift_rows_hw_fu_324_state_address0, "grp_aes128_shift_rows_hw_fu_324_state_address0");
    sc_trace(mVcdFile, grp_aes128_shift_rows_hw_fu_324_state_ce0, "grp_aes128_shift_rows_hw_fu_324_state_ce0");
    sc_trace(mVcdFile, grp_aes128_shift_rows_hw_fu_324_state_we0, "grp_aes128_shift_rows_hw_fu_324_state_we0");
    sc_trace(mVcdFile, grp_aes128_shift_rows_hw_fu_324_state_d0, "grp_aes128_shift_rows_hw_fu_324_state_d0");
    sc_trace(mVcdFile, grp_aes128_extract_round_fu_329_ap_start, "grp_aes128_extract_round_fu_329_ap_start");
    sc_trace(mVcdFile, grp_aes128_extract_round_fu_329_ap_done, "grp_aes128_extract_round_fu_329_ap_done");
    sc_trace(mVcdFile, grp_aes128_extract_round_fu_329_ap_idle, "grp_aes128_extract_round_fu_329_ap_idle");
    sc_trace(mVcdFile, grp_aes128_extract_round_fu_329_ap_ready, "grp_aes128_extract_round_fu_329_ap_ready");
    sc_trace(mVcdFile, grp_aes128_extract_round_fu_329_expanded_key_address0, "grp_aes128_extract_round_fu_329_expanded_key_address0");
    sc_trace(mVcdFile, grp_aes128_extract_round_fu_329_expanded_key_ce0, "grp_aes128_extract_round_fu_329_expanded_key_ce0");
    sc_trace(mVcdFile, grp_aes128_extract_round_fu_329_expanded_key_offset, "grp_aes128_extract_round_fu_329_expanded_key_offset");
    sc_trace(mVcdFile, grp_aes128_extract_round_fu_329_round_key_address0, "grp_aes128_extract_round_fu_329_round_key_address0");
    sc_trace(mVcdFile, grp_aes128_extract_round_fu_329_round_key_ce0, "grp_aes128_extract_round_fu_329_round_key_ce0");
    sc_trace(mVcdFile, grp_aes128_extract_round_fu_329_round_key_we0, "grp_aes128_extract_round_fu_329_round_key_we0");
    sc_trace(mVcdFile, grp_aes128_extract_round_fu_329_round_key_d0, "grp_aes128_extract_round_fu_329_round_key_d0");
    sc_trace(mVcdFile, grp_aes128_add_round_key_fu_338_ap_start, "grp_aes128_add_round_key_fu_338_ap_start");
    sc_trace(mVcdFile, grp_aes128_add_round_key_fu_338_ap_done, "grp_aes128_add_round_key_fu_338_ap_done");
    sc_trace(mVcdFile, grp_aes128_add_round_key_fu_338_ap_idle, "grp_aes128_add_round_key_fu_338_ap_idle");
    sc_trace(mVcdFile, grp_aes128_add_round_key_fu_338_ap_ready, "grp_aes128_add_round_key_fu_338_ap_ready");
    sc_trace(mVcdFile, grp_aes128_add_round_key_fu_338_state_address0, "grp_aes128_add_round_key_fu_338_state_address0");
    sc_trace(mVcdFile, grp_aes128_add_round_key_fu_338_state_ce0, "grp_aes128_add_round_key_fu_338_state_ce0");
    sc_trace(mVcdFile, grp_aes128_add_round_key_fu_338_state_we0, "grp_aes128_add_round_key_fu_338_state_we0");
    sc_trace(mVcdFile, grp_aes128_add_round_key_fu_338_state_d0, "grp_aes128_add_round_key_fu_338_state_d0");
    sc_trace(mVcdFile, grp_aes128_add_round_key_fu_338_round_key_address0, "grp_aes128_add_round_key_fu_338_round_key_address0");
    sc_trace(mVcdFile, grp_aes128_add_round_key_fu_338_round_key_ce0, "grp_aes128_add_round_key_fu_338_round_key_ce0");
    sc_trace(mVcdFile, i_reg_230, "i_reg_230");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, j_reg_241, "j_reg_241");
    sc_trace(mVcdFile, exitcond1_fu_348_p2, "exitcond1_fu_348_p2");
    sc_trace(mVcdFile, i_1_reg_252, "i_1_reg_252");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, i_i_reg_264, "i_i_reg_264");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, i_i1_reg_275, "i_i1_reg_275");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, i_2_reg_286, "i_2_reg_286");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, j_1_reg_297, "j_1_reg_297");
    sc_trace(mVcdFile, grp_aes128_mix_columns_h_fu_308_ap_start_reg, "grp_aes128_mix_columns_h_fu_308_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, grp_aes128_expand_key_hw_fu_313_ap_start_reg, "grp_aes128_expand_key_hw_fu_313_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_aes128_shift_rows_hw_fu_324_ap_start_reg, "grp_aes128_shift_rows_hw_fu_324_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, grp_aes128_extract_round_fu_329_ap_start_reg, "grp_aes128_extract_round_fu_329_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_aes128_add_round_key_fu_338_ap_start_reg, "grp_aes128_add_round_key_fu_338_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, tmp_30_fu_394_p1, "tmp_30_fu_394_p1");
    sc_trace(mVcdFile, tmp_i_fu_430_p1, "tmp_i_fu_430_p1");
    sc_trace(mVcdFile, tmp_i_20_fu_441_p1, "tmp_i_20_fu_441_p1");
    sc_trace(mVcdFile, tmp_i3_fu_458_p1, "tmp_i3_fu_458_p1");
    sc_trace(mVcdFile, tmp_i6_fu_463_p1, "tmp_i6_fu_463_p1");
    sc_trace(mVcdFile, tmp_34_fu_529_p1, "tmp_34_fu_529_p1");
    sc_trace(mVcdFile, tmp_fu_377_p1, "tmp_fu_377_p1");
    sc_trace(mVcdFile, tmp_28_fu_381_p3, "tmp_28_fu_381_p3");
    sc_trace(mVcdFile, tmp_29_fu_389_p2, "tmp_29_fu_389_p2");
    sc_trace(mVcdFile, tmp_s_fu_405_p3, "tmp_s_fu_405_p3");
    sc_trace(mVcdFile, tmp_36_fu_484_p1, "tmp_36_fu_484_p1");
    sc_trace(mVcdFile, tmp_37_fu_512_p1, "tmp_37_fu_512_p1");
    sc_trace(mVcdFile, tmp_32_fu_516_p3, "tmp_32_fu_516_p3");
    sc_trace(mVcdFile, tmp_33_fu_524_p2, "tmp_33_fu_524_p2");
    sc_trace(mVcdFile, j_1_cast_fu_496_p1, "j_1_cast_fu_496_p1");
    sc_trace(mVcdFile, tmp_35_fu_534_p2, "tmp_35_fu_534_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_state22_on_subcall_done, "ap_block_state22_on_subcall_done");
#endif

    }
    mHdltvinHandle.open("aes128_encrypt_block_hw.hdltvin.dat");
    mHdltvoutHandle.open("aes128_encrypt_block_hw.hdltvout.dat");
}

aes128_encrypt_block_hw::~aes128_encrypt_block_hw() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete sbox_hw_U;
    delete state_U;
    delete round_key_U;
    delete expanded_key_U;
    delete grp_aes128_mix_columns_h_fu_308;
    delete grp_aes128_expand_key_hw_fu_313;
    delete grp_aes128_shift_rows_hw_fu_324;
    delete grp_aes128_extract_round_fu_329;
    delete grp_aes128_add_round_key_fu_338;
}

void aes128_encrypt_block_hw::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_aes128_add_round_key_fu_338_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
            grp_aes128_add_round_key_fu_338_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_aes128_add_round_key_fu_338_ap_ready.read())) {
            grp_aes128_add_round_key_fu_338_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_aes128_expand_key_hw_fu_313_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_348_p2.read()))) {
            grp_aes128_expand_key_hw_fu_313_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_aes128_expand_key_hw_fu_313_ap_ready.read())) {
            grp_aes128_expand_key_hw_fu_313_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_aes128_extract_round_fu_329_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_399_p2.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i2_fu_446_p2.read())) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
            grp_aes128_extract_round_fu_329_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_aes128_extract_round_fu_329_ap_ready.read())) {
            grp_aes128_extract_round_fu_329_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_aes128_mix_columns_h_fu_308_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
            grp_aes128_mix_columns_h_fu_308_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_aes128_mix_columns_h_fu_308_ap_ready.read())) {
            grp_aes128_mix_columns_h_fu_308_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_aes128_shift_rows_hw_fu_324_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i_fu_418_p2.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i2_fu_446_p2.read())))) {
            grp_aes128_shift_rows_hw_fu_324_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_aes128_shift_rows_hw_fu_324_ap_ready.read())) {
            grp_aes128_shift_rows_hw_fu_324_ap_start_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(grp_aes128_add_round_key_fu_338_ap_done.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
            i_1_reg_252 = i_13_reg_587.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            i_1_reg_252 = ap_const_lv4_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_500_p2.read()))) {
        i_2_reg_286 = i_14_reg_623.read();
    } else if ((esl_seteq<1,1,1>(grp_aes128_add_round_key_fu_338_ap_done.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        i_2_reg_286 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_399_p2.read()))) {
        i_i1_reg_275 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        i_i1_reg_275 = i_12_reg_600.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        i_i_reg_264 = i_3_reg_577.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
                esl_seteq<1,1,1>(grp_aes128_extract_round_fu_329_ap_done.read(), ap_const_logic_1))) {
        i_i_reg_264 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_360_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, sin_V_data_V_0_vld_out.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond3_fu_360_p2.read()))) {
        i_reg_230 = i_11_reg_553.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        i_reg_230 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, sout_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_dest_V_1_ack_in.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_472_p2.read()))) {
        j_1_reg_297 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
                esl_seteq<1,1,1>(sout_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
        j_1_reg_297 = j_7_reg_636.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_348_p2.read()))) {
        j_reg_241 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_360_p2.read()) && 
                !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_360_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, sin_V_data_V_0_vld_out.read())))) {
        j_reg_241 = j_6_fu_366_p2.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        sin_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, sin_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, sin_V_data_V_0_vld_out.read()))) {
            sin_V_data_V_0_sel_rd =  (sc_logic) (~sin_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        sin_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, sin_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, sin_V_data_V_0_ack_in.read()))) {
            sin_V_data_V_0_sel_wr =  (sc_logic) (~sin_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        sin_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, sin_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, sin_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(sin_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, sin_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(sin_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            sin_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, sin_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, sin_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(sin_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, sin_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(sin_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            sin_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, sin_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(sin_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, sin_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(sin_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(sin_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, sin_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, sin_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, sin_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, sin_V_data_V_0_ack_out.read()))))) {
            sin_V_data_V_0_state = ap_const_lv2_3;
        } else {
            sin_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        sin_V_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, sin_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, sin_V_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, sin_V_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, sin_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, sin_V_dest_V_0_state.read())))) {
            sin_V_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, sin_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, sin_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, sin_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, sin_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, sin_V_dest_V_0_state.read())))) {
            sin_V_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, sin_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, sin_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, sin_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, sin_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, sin_V_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, sin_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, sin_V_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, sin_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, sin_V_dest_V_0_ack_out.read()))))) {
            sin_V_dest_V_0_state = ap_const_lv2_3;
        } else {
            sin_V_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        sout_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, sout_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, sout_V_data_V_1_vld_out.read()))) {
            sout_V_data_V_1_sel_rd =  (sc_logic) (~sout_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        sout_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, sout_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, sout_V_data_V_1_ack_in.read()))) {
            sout_V_data_V_1_sel_wr =  (sc_logic) (~sout_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        sout_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, sout_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, sout_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, sout_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, sout_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, sout_V_data_V_1_state.read())))) {
            sout_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, sout_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, sout_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, sout_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, sout_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, sout_V_data_V_1_state.read())))) {
            sout_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, sout_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, sout_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, sout_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, sout_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, sout_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, sout_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, sout_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, sout_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, sout_V_data_V_1_ack_out.read()))))) {
            sout_V_data_V_1_state = ap_const_lv2_3;
        } else {
            sout_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        sout_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, sout_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, sout_V_dest_V_1_vld_out.read()))) {
            sout_V_dest_V_1_sel_rd =  (sc_logic) (~sout_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        sout_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, sout_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, sout_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, sout_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, sout_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, sout_V_dest_V_1_state.read())))) {
            sout_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, sout_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, sout_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, sout_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, sout_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, sout_V_dest_V_1_state.read())))) {
            sout_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, sout_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, sout_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, sout_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, sout_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, sout_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, sout_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, sout_V_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, sout_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, sout_V_dest_V_1_ack_out.read()))))) {
            sout_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            sout_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        sout_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, sout_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, sout_V_id_V_1_vld_out.read()))) {
            sout_V_id_V_1_sel_rd =  (sc_logic) (~sout_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        sout_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, sout_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, sout_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, sout_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, sout_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, sout_V_id_V_1_state.read())))) {
            sout_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, sout_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, sout_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, sout_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, sout_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, sout_V_id_V_1_state.read())))) {
            sout_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, sout_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, sout_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, sout_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, sout_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, sout_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, sout_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, sout_V_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, sout_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, sout_V_id_V_1_ack_out.read()))))) {
            sout_V_id_V_1_state = ap_const_lv2_3;
        } else {
            sout_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        sout_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, sout_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, sout_V_keep_V_1_vld_out.read()))) {
            sout_V_keep_V_1_sel_rd =  (sc_logic) (~sout_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        sout_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, sout_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, sout_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, sout_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, sout_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, sout_V_keep_V_1_state.read())))) {
            sout_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, sout_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, sout_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, sout_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, sout_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, sout_V_keep_V_1_state.read())))) {
            sout_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, sout_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, sout_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, sout_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, sout_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, sout_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, sout_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, sout_V_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, sout_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, sout_V_keep_V_1_ack_out.read()))))) {
            sout_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            sout_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        sout_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, sout_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, sout_V_last_V_1_vld_out.read()))) {
            sout_V_last_V_1_sel_rd =  (sc_logic) (~sout_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        sout_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, sout_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, sout_V_last_V_1_ack_in.read()))) {
            sout_V_last_V_1_sel_wr =  (sc_logic) (~sout_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        sout_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, sout_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, sout_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, sout_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, sout_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, sout_V_last_V_1_state.read())))) {
            sout_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, sout_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, sout_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, sout_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, sout_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, sout_V_last_V_1_state.read())))) {
            sout_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, sout_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, sout_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, sout_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, sout_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, sout_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, sout_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, sout_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, sout_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, sout_V_last_V_1_ack_out.read()))))) {
            sout_V_last_V_1_state = ap_const_lv2_3;
        } else {
            sout_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        sout_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, sout_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, sout_V_strb_V_1_vld_out.read()))) {
            sout_V_strb_V_1_sel_rd =  (sc_logic) (~sout_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        sout_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, sout_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, sout_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, sout_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, sout_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, sout_V_strb_V_1_state.read())))) {
            sout_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, sout_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, sout_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, sout_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, sout_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, sout_V_strb_V_1_state.read())))) {
            sout_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, sout_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, sout_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, sout_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, sout_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, sout_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, sout_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, sout_V_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, sout_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, sout_V_strb_V_1_ack_out.read()))))) {
            sout_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            sout_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        sout_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, sout_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, sout_V_user_V_1_vld_out.read()))) {
            sout_V_user_V_1_sel_rd =  (sc_logic) (~sout_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        sout_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, sout_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, sout_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, sout_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, sout_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, sout_V_user_V_1_state.read())))) {
            sout_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, sout_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, sout_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, sout_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, sout_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, sout_V_user_V_1_state.read())))) {
            sout_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, sout_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, sout_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, sout_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, sout_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, sout_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, sout_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, sout_V_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, sout_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, sout_V_user_V_1_ack_out.read()))))) {
            sout_V_user_V_1_state = ap_const_lv2_3;
        } else {
            sout_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_11_reg_553 = i_11_fu_354_p2.read();
        i_cast_reg_545 = i_cast_fu_344_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        i_12_reg_600 = i_12_fu_452_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i_fu_418_p2.read()))) {
        i_13_reg_587 = i_13_fu_435_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, sout_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_dest_V_1_ack_in.read())))) {
        i_14_reg_623 = i_14_fu_478_p2.read();
        i_2_cast_reg_615 = i_2_cast_fu_468_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        i_3_reg_577 = i_3_fu_424_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        j_7_reg_636 = j_7_fu_506_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, sin_V_data_V_0_load_A.read())) {
        sin_V_data_V_0_payload_A = sin_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, sin_V_data_V_0_load_B.read())) {
        sin_V_data_V_0_payload_B = sin_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, sout_V_data_V_1_load_A.read())) {
        sout_V_data_V_1_payload_A = state_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, sout_V_data_V_1_load_B.read())) {
        sout_V_data_V_1_payload_B = state_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, sout_V_last_V_1_load_A.read())) {
        sout_V_last_V_1_payload_A = tmp_last_V_reg_646.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, sout_V_last_V_1_load_B.read())) {
        sout_V_last_V_1_payload_B = tmp_last_V_reg_646.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i2_fu_446_p2.read()))) {
        state_addr_5_reg_605 =  (sc_lv<4>) (tmp_i3_fu_458_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_418_p2.read()))) {
        state_addr_6_reg_582 =  (sc_lv<4>) (tmp_i_fu_430_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, sout_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_dest_V_1_ack_in.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_472_p2.read()))) {
        tmp_31_reg_628 = tmp_31_fu_488_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_399_p2.read()))) {
        tmp_41_cast_reg_569 = tmp_41_cast_fu_413_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_500_p2.read()))) {
        tmp_last_V_reg_646 = tmp_last_V_fu_539_p2.read();
    }
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void aes128_encrypt_block_hw::thread_ap_block_state22_on_subcall_done() {
    ap_block_state22_on_subcall_done = (esl_seteq<1,1,1>(ap_const_logic_0, grp_aes128_extract_round_fu_329_ap_done.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_aes128_shift_rows_hw_fu_324_ap_done.read()));
}

void aes128_encrypt_block_hw::thread_ap_block_state25() {
    ap_block_state25 = (esl_seteq<1,1,1>(ap_const_logic_0, sout_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_dest_V_1_ack_in.read()));
}

void aes128_encrypt_block_hw::thread_ap_block_state3() {
    ap_block_state3 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_360_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, sin_V_data_V_0_vld_out.read()));
}

void aes128_encrypt_block_hw::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void aes128_encrypt_block_hw::thread_exitcond1_fu_348_p2() {
    exitcond1_fu_348_p2 = (!i_reg_230.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_230.read() == ap_const_lv3_4);
}

void aes128_encrypt_block_hw::thread_exitcond2_fu_399_p2() {
    exitcond2_fu_399_p2 = (!i_1_reg_252.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_252.read() == ap_const_lv4_A);
}

void aes128_encrypt_block_hw::thread_exitcond3_fu_360_p2() {
    exitcond3_fu_360_p2 = (!j_reg_241.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_241.read() == ap_const_lv3_4);
}

void aes128_encrypt_block_hw::thread_exitcond4_fu_472_p2() {
    exitcond4_fu_472_p2 = (!i_2_reg_286.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_2_reg_286.read() == ap_const_lv3_4);
}

void aes128_encrypt_block_hw::thread_exitcond_fu_500_p2() {
    exitcond_fu_500_p2 = (!j_1_reg_297.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(j_1_reg_297.read() == ap_const_lv3_4);
}

void aes128_encrypt_block_hw::thread_exitcond_i2_fu_446_p2() {
    exitcond_i2_fu_446_p2 = (!i_i1_reg_275.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_i1_reg_275.read() == ap_const_lv5_10);
}

void aes128_encrypt_block_hw::thread_exitcond_i_fu_418_p2() {
    exitcond_i_fu_418_p2 = (!i_i_reg_264.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_i_reg_264.read() == ap_const_lv5_10);
}

void aes128_encrypt_block_hw::thread_expanded_key_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        expanded_key_address0 = grp_aes128_extract_round_fu_329_expanded_key_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        expanded_key_address0 = grp_aes128_expand_key_hw_fu_313_expanded_key_address0.read();
    } else {
        expanded_key_address0 = "XXXXXXXX";
    }
}

void aes128_encrypt_block_hw::thread_expanded_key_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        expanded_key_ce0 = grp_aes128_extract_round_fu_329_expanded_key_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        expanded_key_ce0 = grp_aes128_expand_key_hw_fu_313_expanded_key_ce0.read();
    } else {
        expanded_key_ce0 = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_expanded_key_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        expanded_key_we0 = grp_aes128_expand_key_hw_fu_313_expanded_key_we0.read();
    } else {
        expanded_key_we0 = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_grp_aes128_add_round_key_fu_338_ap_start() {
    grp_aes128_add_round_key_fu_338_ap_start = grp_aes128_add_round_key_fu_338_ap_start_reg.read();
}

void aes128_encrypt_block_hw::thread_grp_aes128_expand_key_hw_fu_313_ap_start() {
    grp_aes128_expand_key_hw_fu_313_ap_start = grp_aes128_expand_key_hw_fu_313_ap_start_reg.read();
}

void aes128_encrypt_block_hw::thread_grp_aes128_extract_round_fu_329_ap_start() {
    grp_aes128_extract_round_fu_329_ap_start = grp_aes128_extract_round_fu_329_ap_start_reg.read();
}

void aes128_encrypt_block_hw::thread_grp_aes128_extract_round_fu_329_expanded_key_offset() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        grp_aes128_extract_round_fu_329_expanded_key_offset = ap_const_lv10_A0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_aes128_extract_round_fu_329_expanded_key_offset = tmp_41_cast_reg_569.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_aes128_extract_round_fu_329_expanded_key_offset = ap_const_lv10_0;
    } else {
        grp_aes128_extract_round_fu_329_expanded_key_offset =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void aes128_encrypt_block_hw::thread_grp_aes128_mix_columns_h_fu_308_ap_start() {
    grp_aes128_mix_columns_h_fu_308_ap_start = grp_aes128_mix_columns_h_fu_308_ap_start_reg.read();
}

void aes128_encrypt_block_hw::thread_grp_aes128_shift_rows_hw_fu_324_ap_start() {
    grp_aes128_shift_rows_hw_fu_324_ap_start = grp_aes128_shift_rows_hw_fu_324_ap_start_reg.read();
}

void aes128_encrypt_block_hw::thread_i_11_fu_354_p2() {
    i_11_fu_354_p2 = (!i_reg_230.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_reg_230.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aes128_encrypt_block_hw::thread_i_12_fu_452_p2() {
    i_12_fu_452_p2 = (!i_i1_reg_275.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_i1_reg_275.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void aes128_encrypt_block_hw::thread_i_13_fu_435_p2() {
    i_13_fu_435_p2 = (!i_1_reg_252.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_1_reg_252.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void aes128_encrypt_block_hw::thread_i_14_fu_478_p2() {
    i_14_fu_478_p2 = (!i_2_reg_286.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_2_reg_286.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aes128_encrypt_block_hw::thread_i_2_cast_fu_468_p1() {
    i_2_cast_fu_468_p1 = esl_zext<4,3>(i_2_reg_286.read());
}

void aes128_encrypt_block_hw::thread_i_3_fu_424_p2() {
    i_3_fu_424_p2 = (!i_i_reg_264.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_i_reg_264.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void aes128_encrypt_block_hw::thread_i_cast_fu_344_p1() {
    i_cast_fu_344_p1 = esl_zext<4,3>(i_reg_230.read());
}

void aes128_encrypt_block_hw::thread_j_1_cast_fu_496_p1() {
    j_1_cast_fu_496_p1 = esl_zext<4,3>(j_1_reg_297.read());
}

void aes128_encrypt_block_hw::thread_j_6_fu_366_p2() {
    j_6_fu_366_p2 = (!j_reg_241.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_reg_241.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aes128_encrypt_block_hw::thread_j_7_fu_506_p2() {
    j_7_fu_506_p2 = (!j_1_reg_297.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_1_reg_297.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aes128_encrypt_block_hw::thread_round_key_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        round_key_address0 = grp_aes128_add_round_key_fu_338_round_key_address0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        round_key_address0 = grp_aes128_extract_round_fu_329_round_key_address0.read();
    } else {
        round_key_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void aes128_encrypt_block_hw::thread_round_key_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        round_key_ce0 = grp_aes128_add_round_key_fu_338_round_key_ce0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        round_key_ce0 = grp_aes128_extract_round_fu_329_round_key_ce0.read();
    } else {
        round_key_ce0 = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_round_key_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        round_key_we0 = grp_aes128_extract_round_fu_329_round_key_we0.read();
    } else {
        round_key_we0 = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_sbox_hw_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        sbox_hw_address0 =  (sc_lv<8>) (tmp_i6_fu_463_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        sbox_hw_address0 =  (sc_lv<8>) (tmp_i_20_fu_441_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sbox_hw_address0 = ap_const_lv8_0;
    } else {
        sbox_hw_address0 = "XXXXXXXX";
    }
}

void aes128_encrypt_block_hw::thread_sbox_hw_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        sbox_hw_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sbox_hw_ce0 = ap_const_logic_0;
    } else {
        sbox_hw_ce0 = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_sin_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_360_p2.read()))) {
        sin_TDATA_blk_n = sin_V_data_V_0_state.read()[0];
    } else {
        sin_TDATA_blk_n = ap_const_logic_1;
    }
}

void aes128_encrypt_block_hw::thread_sin_TREADY() {
    sin_TREADY = sin_V_dest_V_0_state.read()[1];
}

void aes128_encrypt_block_hw::thread_sin_V_data_V_0_ack_in() {
    sin_V_data_V_0_ack_in = sin_V_data_V_0_state.read()[1];
}

void aes128_encrypt_block_hw::thread_sin_V_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_360_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_360_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, sin_V_data_V_0_vld_out.read())))) {
        sin_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        sin_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_sin_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, sin_V_data_V_0_sel.read())) {
        sin_V_data_V_0_data_out = sin_V_data_V_0_payload_B.read();
    } else {
        sin_V_data_V_0_data_out = sin_V_data_V_0_payload_A.read();
    }
}

void aes128_encrypt_block_hw::thread_sin_V_data_V_0_load_A() {
    sin_V_data_V_0_load_A = (sin_V_data_V_0_state_cmp_full.read() & ~sin_V_data_V_0_sel_wr.read());
}

void aes128_encrypt_block_hw::thread_sin_V_data_V_0_load_B() {
    sin_V_data_V_0_load_B = (sin_V_data_V_0_sel_wr.read() & sin_V_data_V_0_state_cmp_full.read());
}

void aes128_encrypt_block_hw::thread_sin_V_data_V_0_sel() {
    sin_V_data_V_0_sel = sin_V_data_V_0_sel_rd.read();
}

void aes128_encrypt_block_hw::thread_sin_V_data_V_0_state_cmp_full() {
    sin_V_data_V_0_state_cmp_full =  (sc_logic) ((!sin_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(sin_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void aes128_encrypt_block_hw::thread_sin_V_data_V_0_vld_in() {
    sin_V_data_V_0_vld_in = sin_TVALID.read();
}

void aes128_encrypt_block_hw::thread_sin_V_data_V_0_vld_out() {
    sin_V_data_V_0_vld_out = sin_V_data_V_0_state.read()[0];
}

void aes128_encrypt_block_hw::thread_sin_V_dest_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_360_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_360_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, sin_V_data_V_0_vld_out.read())))) {
        sin_V_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        sin_V_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_sin_V_dest_V_0_vld_in() {
    sin_V_dest_V_0_vld_in = sin_TVALID.read();
}

void aes128_encrypt_block_hw::thread_sout_TDATA() {
    sout_TDATA = sout_V_data_V_1_data_out.read();
}

void aes128_encrypt_block_hw::thread_sout_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()))) {
        sout_TDATA_blk_n = sout_V_data_V_1_state.read()[1];
    } else {
        sout_TDATA_blk_n = ap_const_logic_1;
    }
}

void aes128_encrypt_block_hw::thread_sout_TDEST() {
    sout_TDEST = sout_V_dest_V_1_data_out.read();
}

void aes128_encrypt_block_hw::thread_sout_TID() {
    sout_TID = sout_V_id_V_1_data_out.read();
}

void aes128_encrypt_block_hw::thread_sout_TKEEP() {
    sout_TKEEP = sout_V_keep_V_1_data_out.read();
}

void aes128_encrypt_block_hw::thread_sout_TLAST() {
    sout_TLAST = sout_V_last_V_1_data_out.read();
}

void aes128_encrypt_block_hw::thread_sout_TSTRB() {
    sout_TSTRB = sout_V_strb_V_1_data_out.read();
}

void aes128_encrypt_block_hw::thread_sout_TUSER() {
    sout_TUSER = sout_V_user_V_1_data_out.read();
}

void aes128_encrypt_block_hw::thread_sout_TVALID() {
    sout_TVALID = sout_V_dest_V_1_state.read()[0];
}

void aes128_encrypt_block_hw::thread_sout_V_data_V_1_ack_in() {
    sout_V_data_V_1_ack_in = sout_V_data_V_1_state.read()[1];
}

void aes128_encrypt_block_hw::thread_sout_V_data_V_1_ack_out() {
    sout_V_data_V_1_ack_out = sout_TREADY.read();
}

void aes128_encrypt_block_hw::thread_sout_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, sout_V_data_V_1_sel.read())) {
        sout_V_data_V_1_data_out = sout_V_data_V_1_payload_B.read();
    } else {
        sout_V_data_V_1_data_out = sout_V_data_V_1_payload_A.read();
    }
}

void aes128_encrypt_block_hw::thread_sout_V_data_V_1_load_A() {
    sout_V_data_V_1_load_A = (sout_V_data_V_1_state_cmp_full.read() & ~sout_V_data_V_1_sel_wr.read());
}

void aes128_encrypt_block_hw::thread_sout_V_data_V_1_load_B() {
    sout_V_data_V_1_load_B = (sout_V_data_V_1_sel_wr.read() & sout_V_data_V_1_state_cmp_full.read());
}

void aes128_encrypt_block_hw::thread_sout_V_data_V_1_sel() {
    sout_V_data_V_1_sel = sout_V_data_V_1_sel_rd.read();
}

void aes128_encrypt_block_hw::thread_sout_V_data_V_1_state_cmp_full() {
    sout_V_data_V_1_state_cmp_full =  (sc_logic) ((!sout_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(sout_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void aes128_encrypt_block_hw::thread_sout_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
         esl_seteq<1,1,1>(sout_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
        sout_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        sout_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_sout_V_data_V_1_vld_out() {
    sout_V_data_V_1_vld_out = sout_V_data_V_1_state.read()[0];
}

void aes128_encrypt_block_hw::thread_sout_V_dest_V_1_ack_in() {
    sout_V_dest_V_1_ack_in = sout_V_dest_V_1_state.read()[1];
}

void aes128_encrypt_block_hw::thread_sout_V_dest_V_1_ack_out() {
    sout_V_dest_V_1_ack_out = sout_TREADY.read();
}

void aes128_encrypt_block_hw::thread_sout_V_dest_V_1_data_out() {
    sout_V_dest_V_1_data_out = ap_const_lv1_0;
}

void aes128_encrypt_block_hw::thread_sout_V_dest_V_1_sel() {
    sout_V_dest_V_1_sel = sout_V_dest_V_1_sel_rd.read();
}

void aes128_encrypt_block_hw::thread_sout_V_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
         esl_seteq<1,1,1>(sout_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
        sout_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        sout_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_sout_V_dest_V_1_vld_out() {
    sout_V_dest_V_1_vld_out = sout_V_dest_V_1_state.read()[0];
}

void aes128_encrypt_block_hw::thread_sout_V_id_V_1_ack_in() {
    sout_V_id_V_1_ack_in = sout_V_id_V_1_state.read()[1];
}

void aes128_encrypt_block_hw::thread_sout_V_id_V_1_ack_out() {
    sout_V_id_V_1_ack_out = sout_TREADY.read();
}

void aes128_encrypt_block_hw::thread_sout_V_id_V_1_data_out() {
    sout_V_id_V_1_data_out = ap_const_lv1_0;
}

void aes128_encrypt_block_hw::thread_sout_V_id_V_1_sel() {
    sout_V_id_V_1_sel = sout_V_id_V_1_sel_rd.read();
}

void aes128_encrypt_block_hw::thread_sout_V_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
         esl_seteq<1,1,1>(sout_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
        sout_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        sout_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_sout_V_id_V_1_vld_out() {
    sout_V_id_V_1_vld_out = sout_V_id_V_1_state.read()[0];
}

void aes128_encrypt_block_hw::thread_sout_V_keep_V_1_ack_in() {
    sout_V_keep_V_1_ack_in = sout_V_keep_V_1_state.read()[1];
}

void aes128_encrypt_block_hw::thread_sout_V_keep_V_1_ack_out() {
    sout_V_keep_V_1_ack_out = sout_TREADY.read();
}

void aes128_encrypt_block_hw::thread_sout_V_keep_V_1_data_out() {
    sout_V_keep_V_1_data_out = ap_const_lv1_1;
}

void aes128_encrypt_block_hw::thread_sout_V_keep_V_1_sel() {
    sout_V_keep_V_1_sel = sout_V_keep_V_1_sel_rd.read();
}

void aes128_encrypt_block_hw::thread_sout_V_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
         esl_seteq<1,1,1>(sout_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
        sout_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        sout_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_sout_V_keep_V_1_vld_out() {
    sout_V_keep_V_1_vld_out = sout_V_keep_V_1_state.read()[0];
}

void aes128_encrypt_block_hw::thread_sout_V_last_V_1_ack_in() {
    sout_V_last_V_1_ack_in = sout_V_last_V_1_state.read()[1];
}

void aes128_encrypt_block_hw::thread_sout_V_last_V_1_ack_out() {
    sout_V_last_V_1_ack_out = sout_TREADY.read();
}

void aes128_encrypt_block_hw::thread_sout_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, sout_V_last_V_1_sel.read())) {
        sout_V_last_V_1_data_out = sout_V_last_V_1_payload_B.read();
    } else {
        sout_V_last_V_1_data_out = sout_V_last_V_1_payload_A.read();
    }
}

void aes128_encrypt_block_hw::thread_sout_V_last_V_1_load_A() {
    sout_V_last_V_1_load_A = (sout_V_last_V_1_state_cmp_full.read() & ~sout_V_last_V_1_sel_wr.read());
}

void aes128_encrypt_block_hw::thread_sout_V_last_V_1_load_B() {
    sout_V_last_V_1_load_B = (sout_V_last_V_1_sel_wr.read() & sout_V_last_V_1_state_cmp_full.read());
}

void aes128_encrypt_block_hw::thread_sout_V_last_V_1_sel() {
    sout_V_last_V_1_sel = sout_V_last_V_1_sel_rd.read();
}

void aes128_encrypt_block_hw::thread_sout_V_last_V_1_state_cmp_full() {
    sout_V_last_V_1_state_cmp_full =  (sc_logic) ((!sout_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(sout_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void aes128_encrypt_block_hw::thread_sout_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
         esl_seteq<1,1,1>(sout_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
        sout_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        sout_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_sout_V_last_V_1_vld_out() {
    sout_V_last_V_1_vld_out = sout_V_last_V_1_state.read()[0];
}

void aes128_encrypt_block_hw::thread_sout_V_strb_V_1_ack_in() {
    sout_V_strb_V_1_ack_in = sout_V_strb_V_1_state.read()[1];
}

void aes128_encrypt_block_hw::thread_sout_V_strb_V_1_ack_out() {
    sout_V_strb_V_1_ack_out = sout_TREADY.read();
}

void aes128_encrypt_block_hw::thread_sout_V_strb_V_1_data_out() {
    sout_V_strb_V_1_data_out = ap_const_lv1_0;
}

void aes128_encrypt_block_hw::thread_sout_V_strb_V_1_sel() {
    sout_V_strb_V_1_sel = sout_V_strb_V_1_sel_rd.read();
}

void aes128_encrypt_block_hw::thread_sout_V_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
         esl_seteq<1,1,1>(sout_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
        sout_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        sout_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_sout_V_strb_V_1_vld_out() {
    sout_V_strb_V_1_vld_out = sout_V_strb_V_1_state.read()[0];
}

void aes128_encrypt_block_hw::thread_sout_V_user_V_1_ack_in() {
    sout_V_user_V_1_ack_in = sout_V_user_V_1_state.read()[1];
}

void aes128_encrypt_block_hw::thread_sout_V_user_V_1_ack_out() {
    sout_V_user_V_1_ack_out = sout_TREADY.read();
}

void aes128_encrypt_block_hw::thread_sout_V_user_V_1_data_out() {
    sout_V_user_V_1_data_out = ap_const_lv1_0;
}

void aes128_encrypt_block_hw::thread_sout_V_user_V_1_sel() {
    sout_V_user_V_1_sel = sout_V_user_V_1_sel_rd.read();
}

void aes128_encrypt_block_hw::thread_sout_V_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
         esl_seteq<1,1,1>(sout_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
        sout_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        sout_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_sout_V_user_V_1_vld_out() {
    sout_V_user_V_1_vld_out = sout_V_user_V_1_state.read()[0];
}

void aes128_encrypt_block_hw::thread_state_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        state_address0 =  (sc_lv<4>) (tmp_34_fu_529_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        state_address0 = state_addr_5_reg_605.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i2_fu_446_p2.read()))) {
        state_address0 =  (sc_lv<4>) (tmp_i3_fu_458_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        state_address0 = state_addr_6_reg_582.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_418_p2.read()))) {
        state_address0 =  (sc_lv<4>) (tmp_i_fu_430_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_address0 =  (sc_lv<4>) (tmp_30_fu_394_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        state_address0 = grp_aes128_add_round_key_fu_338_state_address0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        state_address0 = grp_aes128_shift_rows_hw_fu_324_state_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        state_address0 = grp_aes128_mix_columns_h_fu_308_state_address0.read();
    } else {
        state_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void aes128_encrypt_block_hw::thread_state_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_360_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, sin_V_data_V_0_vld_out.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_418_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i2_fu_446_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        state_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        state_ce0 = grp_aes128_add_round_key_fu_338_state_ce0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        state_ce0 = grp_aes128_shift_rows_hw_fu_324_state_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        state_ce0 = grp_aes128_mix_columns_h_fu_308_state_ce0.read();
    } else {
        state_ce0 = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_state_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        state_d0 = sbox_hw_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_d0 = sin_V_data_V_0_data_out.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        state_d0 = grp_aes128_add_round_key_fu_338_state_d0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        state_d0 = grp_aes128_shift_rows_hw_fu_324_state_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        state_d0 = grp_aes128_mix_columns_h_fu_308_state_d0.read();
    } else {
        state_d0 = "XXXXXXXX";
    }
}

void aes128_encrypt_block_hw::thread_state_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_360_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_360_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, sin_V_data_V_0_vld_out.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        state_we0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        state_we0 = grp_aes128_add_round_key_fu_338_state_we0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        state_we0 = grp_aes128_shift_rows_hw_fu_324_state_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        state_we0 = grp_aes128_mix_columns_h_fu_308_state_we0.read();
    } else {
        state_we0 = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_tmp_28_fu_381_p3() {
    tmp_28_fu_381_p3 = esl_concat<2,2>(tmp_fu_377_p1.read(), ap_const_lv2_0);
}

void aes128_encrypt_block_hw::thread_tmp_29_fu_389_p2() {
    tmp_29_fu_389_p2 = (!tmp_28_fu_381_p3.read().is_01() || !i_cast_reg_545.read().is_01())? sc_lv<4>(): (sc_biguint<4>(tmp_28_fu_381_p3.read()) + sc_biguint<4>(i_cast_reg_545.read()));
}

void aes128_encrypt_block_hw::thread_tmp_30_fu_394_p1() {
    tmp_30_fu_394_p1 = esl_zext<64,4>(tmp_29_fu_389_p2.read());
}

void aes128_encrypt_block_hw::thread_tmp_31_fu_488_p3() {
    tmp_31_fu_488_p3 = esl_concat<2,2>(tmp_36_fu_484_p1.read(), ap_const_lv2_0);
}

void aes128_encrypt_block_hw::thread_tmp_32_fu_516_p3() {
    tmp_32_fu_516_p3 = esl_concat<2,2>(tmp_37_fu_512_p1.read(), ap_const_lv2_0);
}

void aes128_encrypt_block_hw::thread_tmp_33_fu_524_p2() {
    tmp_33_fu_524_p2 = (!i_2_cast_reg_615.read().is_01() || !tmp_32_fu_516_p3.read().is_01())? sc_lv<4>(): (sc_biguint<4>(i_2_cast_reg_615.read()) + sc_biguint<4>(tmp_32_fu_516_p3.read()));
}

void aes128_encrypt_block_hw::thread_tmp_34_fu_529_p1() {
    tmp_34_fu_529_p1 = esl_zext<64,4>(tmp_33_fu_524_p2.read());
}

void aes128_encrypt_block_hw::thread_tmp_35_fu_534_p2() {
    tmp_35_fu_534_p2 = (!tmp_31_reg_628.read().is_01() || !j_1_cast_fu_496_p1.read().is_01())? sc_lv<4>(): (sc_biguint<4>(tmp_31_reg_628.read()) + sc_biguint<4>(j_1_cast_fu_496_p1.read()));
}

void aes128_encrypt_block_hw::thread_tmp_36_fu_484_p1() {
    tmp_36_fu_484_p1 = i_2_reg_286.read().range(2-1, 0);
}

void aes128_encrypt_block_hw::thread_tmp_37_fu_512_p1() {
    tmp_37_fu_512_p1 = j_1_reg_297.read().range(2-1, 0);
}

void aes128_encrypt_block_hw::thread_tmp_41_cast_fu_413_p1() {
    tmp_41_cast_fu_413_p1 = esl_zext<10,8>(tmp_s_fu_405_p3.read());
}

void aes128_encrypt_block_hw::thread_tmp_fu_377_p1() {
    tmp_fu_377_p1 = j_reg_241.read().range(2-1, 0);
}

void aes128_encrypt_block_hw::thread_tmp_i3_fu_458_p1() {
    tmp_i3_fu_458_p1 = esl_zext<64,5>(i_i1_reg_275.read());
}

void aes128_encrypt_block_hw::thread_tmp_i6_fu_463_p1() {
    tmp_i6_fu_463_p1 = esl_zext<64,8>(state_q0.read());
}

void aes128_encrypt_block_hw::thread_tmp_i_20_fu_441_p1() {
    tmp_i_20_fu_441_p1 = esl_zext<64,8>(state_q0.read());
}

void aes128_encrypt_block_hw::thread_tmp_i_fu_430_p1() {
    tmp_i_fu_430_p1 = esl_zext<64,5>(i_i_reg_264.read());
}

void aes128_encrypt_block_hw::thread_tmp_last_V_fu_539_p2() {
    tmp_last_V_fu_539_p2 = (!tmp_35_fu_534_p2.read().is_01() || !ap_const_lv4_F.is_01())? sc_lv<1>(): sc_lv<1>(tmp_35_fu_534_p2.read() == ap_const_lv4_F);
}

void aes128_encrypt_block_hw::thread_tmp_s_fu_405_p3() {
    tmp_s_fu_405_p3 = esl_concat<4,4>(i_1_reg_252.read(), ap_const_lv4_0);
}

void aes128_encrypt_block_hw::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_348_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_360_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, sin_V_data_V_0_vld_out.read())) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond3_fu_360_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_360_p2.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_360_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, sin_V_data_V_0_vld_out.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_aes128_expand_key_hw_fu_313_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(grp_aes128_extract_round_fu_329_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(grp_aes128_add_round_key_fu_338_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_399_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state19;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(grp_aes128_extract_round_fu_329_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i_fu_418_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(grp_aes128_shift_rows_hw_fu_324_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(grp_aes128_mix_columns_h_fu_308_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            if ((esl_seteq<1,1,1>(grp_aes128_add_round_key_fu_338_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state18;
            }
            break;
        case 262144 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i2_fu_446_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state22;
            } else {
                ap_NS_fsm = ap_ST_fsm_state20;
            }
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 2097152 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && esl_seteq<1,1,1>(ap_block_state22_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state23;
            } else {
                ap_NS_fsm = ap_ST_fsm_state22;
            }
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            if ((esl_seteq<1,1,1>(grp_aes128_add_round_key_fu_338_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
                ap_NS_fsm = ap_ST_fsm_state25;
            } else {
                ap_NS_fsm = ap_ST_fsm_state24;
            }
            break;
        case 16777216 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, sout_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_dest_V_1_ack_in.read())) && esl_seteq<1,1,1>(ap_const_logic_0, sout_V_data_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, sout_V_keep_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, sout_V_strb_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, sout_V_user_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, sout_V_last_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, sout_V_id_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, sout_V_dest_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond4_fu_472_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, sout_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sout_V_dest_V_1_ack_in.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_472_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state26;
            } else {
                ap_NS_fsm = ap_ST_fsm_state25;
            }
            break;
        case 33554432 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_500_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state25;
            } else {
                ap_NS_fsm = ap_ST_fsm_state27;
            }
            break;
        case 67108864 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && esl_seteq<1,1,1>(sout_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state28;
            } else {
                ap_NS_fsm = ap_ST_fsm_state27;
            }
            break;
        case 134217728 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && esl_seteq<1,1,1>(sout_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state26;
            } else {
                ap_NS_fsm = ap_ST_fsm_state28;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<28>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void aes128_encrypt_block_hw::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sin_TDATA\" :  \"" << sin_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sin_TVALID\" :  \"" << sin_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"sin_TREADY\" :  \"" << sin_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sin_TKEEP\" :  \"" << sin_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sin_TSTRB\" :  \"" << sin_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sin_TUSER\" :  \"" << sin_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sin_TLAST\" :  \"" << sin_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sin_TID\" :  \"" << sin_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sin_TDEST\" :  \"" << sin_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sout_TDATA\" :  \"" << sout_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sout_TVALID\" :  \"" << sout_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sout_TREADY\" :  \"" << sout_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sout_TKEEP\" :  \"" << sout_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sout_TSTRB\" :  \"" << sout_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sout_TUSER\" :  \"" << sout_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sout_TLAST\" :  \"" << sout_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sout_TID\" :  \"" << sout_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sout_TDEST\" :  \"" << sout_TDEST.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

