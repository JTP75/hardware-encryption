// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="aes128_encrypt_block_hw,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.498000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1294,HLS_SYN_LUT=3903,HLS_VERSION=2018_3}" *)

module aes128_encrypt_block_hw (
        ap_clk,
        ap_rst_n,
        sin_TDATA,
        sin_TVALID,
        sin_TREADY,
        sin_TKEEP,
        sin_TSTRB,
        sin_TUSER,
        sin_TLAST,
        sin_TID,
        sin_TDEST,
        sout_TDATA,
        sout_TVALID,
        sout_TREADY,
        sout_TKEEP,
        sout_TSTRB,
        sout_TUSER,
        sout_TLAST,
        sout_TID,
        sout_TDEST
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_state9 = 28'd256;
parameter    ap_ST_fsm_state10 = 28'd512;
parameter    ap_ST_fsm_state11 = 28'd1024;
parameter    ap_ST_fsm_state12 = 28'd2048;
parameter    ap_ST_fsm_state13 = 28'd4096;
parameter    ap_ST_fsm_state14 = 28'd8192;
parameter    ap_ST_fsm_state15 = 28'd16384;
parameter    ap_ST_fsm_state16 = 28'd32768;
parameter    ap_ST_fsm_state17 = 28'd65536;
parameter    ap_ST_fsm_state18 = 28'd131072;
parameter    ap_ST_fsm_state19 = 28'd262144;
parameter    ap_ST_fsm_state20 = 28'd524288;
parameter    ap_ST_fsm_state21 = 28'd1048576;
parameter    ap_ST_fsm_state22 = 28'd2097152;
parameter    ap_ST_fsm_state23 = 28'd4194304;
parameter    ap_ST_fsm_state24 = 28'd8388608;
parameter    ap_ST_fsm_state25 = 28'd16777216;
parameter    ap_ST_fsm_state26 = 28'd33554432;
parameter    ap_ST_fsm_state27 = 28'd67108864;
parameter    ap_ST_fsm_state28 = 28'd134217728;

input   ap_clk;
input   ap_rst_n;
input  [7:0] sin_TDATA;
input   sin_TVALID;
output   sin_TREADY;
input  [0:0] sin_TKEEP;
input  [0:0] sin_TSTRB;
input  [0:0] sin_TUSER;
input  [0:0] sin_TLAST;
input  [0:0] sin_TID;
input  [0:0] sin_TDEST;
output  [7:0] sout_TDATA;
output   sout_TVALID;
input   sout_TREADY;
output  [0:0] sout_TKEEP;
output  [0:0] sout_TSTRB;
output  [0:0] sout_TUSER;
output  [0:0] sout_TLAST;
output  [0:0] sout_TID;
output  [0:0] sout_TDEST;

 reg    ap_rst_n_inv;
reg   [7:0] sin_V_data_V_0_data_out;
wire    sin_V_data_V_0_vld_in;
wire    sin_V_data_V_0_vld_out;
wire    sin_V_data_V_0_ack_in;
reg    sin_V_data_V_0_ack_out;
reg   [7:0] sin_V_data_V_0_payload_A;
reg   [7:0] sin_V_data_V_0_payload_B;
reg    sin_V_data_V_0_sel_rd;
reg    sin_V_data_V_0_sel_wr;
wire    sin_V_data_V_0_sel;
wire    sin_V_data_V_0_load_A;
wire    sin_V_data_V_0_load_B;
reg   [1:0] sin_V_data_V_0_state;
wire    sin_V_data_V_0_state_cmp_full;
wire    sin_V_dest_V_0_vld_in;
reg    sin_V_dest_V_0_ack_out;
reg   [1:0] sin_V_dest_V_0_state;
reg   [7:0] sout_V_data_V_1_data_out;
reg    sout_V_data_V_1_vld_in;
wire    sout_V_data_V_1_vld_out;
wire    sout_V_data_V_1_ack_in;
wire    sout_V_data_V_1_ack_out;
reg   [7:0] sout_V_data_V_1_payload_A;
reg   [7:0] sout_V_data_V_1_payload_B;
reg    sout_V_data_V_1_sel_rd;
reg    sout_V_data_V_1_sel_wr;
wire    sout_V_data_V_1_sel;
wire    sout_V_data_V_1_load_A;
wire    sout_V_data_V_1_load_B;
reg   [1:0] sout_V_data_V_1_state;
wire    sout_V_data_V_1_state_cmp_full;
wire   [0:0] sout_V_keep_V_1_data_out;
reg    sout_V_keep_V_1_vld_in;
wire    sout_V_keep_V_1_vld_out;
wire    sout_V_keep_V_1_ack_in;
wire    sout_V_keep_V_1_ack_out;
reg    sout_V_keep_V_1_sel_rd;
wire    sout_V_keep_V_1_sel;
reg   [1:0] sout_V_keep_V_1_state;
wire   [0:0] sout_V_strb_V_1_data_out;
reg    sout_V_strb_V_1_vld_in;
wire    sout_V_strb_V_1_vld_out;
wire    sout_V_strb_V_1_ack_in;
wire    sout_V_strb_V_1_ack_out;
reg    sout_V_strb_V_1_sel_rd;
wire    sout_V_strb_V_1_sel;
reg   [1:0] sout_V_strb_V_1_state;
wire   [0:0] sout_V_user_V_1_data_out;
reg    sout_V_user_V_1_vld_in;
wire    sout_V_user_V_1_vld_out;
wire    sout_V_user_V_1_ack_in;
wire    sout_V_user_V_1_ack_out;
reg    sout_V_user_V_1_sel_rd;
wire    sout_V_user_V_1_sel;
reg   [1:0] sout_V_user_V_1_state;
reg   [0:0] sout_V_last_V_1_data_out;
reg    sout_V_last_V_1_vld_in;
wire    sout_V_last_V_1_vld_out;
wire    sout_V_last_V_1_ack_in;
wire    sout_V_last_V_1_ack_out;
reg   [0:0] sout_V_last_V_1_payload_A;
reg   [0:0] sout_V_last_V_1_payload_B;
reg    sout_V_last_V_1_sel_rd;
reg    sout_V_last_V_1_sel_wr;
wire    sout_V_last_V_1_sel;
wire    sout_V_last_V_1_load_A;
wire    sout_V_last_V_1_load_B;
reg   [1:0] sout_V_last_V_1_state;
wire    sout_V_last_V_1_state_cmp_full;
wire   [0:0] sout_V_id_V_1_data_out;
reg    sout_V_id_V_1_vld_in;
wire    sout_V_id_V_1_vld_out;
wire    sout_V_id_V_1_ack_in;
wire    sout_V_id_V_1_ack_out;
reg    sout_V_id_V_1_sel_rd;
wire    sout_V_id_V_1_sel;
reg   [1:0] sout_V_id_V_1_state;
wire   [0:0] sout_V_dest_V_1_data_out;
reg    sout_V_dest_V_1_vld_in;
wire    sout_V_dest_V_1_vld_out;
wire    sout_V_dest_V_1_ack_in;
wire    sout_V_dest_V_1_ack_out;
reg    sout_V_dest_V_1_sel_rd;
wire    sout_V_dest_V_1_sel;
reg   [1:0] sout_V_dest_V_1_state;
reg   [7:0] sbox_hw_address0;
reg    sbox_hw_ce0;
wire   [7:0] sbox_hw_q0;
reg    sin_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond3_fu_360_p2;
reg    sout_TDATA_blk_n;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire   [3:0] i_cast_fu_344_p1;
reg   [3:0] i_cast_reg_545;
wire    ap_CS_fsm_state2;
wire   [2:0] i_11_fu_354_p2;
reg   [2:0] i_11_reg_553;
wire   [2:0] j_6_fu_366_p2;
reg    ap_block_state3;
wire   [9:0] tmp_41_cast_fu_413_p1;
reg   [9:0] tmp_41_cast_reg_569;
wire    ap_CS_fsm_state9;
wire   [0:0] exitcond2_fu_399_p2;
wire   [4:0] i_3_fu_424_p2;
reg   [4:0] i_3_reg_577;
wire    ap_CS_fsm_state11;
reg   [3:0] state_addr_6_reg_582;
wire   [0:0] exitcond_i_fu_418_p2;
wire   [3:0] i_13_fu_435_p2;
reg   [3:0] i_13_reg_587;
wire    ap_CS_fsm_state12;
wire   [4:0] i_12_fu_452_p2;
reg   [4:0] i_12_reg_600;
wire    ap_CS_fsm_state19;
reg   [3:0] state_addr_5_reg_605;
wire   [0:0] exitcond_i2_fu_446_p2;
wire    ap_CS_fsm_state20;
wire   [3:0] i_2_cast_fu_468_p1;
reg   [3:0] i_2_cast_reg_615;
wire    ap_CS_fsm_state25;
reg    ap_block_state25;
wire   [2:0] i_14_fu_478_p2;
reg   [2:0] i_14_reg_623;
wire   [3:0] tmp_31_fu_488_p3;
reg   [3:0] tmp_31_reg_628;
wire   [0:0] exitcond4_fu_472_p2;
wire   [2:0] j_7_fu_506_p2;
reg   [2:0] j_7_reg_636;
wire    ap_CS_fsm_state26;
wire   [0:0] exitcond_fu_500_p2;
wire   [0:0] tmp_last_V_fu_539_p2;
reg   [0:0] tmp_last_V_reg_646;
wire   [7:0] state_q0;
reg   [3:0] state_address0;
reg    state_ce0;
reg    state_we0;
reg   [7:0] state_d0;
reg   [3:0] round_key_address0;
reg    round_key_ce0;
reg    round_key_we0;
wire   [7:0] round_key_q0;
reg   [7:0] expanded_key_address0;
reg    expanded_key_ce0;
reg    expanded_key_we0;
wire   [7:0] expanded_key_q0;
wire    grp_aes128_mix_columns_h_fu_308_ap_start;
wire    grp_aes128_mix_columns_h_fu_308_ap_done;
wire    grp_aes128_mix_columns_h_fu_308_ap_idle;
wire    grp_aes128_mix_columns_h_fu_308_ap_ready;
wire   [3:0] grp_aes128_mix_columns_h_fu_308_state_address0;
wire    grp_aes128_mix_columns_h_fu_308_state_ce0;
wire    grp_aes128_mix_columns_h_fu_308_state_we0;
wire   [7:0] grp_aes128_mix_columns_h_fu_308_state_d0;
wire    grp_aes128_expand_key_hw_fu_313_ap_start;
wire    grp_aes128_expand_key_hw_fu_313_ap_done;
wire    grp_aes128_expand_key_hw_fu_313_ap_idle;
wire    grp_aes128_expand_key_hw_fu_313_ap_ready;
wire   [7:0] grp_aes128_expand_key_hw_fu_313_expanded_key_address0;
wire    grp_aes128_expand_key_hw_fu_313_expanded_key_ce0;
wire    grp_aes128_expand_key_hw_fu_313_expanded_key_we0;
wire   [7:0] grp_aes128_expand_key_hw_fu_313_expanded_key_d0;
wire    grp_aes128_shift_rows_hw_fu_324_ap_start;
wire    grp_aes128_shift_rows_hw_fu_324_ap_done;
wire    grp_aes128_shift_rows_hw_fu_324_ap_idle;
wire    grp_aes128_shift_rows_hw_fu_324_ap_ready;
wire   [3:0] grp_aes128_shift_rows_hw_fu_324_state_address0;
wire    grp_aes128_shift_rows_hw_fu_324_state_ce0;
wire    grp_aes128_shift_rows_hw_fu_324_state_we0;
wire   [7:0] grp_aes128_shift_rows_hw_fu_324_state_d0;
wire    grp_aes128_extract_round_fu_329_ap_start;
wire    grp_aes128_extract_round_fu_329_ap_done;
wire    grp_aes128_extract_round_fu_329_ap_idle;
wire    grp_aes128_extract_round_fu_329_ap_ready;
wire   [7:0] grp_aes128_extract_round_fu_329_expanded_key_address0;
wire    grp_aes128_extract_round_fu_329_expanded_key_ce0;
reg   [9:0] grp_aes128_extract_round_fu_329_expanded_key_offset;
wire   [3:0] grp_aes128_extract_round_fu_329_round_key_address0;
wire    grp_aes128_extract_round_fu_329_round_key_ce0;
wire    grp_aes128_extract_round_fu_329_round_key_we0;
wire   [7:0] grp_aes128_extract_round_fu_329_round_key_d0;
wire    grp_aes128_add_round_key_fu_338_ap_start;
wire    grp_aes128_add_round_key_fu_338_ap_done;
wire    grp_aes128_add_round_key_fu_338_ap_idle;
wire    grp_aes128_add_round_key_fu_338_ap_ready;
wire   [3:0] grp_aes128_add_round_key_fu_338_state_address0;
wire    grp_aes128_add_round_key_fu_338_state_ce0;
wire    grp_aes128_add_round_key_fu_338_state_we0;
wire   [7:0] grp_aes128_add_round_key_fu_338_state_d0;
wire   [3:0] grp_aes128_add_round_key_fu_338_round_key_address0;
wire    grp_aes128_add_round_key_fu_338_round_key_ce0;
reg   [2:0] i_reg_230;
wire    ap_CS_fsm_state1;
reg   [2:0] j_reg_241;
wire   [0:0] exitcond1_fu_348_p2;
reg   [3:0] i_1_reg_252;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state18;
reg   [4:0] i_i_reg_264;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state13;
reg   [4:0] i_i1_reg_275;
wire    ap_CS_fsm_state21;
reg   [2:0] i_2_reg_286;
wire    ap_CS_fsm_state24;
reg   [2:0] j_1_reg_297;
reg    grp_aes128_mix_columns_h_fu_308_ap_start_reg;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
reg    grp_aes128_expand_key_hw_fu_313_ap_start_reg;
wire    ap_CS_fsm_state4;
reg    grp_aes128_shift_rows_hw_fu_324_ap_start_reg;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state22;
reg    grp_aes128_extract_round_fu_329_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    grp_aes128_add_round_key_fu_338_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state23;
wire   [63:0] tmp_30_fu_394_p1;
wire   [63:0] tmp_i_fu_430_p1;
wire   [63:0] tmp_i_20_fu_441_p1;
wire   [63:0] tmp_i3_fu_458_p1;
wire   [63:0] tmp_i6_fu_463_p1;
wire   [63:0] tmp_34_fu_529_p1;
wire   [1:0] tmp_fu_377_p1;
wire   [3:0] tmp_28_fu_381_p3;
wire   [3:0] tmp_29_fu_389_p2;
wire   [7:0] tmp_s_fu_405_p3;
wire   [1:0] tmp_36_fu_484_p1;
wire   [1:0] tmp_37_fu_512_p1;
wire   [3:0] tmp_32_fu_516_p3;
wire   [3:0] tmp_33_fu_524_p2;
wire   [3:0] j_1_cast_fu_496_p1;
wire   [3:0] tmp_35_fu_534_p2;
reg   [27:0] ap_NS_fsm;
reg    ap_block_state22_on_subcall_done;

// power-on initialization
initial begin
#0 sin_V_data_V_0_sel_rd = 1'b0;
#0 sin_V_data_V_0_sel_wr = 1'b0;
#0 sin_V_data_V_0_state = 2'd0;
#0 sin_V_dest_V_0_state = 2'd0;
#0 sout_V_data_V_1_sel_rd = 1'b0;
#0 sout_V_data_V_1_sel_wr = 1'b0;
#0 sout_V_data_V_1_state = 2'd0;
#0 sout_V_keep_V_1_sel_rd = 1'b0;
#0 sout_V_keep_V_1_state = 2'd0;
#0 sout_V_strb_V_1_sel_rd = 1'b0;
#0 sout_V_strb_V_1_state = 2'd0;
#0 sout_V_user_V_1_sel_rd = 1'b0;
#0 sout_V_user_V_1_state = 2'd0;
#0 sout_V_last_V_1_sel_rd = 1'b0;
#0 sout_V_last_V_1_sel_wr = 1'b0;
#0 sout_V_last_V_1_state = 2'd0;
#0 sout_V_id_V_1_sel_rd = 1'b0;
#0 sout_V_id_V_1_state = 2'd0;
#0 sout_V_dest_V_1_sel_rd = 1'b0;
#0 sout_V_dest_V_1_state = 2'd0;
#0 ap_CS_fsm = 28'd1;
#0 grp_aes128_mix_columns_h_fu_308_ap_start_reg = 1'b0;
#0 grp_aes128_expand_key_hw_fu_313_ap_start_reg = 1'b0;
#0 grp_aes128_shift_rows_hw_fu_324_ap_start_reg = 1'b0;
#0 grp_aes128_extract_round_fu_329_ap_start_reg = 1'b0;
#0 grp_aes128_add_round_key_fu_338_ap_start_reg = 1'b0;
end

aes128_expand_keycud #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_hw_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sbox_hw_address0),
    .ce0(sbox_hw_ce0),
    .q0(sbox_hw_q0)
);

aes128_encrypt_blhbi #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
state_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(state_address0),
    .ce0(state_ce0),
    .we0(state_we0),
    .d0(state_d0),
    .q0(state_q0)
);

aes128_encrypt_blhbi #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
round_key_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(round_key_address0),
    .ce0(round_key_ce0),
    .we0(round_key_we0),
    .d0(grp_aes128_extract_round_fu_329_round_key_d0),
    .q0(round_key_q0)
);

aes128_encrypt_bljbC #(
    .DataWidth( 8 ),
    .AddressRange( 176 ),
    .AddressWidth( 8 ))
expanded_key_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(expanded_key_address0),
    .ce0(expanded_key_ce0),
    .we0(expanded_key_we0),
    .d0(grp_aes128_expand_key_hw_fu_313_expanded_key_d0),
    .q0(expanded_key_q0)
);

aes128_mix_columns_h grp_aes128_mix_columns_h_fu_308(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes128_mix_columns_h_fu_308_ap_start),
    .ap_done(grp_aes128_mix_columns_h_fu_308_ap_done),
    .ap_idle(grp_aes128_mix_columns_h_fu_308_ap_idle),
    .ap_ready(grp_aes128_mix_columns_h_fu_308_ap_ready),
    .state_address0(grp_aes128_mix_columns_h_fu_308_state_address0),
    .state_ce0(grp_aes128_mix_columns_h_fu_308_state_ce0),
    .state_we0(grp_aes128_mix_columns_h_fu_308_state_we0),
    .state_d0(grp_aes128_mix_columns_h_fu_308_state_d0),
    .state_q0(state_q0)
);

aes128_expand_key_hw grp_aes128_expand_key_hw_fu_313(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes128_expand_key_hw_fu_313_ap_start),
    .ap_done(grp_aes128_expand_key_hw_fu_313_ap_done),
    .ap_idle(grp_aes128_expand_key_hw_fu_313_ap_idle),
    .ap_ready(grp_aes128_expand_key_hw_fu_313_ap_ready),
    .expanded_key_address0(grp_aes128_expand_key_hw_fu_313_expanded_key_address0),
    .expanded_key_ce0(grp_aes128_expand_key_hw_fu_313_expanded_key_ce0),
    .expanded_key_we0(grp_aes128_expand_key_hw_fu_313_expanded_key_we0),
    .expanded_key_d0(grp_aes128_expand_key_hw_fu_313_expanded_key_d0),
    .expanded_key_q0(expanded_key_q0)
);

aes128_shift_rows_hw grp_aes128_shift_rows_hw_fu_324(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes128_shift_rows_hw_fu_324_ap_start),
    .ap_done(grp_aes128_shift_rows_hw_fu_324_ap_done),
    .ap_idle(grp_aes128_shift_rows_hw_fu_324_ap_idle),
    .ap_ready(grp_aes128_shift_rows_hw_fu_324_ap_ready),
    .state_address0(grp_aes128_shift_rows_hw_fu_324_state_address0),
    .state_ce0(grp_aes128_shift_rows_hw_fu_324_state_ce0),
    .state_we0(grp_aes128_shift_rows_hw_fu_324_state_we0),
    .state_d0(grp_aes128_shift_rows_hw_fu_324_state_d0),
    .state_q0(state_q0)
);

aes128_extract_round grp_aes128_extract_round_fu_329(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes128_extract_round_fu_329_ap_start),
    .ap_done(grp_aes128_extract_round_fu_329_ap_done),
    .ap_idle(grp_aes128_extract_round_fu_329_ap_idle),
    .ap_ready(grp_aes128_extract_round_fu_329_ap_ready),
    .expanded_key_address0(grp_aes128_extract_round_fu_329_expanded_key_address0),
    .expanded_key_ce0(grp_aes128_extract_round_fu_329_expanded_key_ce0),
    .expanded_key_q0(expanded_key_q0),
    .expanded_key_offset(grp_aes128_extract_round_fu_329_expanded_key_offset),
    .round_key_address0(grp_aes128_extract_round_fu_329_round_key_address0),
    .round_key_ce0(grp_aes128_extract_round_fu_329_round_key_ce0),
    .round_key_we0(grp_aes128_extract_round_fu_329_round_key_we0),
    .round_key_d0(grp_aes128_extract_round_fu_329_round_key_d0)
);

aes128_add_round_key grp_aes128_add_round_key_fu_338(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes128_add_round_key_fu_338_ap_start),
    .ap_done(grp_aes128_add_round_key_fu_338_ap_done),
    .ap_idle(grp_aes128_add_round_key_fu_338_ap_idle),
    .ap_ready(grp_aes128_add_round_key_fu_338_ap_ready),
    .state_address0(grp_aes128_add_round_key_fu_338_state_address0),
    .state_ce0(grp_aes128_add_round_key_fu_338_state_ce0),
    .state_we0(grp_aes128_add_round_key_fu_338_state_we0),
    .state_d0(grp_aes128_add_round_key_fu_338_state_d0),
    .state_q0(state_q0),
    .round_key_address0(grp_aes128_add_round_key_fu_338_round_key_address0),
    .round_key_ce0(grp_aes128_add_round_key_fu_338_round_key_ce0),
    .round_key_q0(round_key_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_aes128_add_round_key_fu_338_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state7))) begin
            grp_aes128_add_round_key_fu_338_ap_start_reg <= 1'b1;
        end else if ((grp_aes128_add_round_key_fu_338_ap_ready == 1'b1)) begin
            grp_aes128_add_round_key_fu_338_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_aes128_expand_key_hw_fu_313_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond1_fu_348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_aes128_expand_key_hw_fu_313_ap_start_reg <= 1'b1;
        end else if ((grp_aes128_expand_key_hw_fu_313_ap_ready == 1'b1)) begin
            grp_aes128_expand_key_hw_fu_313_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_aes128_extract_round_fu_329_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state5) | ((exitcond_i2_fu_446_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19)) | ((exitcond2_fu_399_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
            grp_aes128_extract_round_fu_329_ap_start_reg <= 1'b1;
        end else if ((grp_aes128_extract_round_fu_329_ap_ready == 1'b1)) begin
            grp_aes128_extract_round_fu_329_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_aes128_mix_columns_h_fu_308_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            grp_aes128_mix_columns_h_fu_308_ap_start_reg <= 1'b1;
        end else if ((grp_aes128_mix_columns_h_fu_308_ap_ready == 1'b1)) begin
            grp_aes128_mix_columns_h_fu_308_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_aes128_shift_rows_hw_fu_324_ap_start_reg <= 1'b0;
    end else begin
        if ((((exitcond_i2_fu_446_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19)) | ((exitcond_i_fu_418_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11)))) begin
            grp_aes128_shift_rows_hw_fu_324_ap_start_reg <= 1'b1;
        end else if ((grp_aes128_shift_rows_hw_fu_324_ap_ready == 1'b1)) begin
            grp_aes128_shift_rows_hw_fu_324_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sin_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((sin_V_data_V_0_ack_out == 1'b1) & (sin_V_data_V_0_vld_out == 1'b1))) begin
            sin_V_data_V_0_sel_rd <= ~sin_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sin_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((sin_V_data_V_0_ack_in == 1'b1) & (sin_V_data_V_0_vld_in == 1'b1))) begin
            sin_V_data_V_0_sel_wr <= ~sin_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sin_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((sin_V_data_V_0_state == 2'd2) & (sin_V_data_V_0_vld_in == 1'b0)) | ((sin_V_data_V_0_state == 2'd3) & (sin_V_data_V_0_vld_in == 1'b0) & (sin_V_data_V_0_ack_out == 1'b1)))) begin
            sin_V_data_V_0_state <= 2'd2;
        end else if ((((sin_V_data_V_0_state == 2'd1) & (sin_V_data_V_0_ack_out == 1'b0)) | ((sin_V_data_V_0_state == 2'd3) & (sin_V_data_V_0_ack_out == 1'b0) & (sin_V_data_V_0_vld_in == 1'b1)))) begin
            sin_V_data_V_0_state <= 2'd1;
        end else if (((~((sin_V_data_V_0_vld_in == 1'b0) & (sin_V_data_V_0_ack_out == 1'b1)) & ~((sin_V_data_V_0_ack_out == 1'b0) & (sin_V_data_V_0_vld_in == 1'b1)) & (sin_V_data_V_0_state == 2'd3)) | ((sin_V_data_V_0_state == 2'd1) & (sin_V_data_V_0_ack_out == 1'b1)) | ((sin_V_data_V_0_state == 2'd2) & (sin_V_data_V_0_vld_in == 1'b1)))) begin
            sin_V_data_V_0_state <= 2'd3;
        end else begin
            sin_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sin_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((sin_V_dest_V_0_state == 2'd2) & (sin_V_dest_V_0_vld_in == 1'b0)) | ((sin_V_dest_V_0_state == 2'd3) & (sin_V_dest_V_0_vld_in == 1'b0) & (sin_V_dest_V_0_ack_out == 1'b1)))) begin
            sin_V_dest_V_0_state <= 2'd2;
        end else if ((((sin_V_dest_V_0_state == 2'd1) & (sin_V_dest_V_0_ack_out == 1'b0)) | ((sin_V_dest_V_0_state == 2'd3) & (sin_V_dest_V_0_ack_out == 1'b0) & (sin_V_dest_V_0_vld_in == 1'b1)))) begin
            sin_V_dest_V_0_state <= 2'd1;
        end else if (((~((sin_V_dest_V_0_vld_in == 1'b0) & (sin_V_dest_V_0_ack_out == 1'b1)) & ~((sin_V_dest_V_0_ack_out == 1'b0) & (sin_V_dest_V_0_vld_in == 1'b1)) & (sin_V_dest_V_0_state == 2'd3)) | ((sin_V_dest_V_0_state == 2'd1) & (sin_V_dest_V_0_ack_out == 1'b1)) | ((sin_V_dest_V_0_state == 2'd2) & (sin_V_dest_V_0_vld_in == 1'b1)))) begin
            sin_V_dest_V_0_state <= 2'd3;
        end else begin
            sin_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((sout_V_data_V_1_ack_out == 1'b1) & (sout_V_data_V_1_vld_out == 1'b1))) begin
            sout_V_data_V_1_sel_rd <= ~sout_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((sout_V_data_V_1_ack_in == 1'b1) & (sout_V_data_V_1_vld_in == 1'b1))) begin
            sout_V_data_V_1_sel_wr <= ~sout_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((sout_V_data_V_1_state == 2'd2) & (sout_V_data_V_1_vld_in == 1'b0)) | ((sout_V_data_V_1_state == 2'd3) & (sout_V_data_V_1_vld_in == 1'b0) & (sout_V_data_V_1_ack_out == 1'b1)))) begin
            sout_V_data_V_1_state <= 2'd2;
        end else if ((((sout_V_data_V_1_state == 2'd1) & (sout_V_data_V_1_ack_out == 1'b0)) | ((sout_V_data_V_1_state == 2'd3) & (sout_V_data_V_1_ack_out == 1'b0) & (sout_V_data_V_1_vld_in == 1'b1)))) begin
            sout_V_data_V_1_state <= 2'd1;
        end else if (((~((sout_V_data_V_1_vld_in == 1'b0) & (sout_V_data_V_1_ack_out == 1'b1)) & ~((sout_V_data_V_1_ack_out == 1'b0) & (sout_V_data_V_1_vld_in == 1'b1)) & (sout_V_data_V_1_state == 2'd3)) | ((sout_V_data_V_1_state == 2'd1) & (sout_V_data_V_1_ack_out == 1'b1)) | ((sout_V_data_V_1_state == 2'd2) & (sout_V_data_V_1_vld_in == 1'b1)))) begin
            sout_V_data_V_1_state <= 2'd3;
        end else begin
            sout_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((sout_V_dest_V_1_ack_out == 1'b1) & (sout_V_dest_V_1_vld_out == 1'b1))) begin
            sout_V_dest_V_1_sel_rd <= ~sout_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((sout_V_dest_V_1_state == 2'd2) & (sout_V_dest_V_1_vld_in == 1'b0)) | ((sout_V_dest_V_1_state == 2'd3) & (sout_V_dest_V_1_vld_in == 1'b0) & (sout_V_dest_V_1_ack_out == 1'b1)))) begin
            sout_V_dest_V_1_state <= 2'd2;
        end else if ((((sout_V_dest_V_1_state == 2'd1) & (sout_V_dest_V_1_ack_out == 1'b0)) | ((sout_V_dest_V_1_state == 2'd3) & (sout_V_dest_V_1_ack_out == 1'b0) & (sout_V_dest_V_1_vld_in == 1'b1)))) begin
            sout_V_dest_V_1_state <= 2'd1;
        end else if (((~((sout_V_dest_V_1_vld_in == 1'b0) & (sout_V_dest_V_1_ack_out == 1'b1)) & ~((sout_V_dest_V_1_ack_out == 1'b0) & (sout_V_dest_V_1_vld_in == 1'b1)) & (sout_V_dest_V_1_state == 2'd3)) | ((sout_V_dest_V_1_state == 2'd1) & (sout_V_dest_V_1_ack_out == 1'b1)) | ((sout_V_dest_V_1_state == 2'd2) & (sout_V_dest_V_1_vld_in == 1'b1)))) begin
            sout_V_dest_V_1_state <= 2'd3;
        end else begin
            sout_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((sout_V_id_V_1_ack_out == 1'b1) & (sout_V_id_V_1_vld_out == 1'b1))) begin
            sout_V_id_V_1_sel_rd <= ~sout_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((sout_V_id_V_1_state == 2'd2) & (sout_V_id_V_1_vld_in == 1'b0)) | ((sout_V_id_V_1_state == 2'd3) & (sout_V_id_V_1_vld_in == 1'b0) & (sout_V_id_V_1_ack_out == 1'b1)))) begin
            sout_V_id_V_1_state <= 2'd2;
        end else if ((((sout_V_id_V_1_state == 2'd1) & (sout_V_id_V_1_ack_out == 1'b0)) | ((sout_V_id_V_1_state == 2'd3) & (sout_V_id_V_1_ack_out == 1'b0) & (sout_V_id_V_1_vld_in == 1'b1)))) begin
            sout_V_id_V_1_state <= 2'd1;
        end else if (((~((sout_V_id_V_1_vld_in == 1'b0) & (sout_V_id_V_1_ack_out == 1'b1)) & ~((sout_V_id_V_1_ack_out == 1'b0) & (sout_V_id_V_1_vld_in == 1'b1)) & (sout_V_id_V_1_state == 2'd3)) | ((sout_V_id_V_1_state == 2'd1) & (sout_V_id_V_1_ack_out == 1'b1)) | ((sout_V_id_V_1_state == 2'd2) & (sout_V_id_V_1_vld_in == 1'b1)))) begin
            sout_V_id_V_1_state <= 2'd3;
        end else begin
            sout_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((sout_V_keep_V_1_ack_out == 1'b1) & (sout_V_keep_V_1_vld_out == 1'b1))) begin
            sout_V_keep_V_1_sel_rd <= ~sout_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((sout_V_keep_V_1_state == 2'd2) & (sout_V_keep_V_1_vld_in == 1'b0)) | ((sout_V_keep_V_1_state == 2'd3) & (sout_V_keep_V_1_vld_in == 1'b0) & (sout_V_keep_V_1_ack_out == 1'b1)))) begin
            sout_V_keep_V_1_state <= 2'd2;
        end else if ((((sout_V_keep_V_1_state == 2'd1) & (sout_V_keep_V_1_ack_out == 1'b0)) | ((sout_V_keep_V_1_state == 2'd3) & (sout_V_keep_V_1_ack_out == 1'b0) & (sout_V_keep_V_1_vld_in == 1'b1)))) begin
            sout_V_keep_V_1_state <= 2'd1;
        end else if (((~((sout_V_keep_V_1_vld_in == 1'b0) & (sout_V_keep_V_1_ack_out == 1'b1)) & ~((sout_V_keep_V_1_ack_out == 1'b0) & (sout_V_keep_V_1_vld_in == 1'b1)) & (sout_V_keep_V_1_state == 2'd3)) | ((sout_V_keep_V_1_state == 2'd1) & (sout_V_keep_V_1_ack_out == 1'b1)) | ((sout_V_keep_V_1_state == 2'd2) & (sout_V_keep_V_1_vld_in == 1'b1)))) begin
            sout_V_keep_V_1_state <= 2'd3;
        end else begin
            sout_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((sout_V_last_V_1_ack_out == 1'b1) & (sout_V_last_V_1_vld_out == 1'b1))) begin
            sout_V_last_V_1_sel_rd <= ~sout_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((sout_V_last_V_1_ack_in == 1'b1) & (sout_V_last_V_1_vld_in == 1'b1))) begin
            sout_V_last_V_1_sel_wr <= ~sout_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((sout_V_last_V_1_state == 2'd2) & (sout_V_last_V_1_vld_in == 1'b0)) | ((sout_V_last_V_1_state == 2'd3) & (sout_V_last_V_1_vld_in == 1'b0) & (sout_V_last_V_1_ack_out == 1'b1)))) begin
            sout_V_last_V_1_state <= 2'd2;
        end else if ((((sout_V_last_V_1_state == 2'd1) & (sout_V_last_V_1_ack_out == 1'b0)) | ((sout_V_last_V_1_state == 2'd3) & (sout_V_last_V_1_ack_out == 1'b0) & (sout_V_last_V_1_vld_in == 1'b1)))) begin
            sout_V_last_V_1_state <= 2'd1;
        end else if (((~((sout_V_last_V_1_vld_in == 1'b0) & (sout_V_last_V_1_ack_out == 1'b1)) & ~((sout_V_last_V_1_ack_out == 1'b0) & (sout_V_last_V_1_vld_in == 1'b1)) & (sout_V_last_V_1_state == 2'd3)) | ((sout_V_last_V_1_state == 2'd1) & (sout_V_last_V_1_ack_out == 1'b1)) | ((sout_V_last_V_1_state == 2'd2) & (sout_V_last_V_1_vld_in == 1'b1)))) begin
            sout_V_last_V_1_state <= 2'd3;
        end else begin
            sout_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((sout_V_strb_V_1_ack_out == 1'b1) & (sout_V_strb_V_1_vld_out == 1'b1))) begin
            sout_V_strb_V_1_sel_rd <= ~sout_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((sout_V_strb_V_1_state == 2'd2) & (sout_V_strb_V_1_vld_in == 1'b0)) | ((sout_V_strb_V_1_state == 2'd3) & (sout_V_strb_V_1_vld_in == 1'b0) & (sout_V_strb_V_1_ack_out == 1'b1)))) begin
            sout_V_strb_V_1_state <= 2'd2;
        end else if ((((sout_V_strb_V_1_state == 2'd1) & (sout_V_strb_V_1_ack_out == 1'b0)) | ((sout_V_strb_V_1_state == 2'd3) & (sout_V_strb_V_1_ack_out == 1'b0) & (sout_V_strb_V_1_vld_in == 1'b1)))) begin
            sout_V_strb_V_1_state <= 2'd1;
        end else if (((~((sout_V_strb_V_1_vld_in == 1'b0) & (sout_V_strb_V_1_ack_out == 1'b1)) & ~((sout_V_strb_V_1_ack_out == 1'b0) & (sout_V_strb_V_1_vld_in == 1'b1)) & (sout_V_strb_V_1_state == 2'd3)) | ((sout_V_strb_V_1_state == 2'd1) & (sout_V_strb_V_1_ack_out == 1'b1)) | ((sout_V_strb_V_1_state == 2'd2) & (sout_V_strb_V_1_vld_in == 1'b1)))) begin
            sout_V_strb_V_1_state <= 2'd3;
        end else begin
            sout_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((sout_V_user_V_1_ack_out == 1'b1) & (sout_V_user_V_1_vld_out == 1'b1))) begin
            sout_V_user_V_1_sel_rd <= ~sout_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((sout_V_user_V_1_state == 2'd2) & (sout_V_user_V_1_vld_in == 1'b0)) | ((sout_V_user_V_1_state == 2'd3) & (sout_V_user_V_1_vld_in == 1'b0) & (sout_V_user_V_1_ack_out == 1'b1)))) begin
            sout_V_user_V_1_state <= 2'd2;
        end else if ((((sout_V_user_V_1_state == 2'd1) & (sout_V_user_V_1_ack_out == 1'b0)) | ((sout_V_user_V_1_state == 2'd3) & (sout_V_user_V_1_ack_out == 1'b0) & (sout_V_user_V_1_vld_in == 1'b1)))) begin
            sout_V_user_V_1_state <= 2'd1;
        end else if (((~((sout_V_user_V_1_vld_in == 1'b0) & (sout_V_user_V_1_ack_out == 1'b1)) & ~((sout_V_user_V_1_ack_out == 1'b0) & (sout_V_user_V_1_vld_in == 1'b1)) & (sout_V_user_V_1_state == 2'd3)) | ((sout_V_user_V_1_state == 2'd1) & (sout_V_user_V_1_ack_out == 1'b1)) | ((sout_V_user_V_1_state == 2'd2) & (sout_V_user_V_1_vld_in == 1'b1)))) begin
            sout_V_user_V_1_state <= 2'd3;
        end else begin
            sout_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((grp_aes128_add_round_key_fu_338_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state18)) begin
            i_1_reg_252 <= i_13_reg_587;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            i_1_reg_252 <= 4'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_500_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        i_2_reg_286 <= i_14_reg_623;
    end else if (((1'b1 == ap_CS_fsm_state24) & (grp_aes128_add_round_key_fu_338_ap_done == 1'b1))) begin
        i_2_reg_286 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        i_i1_reg_275 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        i_i1_reg_275 <= i_12_reg_600;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_i_reg_264 <= i_3_reg_577;
    end else if (((1'b1 == ap_CS_fsm_state10) & (grp_aes128_extract_round_fu_329_ap_done == 1'b1))) begin
        i_i_reg_264 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond3_fu_360_p2 == 1'd0) & (sin_V_data_V_0_vld_out == 1'b0)) & (exitcond3_fu_360_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_230 <= i_11_reg_553;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_230 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((sout_V_dest_V_1_ack_in == 1'b0) | (sout_V_id_V_1_ack_in == 1'b0) | (sout_V_last_V_1_ack_in == 1'b0) | (sout_V_user_V_1_ack_in == 1'b0) | (sout_V_strb_V_1_ack_in == 1'b0) | (sout_V_keep_V_1_ack_in == 1'b0) | (sout_V_data_V_1_ack_in == 1'b0)) & (exitcond4_fu_472_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        j_1_reg_297 <= 3'd0;
    end else if (((sout_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        j_1_reg_297 <= j_7_reg_636;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_348_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_241 <= 3'd0;
    end else if ((~((exitcond3_fu_360_p2 == 1'd0) & (sin_V_data_V_0_vld_out == 1'b0)) & (exitcond3_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_241 <= j_6_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_11_reg_553 <= i_11_fu_354_p2;
        i_cast_reg_545[2 : 0] <= i_cast_fu_344_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        i_12_reg_600 <= i_12_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_418_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        i_13_reg_587 <= i_13_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((sout_V_dest_V_1_ack_in == 1'b0) | (sout_V_id_V_1_ack_in == 1'b0) | (sout_V_last_V_1_ack_in == 1'b0) | (sout_V_user_V_1_ack_in == 1'b0) | (sout_V_strb_V_1_ack_in == 1'b0) | (sout_V_keep_V_1_ack_in == 1'b0) | (sout_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state25))) begin
        i_14_reg_623 <= i_14_fu_478_p2;
        i_2_cast_reg_615[2 : 0] <= i_2_cast_fu_468_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_3_reg_577 <= i_3_fu_424_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        j_7_reg_636 <= j_7_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((sin_V_data_V_0_load_A == 1'b1)) begin
        sin_V_data_V_0_payload_A <= sin_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((sin_V_data_V_0_load_B == 1'b1)) begin
        sin_V_data_V_0_payload_B <= sin_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((sout_V_data_V_1_load_A == 1'b1)) begin
        sout_V_data_V_1_payload_A <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((sout_V_data_V_1_load_B == 1'b1)) begin
        sout_V_data_V_1_payload_B <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((sout_V_last_V_1_load_A == 1'b1)) begin
        sout_V_last_V_1_payload_A <= tmp_last_V_reg_646;
    end
end

always @ (posedge ap_clk) begin
    if ((sout_V_last_V_1_load_B == 1'b1)) begin
        sout_V_last_V_1_payload_B <= tmp_last_V_reg_646;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i2_fu_446_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        state_addr_5_reg_605 <= tmp_i3_fu_458_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_418_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        state_addr_6_reg_582 <= tmp_i_fu_430_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((sout_V_dest_V_1_ack_in == 1'b0) | (sout_V_id_V_1_ack_in == 1'b0) | (sout_V_last_V_1_ack_in == 1'b0) | (sout_V_user_V_1_ack_in == 1'b0) | (sout_V_strb_V_1_ack_in == 1'b0) | (sout_V_keep_V_1_ack_in == 1'b0) | (sout_V_data_V_1_ack_in == 1'b0)) & (exitcond4_fu_472_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        tmp_31_reg_628[3 : 2] <= tmp_31_fu_488_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_399_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_41_cast_reg_569[7 : 4] <= tmp_41_cast_fu_413_p1[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_500_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        tmp_last_V_reg_646 <= tmp_last_V_fu_539_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state10))) begin
        expanded_key_address0 = grp_aes128_extract_round_fu_329_expanded_key_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        expanded_key_address0 = grp_aes128_expand_key_hw_fu_313_expanded_key_address0;
    end else begin
        expanded_key_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state10))) begin
        expanded_key_ce0 = grp_aes128_extract_round_fu_329_expanded_key_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        expanded_key_ce0 = grp_aes128_expand_key_hw_fu_313_expanded_key_ce0;
    end else begin
        expanded_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expanded_key_we0 = grp_aes128_expand_key_hw_fu_313_expanded_key_we0;
    end else begin
        expanded_key_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_aes128_extract_round_fu_329_expanded_key_offset = 10'd160;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_aes128_extract_round_fu_329_expanded_key_offset = tmp_41_cast_reg_569;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_aes128_extract_round_fu_329_expanded_key_offset = 10'd0;
    end else begin
        grp_aes128_extract_round_fu_329_expanded_key_offset = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state8))) begin
        round_key_address0 = grp_aes128_add_round_key_fu_338_round_key_address0;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state10))) begin
        round_key_address0 = grp_aes128_extract_round_fu_329_round_key_address0;
    end else begin
        round_key_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state8))) begin
        round_key_ce0 = grp_aes128_add_round_key_fu_338_round_key_ce0;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state10))) begin
        round_key_ce0 = grp_aes128_extract_round_fu_329_round_key_ce0;
    end else begin
        round_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state10))) begin
        round_key_we0 = grp_aes128_extract_round_fu_329_round_key_we0;
    end else begin
        round_key_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        sbox_hw_address0 = tmp_i6_fu_463_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        sbox_hw_address0 = tmp_i_20_fu_441_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sbox_hw_address0 = 8'd0;
    end else begin
        sbox_hw_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12))) begin
        sbox_hw_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sbox_hw_ce0 = 1'b0;
    end else begin
        sbox_hw_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sin_TDATA_blk_n = sin_V_data_V_0_state[1'd0];
    end else begin
        sin_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((exitcond3_fu_360_p2 == 1'd0) & (sin_V_data_V_0_vld_out == 1'b0)) & (exitcond3_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sin_V_data_V_0_ack_out = 1'b1;
    end else begin
        sin_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((sin_V_data_V_0_sel == 1'b1)) begin
        sin_V_data_V_0_data_out = sin_V_data_V_0_payload_B;
    end else begin
        sin_V_data_V_0_data_out = sin_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((exitcond3_fu_360_p2 == 1'd0) & (sin_V_data_V_0_vld_out == 1'b0)) & (exitcond3_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sin_V_dest_V_0_ack_out = 1'b1;
    end else begin
        sin_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27))) begin
        sout_TDATA_blk_n = sout_V_data_V_1_state[1'd1];
    end else begin
        sout_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((sout_V_data_V_1_sel == 1'b1)) begin
        sout_V_data_V_1_data_out = sout_V_data_V_1_payload_B;
    end else begin
        sout_V_data_V_1_data_out = sout_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((sout_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        sout_V_data_V_1_vld_in = 1'b1;
    end else begin
        sout_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((sout_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        sout_V_dest_V_1_vld_in = 1'b1;
    end else begin
        sout_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((sout_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        sout_V_id_V_1_vld_in = 1'b1;
    end else begin
        sout_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((sout_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        sout_V_keep_V_1_vld_in = 1'b1;
    end else begin
        sout_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((sout_V_last_V_1_sel == 1'b1)) begin
        sout_V_last_V_1_data_out = sout_V_last_V_1_payload_B;
    end else begin
        sout_V_last_V_1_data_out = sout_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((sout_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        sout_V_last_V_1_vld_in = 1'b1;
    end else begin
        sout_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((sout_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        sout_V_strb_V_1_vld_in = 1'b1;
    end else begin
        sout_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((sout_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        sout_V_user_V_1_vld_in = 1'b1;
    end else begin
        sout_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        state_address0 = tmp_34_fu_529_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        state_address0 = state_addr_5_reg_605;
    end else if (((exitcond_i2_fu_446_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        state_address0 = tmp_i3_fu_458_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address0 = state_addr_6_reg_582;
    end else if (((exitcond_i_fu_418_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        state_address0 = tmp_i_fu_430_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address0 = tmp_30_fu_394_p1;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state8))) begin
        state_address0 = grp_aes128_add_round_key_fu_338_state_address0;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14))) begin
        state_address0 = grp_aes128_shift_rows_hw_fu_324_state_address0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        state_address0 = grp_aes128_mix_columns_h_fu_308_state_address0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state13) | ((exitcond_i2_fu_446_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19)) | ((exitcond_i_fu_418_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | (~((exitcond3_fu_360_p2 == 1'd0) & (sin_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        state_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state8))) begin
        state_ce0 = grp_aes128_add_round_key_fu_338_state_ce0;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14))) begin
        state_ce0 = grp_aes128_shift_rows_hw_fu_324_state_ce0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        state_ce0 = grp_aes128_mix_columns_h_fu_308_state_ce0;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state13))) begin
        state_d0 = sbox_hw_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_d0 = sin_V_data_V_0_data_out;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state8))) begin
        state_d0 = grp_aes128_add_round_key_fu_338_state_d0;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14))) begin
        state_d0 = grp_aes128_shift_rows_hw_fu_324_state_d0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        state_d0 = grp_aes128_mix_columns_h_fu_308_state_d0;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state13) | (~((exitcond3_fu_360_p2 == 1'd0) & (sin_V_data_V_0_vld_out == 1'b0)) & (exitcond3_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        state_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state8))) begin
        state_we0 = grp_aes128_add_round_key_fu_338_state_we0;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14))) begin
        state_we0 = grp_aes128_shift_rows_hw_fu_324_state_we0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        state_we0 = grp_aes128_mix_columns_h_fu_308_state_we0;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_348_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((exitcond3_fu_360_p2 == 1'd0) & (sin_V_data_V_0_vld_out == 1'b0)) & (exitcond3_fu_360_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((exitcond3_fu_360_p2 == 1'd0) & (sin_V_data_V_0_vld_out == 1'b0)) & (exitcond3_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_aes128_expand_key_hw_fu_313_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_aes128_extract_round_fu_329_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_aes128_add_round_key_fu_338_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((exitcond2_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_aes128_extract_round_fu_329_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((exitcond_i_fu_418_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (grp_aes128_shift_rows_hw_fu_324_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (grp_aes128_mix_columns_h_fu_308_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (grp_aes128_add_round_key_fu_338_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((exitcond_i2_fu_446_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (1'b0 == ap_block_state22_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (grp_aes128_add_round_key_fu_338_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if ((~((sout_V_dest_V_1_ack_in == 1'b0) | (sout_V_id_V_1_ack_in == 1'b0) | (sout_V_last_V_1_ack_in == 1'b0) | (sout_V_user_V_1_ack_in == 1'b0) | (sout_V_strb_V_1_ack_in == 1'b0) | (sout_V_keep_V_1_ack_in == 1'b0) | (sout_V_data_V_1_ack_in == 1'b0)) & (exitcond4_fu_472_p2 == 1'd1) & (sout_V_dest_V_1_state[1'd0] == 1'b0) & (sout_V_id_V_1_state[1'd0] == 1'b0) & (sout_V_last_V_1_state[1'd0] == 1'b0) & (sout_V_user_V_1_state[1'd0] == 1'b0) & (sout_V_strb_V_1_state[1'd0] == 1'b0) & (sout_V_keep_V_1_state[1'd0] == 1'b0) & (sout_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((sout_V_dest_V_1_ack_in == 1'b0) | (sout_V_id_V_1_ack_in == 1'b0) | (sout_V_last_V_1_ack_in == 1'b0) | (sout_V_user_V_1_ack_in == 1'b0) | (sout_V_strb_V_1_ack_in == 1'b0) | (sout_V_keep_V_1_ack_in == 1'b0) | (sout_V_data_V_1_ack_in == 1'b0)) & (exitcond4_fu_472_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((exitcond_fu_500_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((sout_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((sout_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state22_on_subcall_done = ((grp_aes128_extract_round_fu_329_ap_done == 1'b0) | (grp_aes128_shift_rows_hw_fu_324_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state25 = ((sout_V_dest_V_1_ack_in == 1'b0) | (sout_V_id_V_1_ack_in == 1'b0) | (sout_V_last_V_1_ack_in == 1'b0) | (sout_V_user_V_1_ack_in == 1'b0) | (sout_V_strb_V_1_ack_in == 1'b0) | (sout_V_keep_V_1_ack_in == 1'b0) | (sout_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((exitcond3_fu_360_p2 == 1'd0) & (sin_V_data_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_348_p2 = ((i_reg_230 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond2_fu_399_p2 = ((i_1_reg_252 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond3_fu_360_p2 = ((j_reg_241 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond4_fu_472_p2 = ((i_2_reg_286 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_500_p2 = ((j_1_reg_297 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_i2_fu_446_p2 = ((i_i1_reg_275 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond_i_fu_418_p2 = ((i_i_reg_264 == 5'd16) ? 1'b1 : 1'b0);

assign grp_aes128_add_round_key_fu_338_ap_start = grp_aes128_add_round_key_fu_338_ap_start_reg;

assign grp_aes128_expand_key_hw_fu_313_ap_start = grp_aes128_expand_key_hw_fu_313_ap_start_reg;

assign grp_aes128_extract_round_fu_329_ap_start = grp_aes128_extract_round_fu_329_ap_start_reg;

assign grp_aes128_mix_columns_h_fu_308_ap_start = grp_aes128_mix_columns_h_fu_308_ap_start_reg;

assign grp_aes128_shift_rows_hw_fu_324_ap_start = grp_aes128_shift_rows_hw_fu_324_ap_start_reg;

assign i_11_fu_354_p2 = (i_reg_230 + 3'd1);

assign i_12_fu_452_p2 = (i_i1_reg_275 + 5'd1);

assign i_13_fu_435_p2 = (i_1_reg_252 + 4'd1);

assign i_14_fu_478_p2 = (i_2_reg_286 + 3'd1);

assign i_2_cast_fu_468_p1 = i_2_reg_286;

assign i_3_fu_424_p2 = (i_i_reg_264 + 5'd1);

assign i_cast_fu_344_p1 = i_reg_230;

assign j_1_cast_fu_496_p1 = j_1_reg_297;

assign j_6_fu_366_p2 = (j_reg_241 + 3'd1);

assign j_7_fu_506_p2 = (j_1_reg_297 + 3'd1);

assign sin_TREADY = sin_V_dest_V_0_state[1'd1];

assign sin_V_data_V_0_ack_in = sin_V_data_V_0_state[1'd1];

assign sin_V_data_V_0_load_A = (sin_V_data_V_0_state_cmp_full & ~sin_V_data_V_0_sel_wr);

assign sin_V_data_V_0_load_B = (sin_V_data_V_0_state_cmp_full & sin_V_data_V_0_sel_wr);

assign sin_V_data_V_0_sel = sin_V_data_V_0_sel_rd;

assign sin_V_data_V_0_state_cmp_full = ((sin_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign sin_V_data_V_0_vld_in = sin_TVALID;

assign sin_V_data_V_0_vld_out = sin_V_data_V_0_state[1'd0];

assign sin_V_dest_V_0_vld_in = sin_TVALID;

assign sout_TDATA = sout_V_data_V_1_data_out;

assign sout_TDEST = sout_V_dest_V_1_data_out;

assign sout_TID = sout_V_id_V_1_data_out;

assign sout_TKEEP = sout_V_keep_V_1_data_out;

assign sout_TLAST = sout_V_last_V_1_data_out;

assign sout_TSTRB = sout_V_strb_V_1_data_out;

assign sout_TUSER = sout_V_user_V_1_data_out;

assign sout_TVALID = sout_V_dest_V_1_state[1'd0];

assign sout_V_data_V_1_ack_in = sout_V_data_V_1_state[1'd1];

assign sout_V_data_V_1_ack_out = sout_TREADY;

assign sout_V_data_V_1_load_A = (sout_V_data_V_1_state_cmp_full & ~sout_V_data_V_1_sel_wr);

assign sout_V_data_V_1_load_B = (sout_V_data_V_1_state_cmp_full & sout_V_data_V_1_sel_wr);

assign sout_V_data_V_1_sel = sout_V_data_V_1_sel_rd;

assign sout_V_data_V_1_state_cmp_full = ((sout_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign sout_V_data_V_1_vld_out = sout_V_data_V_1_state[1'd0];

assign sout_V_dest_V_1_ack_in = sout_V_dest_V_1_state[1'd1];

assign sout_V_dest_V_1_ack_out = sout_TREADY;

assign sout_V_dest_V_1_data_out = 1'd0;

assign sout_V_dest_V_1_sel = sout_V_dest_V_1_sel_rd;

assign sout_V_dest_V_1_vld_out = sout_V_dest_V_1_state[1'd0];

assign sout_V_id_V_1_ack_in = sout_V_id_V_1_state[1'd1];

assign sout_V_id_V_1_ack_out = sout_TREADY;

assign sout_V_id_V_1_data_out = 1'd0;

assign sout_V_id_V_1_sel = sout_V_id_V_1_sel_rd;

assign sout_V_id_V_1_vld_out = sout_V_id_V_1_state[1'd0];

assign sout_V_keep_V_1_ack_in = sout_V_keep_V_1_state[1'd1];

assign sout_V_keep_V_1_ack_out = sout_TREADY;

assign sout_V_keep_V_1_data_out = 1'd1;

assign sout_V_keep_V_1_sel = sout_V_keep_V_1_sel_rd;

assign sout_V_keep_V_1_vld_out = sout_V_keep_V_1_state[1'd0];

assign sout_V_last_V_1_ack_in = sout_V_last_V_1_state[1'd1];

assign sout_V_last_V_1_ack_out = sout_TREADY;

assign sout_V_last_V_1_load_A = (sout_V_last_V_1_state_cmp_full & ~sout_V_last_V_1_sel_wr);

assign sout_V_last_V_1_load_B = (sout_V_last_V_1_state_cmp_full & sout_V_last_V_1_sel_wr);

assign sout_V_last_V_1_sel = sout_V_last_V_1_sel_rd;

assign sout_V_last_V_1_state_cmp_full = ((sout_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign sout_V_last_V_1_vld_out = sout_V_last_V_1_state[1'd0];

assign sout_V_strb_V_1_ack_in = sout_V_strb_V_1_state[1'd1];

assign sout_V_strb_V_1_ack_out = sout_TREADY;

assign sout_V_strb_V_1_data_out = 1'd0;

assign sout_V_strb_V_1_sel = sout_V_strb_V_1_sel_rd;

assign sout_V_strb_V_1_vld_out = sout_V_strb_V_1_state[1'd0];

assign sout_V_user_V_1_ack_in = sout_V_user_V_1_state[1'd1];

assign sout_V_user_V_1_ack_out = sout_TREADY;

assign sout_V_user_V_1_data_out = 1'd0;

assign sout_V_user_V_1_sel = sout_V_user_V_1_sel_rd;

assign sout_V_user_V_1_vld_out = sout_V_user_V_1_state[1'd0];

assign tmp_28_fu_381_p3 = {{tmp_fu_377_p1}, {2'd0}};

assign tmp_29_fu_389_p2 = (tmp_28_fu_381_p3 + i_cast_reg_545);

assign tmp_30_fu_394_p1 = tmp_29_fu_389_p2;

assign tmp_31_fu_488_p3 = {{tmp_36_fu_484_p1}, {2'd0}};

assign tmp_32_fu_516_p3 = {{tmp_37_fu_512_p1}, {2'd0}};

assign tmp_33_fu_524_p2 = (i_2_cast_reg_615 + tmp_32_fu_516_p3);

assign tmp_34_fu_529_p1 = tmp_33_fu_524_p2;

assign tmp_35_fu_534_p2 = (tmp_31_reg_628 + j_1_cast_fu_496_p1);

assign tmp_36_fu_484_p1 = i_2_reg_286[1:0];

assign tmp_37_fu_512_p1 = j_1_reg_297[1:0];

assign tmp_41_cast_fu_413_p1 = tmp_s_fu_405_p3;

assign tmp_fu_377_p1 = j_reg_241[1:0];

assign tmp_i3_fu_458_p1 = i_i1_reg_275;

assign tmp_i6_fu_463_p1 = state_q0;

assign tmp_i_20_fu_441_p1 = state_q0;

assign tmp_i_fu_430_p1 = i_i_reg_264;

assign tmp_last_V_fu_539_p2 = ((tmp_35_fu_534_p2 == 4'd15) ? 1'b1 : 1'b0);

assign tmp_s_fu_405_p3 = {{i_1_reg_252}, {4'd0}};

always @ (posedge ap_clk) begin
    i_cast_reg_545[3] <= 1'b0;
    tmp_41_cast_reg_569[3:0] <= 4'b0000;
    tmp_41_cast_reg_569[9:8] <= 2'b00;
    i_2_cast_reg_615[3] <= 1'b0;
    tmp_31_reg_628[1:0] <= 2'b00;
end

endmodule //aes128_encrypt_block_hw
