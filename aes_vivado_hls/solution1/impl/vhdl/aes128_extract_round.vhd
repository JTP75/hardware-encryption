-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes128_extract_round is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    expanded_key_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expanded_key_ce0 : OUT STD_LOGIC;
    expanded_key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    expanded_key_offset : IN STD_LOGIC_VECTOR (9 downto 0);
    round_key_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    round_key_ce0 : OUT STD_LOGIC;
    round_key_we0 : OUT STD_LOGIC;
    round_key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of aes128_extract_round is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_14_fu_79_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_167 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_cast_fu_83_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_cast_reg_172 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_6_fu_93_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_6_reg_180 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_103_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_185 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_fu_87_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_121_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_4_reg_193 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_158_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_reg_203 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_57 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_68 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sum_cast_fu_141_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_99_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_cast_fu_111_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_127_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_23_cast_fu_132_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_fu_136_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_146_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_11_fu_150_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_57_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_57 <= i_6_reg_180;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_57 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_87_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_68 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_68 <= j_4_reg_193;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_6_reg_180 <= i_6_fu_93_p2;
                    i_cast_reg_172(2 downto 0) <= i_cast_fu_83_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_4_reg_193 <= j_4_fu_121_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_12_reg_203 <= tmp_12_fu_158_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_14_reg_167 <= tmp_14_fu_79_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_87_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_reg_185(3 downto 2) <= tmp_fu_103_p3(3 downto 2);
            end if;
        end if;
    end process;
    i_cast_reg_172(3) <= '0';
    tmp_reg_185(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_87_p2, ap_CS_fsm_state3, exitcond_fu_115_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_87_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_87_p2)
    begin
        if ((((exitcond1_fu_87_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_87_p2)
    begin
        if (((exitcond1_fu_87_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_87_p2 <= "1" when (i_reg_57 = ap_const_lv3_4) else "0";
    exitcond_fu_115_p2 <= "1" when (j_reg_68 = ap_const_lv3_4) else "0";
    expanded_key_address0 <= sum_cast_fu_141_p1(8 - 1 downto 0);

    expanded_key_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            expanded_key_ce0 <= ap_const_logic_1;
        else 
            expanded_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_6_fu_93_p2 <= std_logic_vector(unsigned(i_reg_57) + unsigned(ap_const_lv3_1));
    i_cast_fu_83_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_57),4));
    j_4_fu_121_p2 <= std_logic_vector(unsigned(j_reg_68) + unsigned(ap_const_lv3_1));
    j_cast_fu_111_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_68),4));
    round_key_address0 <= tmp_13_fu_163_p1(4 - 1 downto 0);

    round_key_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            round_key_ce0 <= ap_const_logic_1;
        else 
            round_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    round_key_d0 <= expanded_key_q0;

    round_key_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            round_key_we0 <= ap_const_logic_1;
        else 
            round_key_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_cast_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_136_p2),64));
    sum_fu_136_p2 <= std_logic_vector(unsigned(tmp_14_reg_167) + unsigned(tmp_23_cast_fu_132_p1));
    tmp_11_fu_150_p3 <= (tmp_16_fu_146_p1 & ap_const_lv2_0);
    tmp_12_fu_158_p2 <= std_logic_vector(unsigned(tmp_11_fu_150_p3) + unsigned(i_cast_reg_172));
    tmp_13_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_reg_203),64));
    tmp_14_fu_79_p1 <= expanded_key_offset(8 - 1 downto 0);
    tmp_15_fu_99_p1 <= i_reg_57(2 - 1 downto 0);
    tmp_16_fu_146_p1 <= j_reg_68(2 - 1 downto 0);
    tmp_23_cast_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_127_p2),8));
    tmp_fu_103_p3 <= (tmp_15_fu_99_p1 & ap_const_lv2_0);
    tmp_s_fu_127_p2 <= std_logic_vector(unsigned(j_cast_fu_111_p1) + unsigned(tmp_reg_185));
end behav;
