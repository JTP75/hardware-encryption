// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="aes128_encrypt_block_hw,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.498000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=1465,HLS_SYN_LUT=6424,HLS_VERSION=2018_3}" *)

module aes128_encrypt_block_hw (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        in_r_address1,
        in_r_ce1,
        in_r_q1,
        key_address0,
        key_ce0,
        key_q0,
        key_address1,
        key_ce1,
        key_q1,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0,
        out_r_address1,
        out_r_ce1,
        out_r_we1,
        out_r_d1
);

parameter    ap_ST_fsm_state1 = 59'd1;
parameter    ap_ST_fsm_state2 = 59'd2;
parameter    ap_ST_fsm_state3 = 59'd4;
parameter    ap_ST_fsm_state4 = 59'd8;
parameter    ap_ST_fsm_state5 = 59'd16;
parameter    ap_ST_fsm_state6 = 59'd32;
parameter    ap_ST_fsm_state7 = 59'd64;
parameter    ap_ST_fsm_state8 = 59'd128;
parameter    ap_ST_fsm_state9 = 59'd256;
parameter    ap_ST_fsm_state10 = 59'd512;
parameter    ap_ST_fsm_state11 = 59'd1024;
parameter    ap_ST_fsm_state12 = 59'd2048;
parameter    ap_ST_fsm_state13 = 59'd4096;
parameter    ap_ST_fsm_state14 = 59'd8192;
parameter    ap_ST_fsm_state15 = 59'd16384;
parameter    ap_ST_fsm_state16 = 59'd32768;
parameter    ap_ST_fsm_state17 = 59'd65536;
parameter    ap_ST_fsm_state18 = 59'd131072;
parameter    ap_ST_fsm_state19 = 59'd262144;
parameter    ap_ST_fsm_state20 = 59'd524288;
parameter    ap_ST_fsm_state21 = 59'd1048576;
parameter    ap_ST_fsm_state22 = 59'd2097152;
parameter    ap_ST_fsm_state23 = 59'd4194304;
parameter    ap_ST_fsm_state24 = 59'd8388608;
parameter    ap_ST_fsm_state25 = 59'd16777216;
parameter    ap_ST_fsm_state26 = 59'd33554432;
parameter    ap_ST_fsm_state27 = 59'd67108864;
parameter    ap_ST_fsm_state28 = 59'd134217728;
parameter    ap_ST_fsm_state29 = 59'd268435456;
parameter    ap_ST_fsm_state30 = 59'd536870912;
parameter    ap_ST_fsm_state31 = 59'd1073741824;
parameter    ap_ST_fsm_state32 = 59'd2147483648;
parameter    ap_ST_fsm_state33 = 59'd4294967296;
parameter    ap_ST_fsm_state34 = 59'd8589934592;
parameter    ap_ST_fsm_state35 = 59'd17179869184;
parameter    ap_ST_fsm_state36 = 59'd34359738368;
parameter    ap_ST_fsm_state37 = 59'd68719476736;
parameter    ap_ST_fsm_state38 = 59'd137438953472;
parameter    ap_ST_fsm_state39 = 59'd274877906944;
parameter    ap_ST_fsm_state40 = 59'd549755813888;
parameter    ap_ST_fsm_state41 = 59'd1099511627776;
parameter    ap_ST_fsm_state42 = 59'd2199023255552;
parameter    ap_ST_fsm_state43 = 59'd4398046511104;
parameter    ap_ST_fsm_state44 = 59'd8796093022208;
parameter    ap_ST_fsm_state45 = 59'd17592186044416;
parameter    ap_ST_fsm_state46 = 59'd35184372088832;
parameter    ap_ST_fsm_state47 = 59'd70368744177664;
parameter    ap_ST_fsm_state48 = 59'd140737488355328;
parameter    ap_ST_fsm_state49 = 59'd281474976710656;
parameter    ap_ST_fsm_state50 = 59'd562949953421312;
parameter    ap_ST_fsm_state51 = 59'd1125899906842624;
parameter    ap_ST_fsm_state52 = 59'd2251799813685248;
parameter    ap_ST_fsm_state53 = 59'd4503599627370496;
parameter    ap_ST_fsm_state54 = 59'd9007199254740992;
parameter    ap_ST_fsm_state55 = 59'd18014398509481984;
parameter    ap_ST_fsm_state56 = 59'd36028797018963968;
parameter    ap_ST_fsm_state57 = 59'd72057594037927936;
parameter    ap_ST_fsm_state58 = 59'd144115188075855872;
parameter    ap_ST_fsm_state59 = 59'd288230376151711744;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] in_r_address0;
output   in_r_ce0;
input  [7:0] in_r_q0;
output  [3:0] in_r_address1;
output   in_r_ce1;
input  [7:0] in_r_q1;
output  [3:0] key_address0;
output   key_ce0;
input  [7:0] key_q0;
output  [3:0] key_address1;
output   key_ce1;
input  [7:0] key_q1;
output  [3:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [7:0] out_r_d0;
output  [3:0] out_r_address1;
output   out_r_ce1;
output   out_r_we1;
output  [7:0] out_r_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] in_r_address0;
reg in_r_ce0;
reg[3:0] in_r_address1;
reg in_r_ce1;
reg[3:0] out_r_address0;
reg out_r_ce0;
reg out_r_we0;
reg[3:0] out_r_address1;
reg out_r_ce1;
reg out_r_we1;

(* fsm_encoding = "none" *) reg   [58:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] state_q0;
reg   [7:0] reg_626;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state30;
wire   [7:0] state_q1;
reg   [7:0] reg_632;
reg   [7:0] reg_638;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state36;
reg   [7:0] reg_643;
wire   [3:0] state_addr_reg_683;
wire    ap_CS_fsm_state2;
wire   [3:0] state_addr_19_reg_688;
wire   [3:0] state_addr_20_reg_703;
wire    ap_CS_fsm_state3;
wire   [3:0] state_addr_21_reg_708;
wire   [3:0] state_addr_22_reg_723;
wire    ap_CS_fsm_state4;
wire   [3:0] state_addr_23_reg_728;
wire   [3:0] state_addr_24_reg_743;
wire    ap_CS_fsm_state5;
wire   [3:0] state_addr_25_reg_748;
wire   [3:0] state_addr_26_reg_763;
wire    ap_CS_fsm_state6;
wire   [3:0] state_addr_27_reg_768;
wire   [3:0] state_addr_28_reg_783;
wire    ap_CS_fsm_state7;
wire    grp_aes128_expand_key_hw_fu_554_ap_ready;
wire    grp_aes128_expand_key_hw_fu_554_ap_done;
wire   [3:0] state_addr_29_reg_788;
wire   [3:0] state_addr_30_reg_803;
wire    ap_CS_fsm_state8;
wire   [3:0] state_addr_31_reg_808;
wire   [3:0] state_addr_32_reg_823;
wire    ap_CS_fsm_state9;
wire    grp_aes128_extract_round_fu_563_ap_ready;
wire    grp_aes128_extract_round_fu_563_ap_done;
wire   [3:0] state_addr_33_reg_828;
wire   [9:0] tmp_19_cast_fu_662_p1;
reg   [9:0] tmp_19_cast_reg_836;
wire    ap_CS_fsm_state12;
wire   [0:0] exitcond2_fu_648_p2;
wire   [3:0] i_fu_667_p2;
reg   [3:0] i_reg_841;
reg   [7:0] column_2_reg_846;
wire    ap_CS_fsm_state24;
reg   [7:0] column_3_reg_851;
reg   [7:0] column_0_2_reg_856;
wire    ap_CS_fsm_state25;
reg   [7:0] column_1_2_reg_861;
reg   [7:0] column_2_2_reg_866;
wire    ap_CS_fsm_state26;
reg   [7:0] column_3_2_reg_871;
reg   [7:0] column_0_4_reg_876;
wire    ap_CS_fsm_state27;
reg   [7:0] column_1_4_reg_881;
reg   [7:0] column_2_4_reg_886;
wire    ap_CS_fsm_state28;
reg   [7:0] column_3_4_reg_891;
reg   [7:0] column_0_6_reg_896;
wire    ap_CS_fsm_state29;
reg   [7:0] column_1_6_reg_901;
reg   [3:0] state_address0;
reg    state_ce0;
reg    state_we0;
reg   [7:0] state_d0;
reg   [3:0] state_address1;
reg    state_ce1;
reg    state_we1;
reg   [7:0] state_d1;
reg   [3:0] round_key_address0;
reg    round_key_ce0;
reg    round_key_we0;
wire   [7:0] round_key_q0;
reg   [3:0] round_key_address1;
reg    round_key_ce1;
reg    round_key_we1;
wire   [7:0] round_key_q1;
reg   [7:0] expanded_key_address0;
reg    expanded_key_ce0;
reg    expanded_key_we0;
wire   [7:0] expanded_key_q0;
reg   [7:0] expanded_key_address1;
reg    expanded_key_ce1;
reg    expanded_key_we1;
wire   [7:0] expanded_key_q1;
wire    grp_aes128_expand_key_hw_fu_554_ap_start;
wire    grp_aes128_expand_key_hw_fu_554_ap_idle;
wire   [3:0] grp_aes128_expand_key_hw_fu_554_key_address0;
wire    grp_aes128_expand_key_hw_fu_554_key_ce0;
wire   [3:0] grp_aes128_expand_key_hw_fu_554_key_address1;
wire    grp_aes128_expand_key_hw_fu_554_key_ce1;
wire   [7:0] grp_aes128_expand_key_hw_fu_554_expanded_key_address0;
wire    grp_aes128_expand_key_hw_fu_554_expanded_key_ce0;
wire    grp_aes128_expand_key_hw_fu_554_expanded_key_we0;
wire   [7:0] grp_aes128_expand_key_hw_fu_554_expanded_key_d0;
wire   [7:0] grp_aes128_expand_key_hw_fu_554_expanded_key_address1;
wire    grp_aes128_expand_key_hw_fu_554_expanded_key_ce1;
wire    grp_aes128_expand_key_hw_fu_554_expanded_key_we1;
wire   [7:0] grp_aes128_expand_key_hw_fu_554_expanded_key_d1;
wire    grp_aes128_extract_round_fu_563_ap_start;
wire    grp_aes128_extract_round_fu_563_ap_idle;
wire   [7:0] grp_aes128_extract_round_fu_563_expanded_key_address0;
wire    grp_aes128_extract_round_fu_563_expanded_key_ce0;
wire   [7:0] grp_aes128_extract_round_fu_563_expanded_key_address1;
wire    grp_aes128_extract_round_fu_563_expanded_key_ce1;
reg   [9:0] grp_aes128_extract_round_fu_563_expanded_key_offset;
wire   [3:0] grp_aes128_extract_round_fu_563_round_key_address0;
wire    grp_aes128_extract_round_fu_563_round_key_ce0;
wire    grp_aes128_extract_round_fu_563_round_key_we0;
wire   [7:0] grp_aes128_extract_round_fu_563_round_key_d0;
wire   [3:0] grp_aes128_extract_round_fu_563_round_key_address1;
wire    grp_aes128_extract_round_fu_563_round_key_ce1;
wire    grp_aes128_extract_round_fu_563_round_key_we1;
wire   [7:0] grp_aes128_extract_round_fu_563_round_key_d1;
wire    grp_aes128_sub_bytes_hw_fu_572_ap_start;
wire    grp_aes128_sub_bytes_hw_fu_572_ap_done;
wire    grp_aes128_sub_bytes_hw_fu_572_ap_idle;
wire    grp_aes128_sub_bytes_hw_fu_572_ap_ready;
wire   [3:0] grp_aes128_sub_bytes_hw_fu_572_state_address0;
wire    grp_aes128_sub_bytes_hw_fu_572_state_ce0;
wire    grp_aes128_sub_bytes_hw_fu_572_state_we0;
wire   [7:0] grp_aes128_sub_bytes_hw_fu_572_state_d0;
wire   [3:0] grp_aes128_sub_bytes_hw_fu_572_state_address1;
wire    grp_aes128_sub_bytes_hw_fu_572_state_ce1;
wire    grp_aes128_sub_bytes_hw_fu_572_state_we1;
wire   [7:0] grp_aes128_sub_bytes_hw_fu_572_state_d1;
wire    grp_aes128_mix_column_hw_fu_579_ap_ready;
reg   [7:0] grp_aes128_mix_column_hw_fu_579_column_0_read;
reg   [7:0] grp_aes128_mix_column_hw_fu_579_column_1_read;
reg   [7:0] grp_aes128_mix_column_hw_fu_579_column_2_read;
reg   [7:0] grp_aes128_mix_column_hw_fu_579_column_3_read;
wire   [7:0] grp_aes128_mix_column_hw_fu_579_ap_return_0;
wire   [7:0] grp_aes128_mix_column_hw_fu_579_ap_return_1;
wire   [7:0] grp_aes128_mix_column_hw_fu_579_ap_return_2;
wire   [7:0] grp_aes128_mix_column_hw_fu_579_ap_return_3;
wire    grp_aes128_add_round_key_fu_587_ap_start;
wire    grp_aes128_add_round_key_fu_587_ap_done;
wire    grp_aes128_add_round_key_fu_587_ap_idle;
wire    grp_aes128_add_round_key_fu_587_ap_ready;
wire   [3:0] grp_aes128_add_round_key_fu_587_state_address0;
wire    grp_aes128_add_round_key_fu_587_state_ce0;
wire    grp_aes128_add_round_key_fu_587_state_we0;
wire   [7:0] grp_aes128_add_round_key_fu_587_state_d0;
wire   [3:0] grp_aes128_add_round_key_fu_587_state_address1;
wire    grp_aes128_add_round_key_fu_587_state_ce1;
wire    grp_aes128_add_round_key_fu_587_state_we1;
wire   [7:0] grp_aes128_add_round_key_fu_587_state_d1;
wire   [3:0] grp_aes128_add_round_key_fu_587_round_key_address0;
wire    grp_aes128_add_round_key_fu_587_round_key_ce0;
wire   [3:0] grp_aes128_add_round_key_fu_587_round_key_address1;
wire    grp_aes128_add_round_key_fu_587_round_key_ce1;
wire    grp_aes128_shift_row_hw_fu_593_ap_start;
wire    grp_aes128_shift_row_hw_fu_593_ap_done;
wire    grp_aes128_shift_row_hw_fu_593_ap_idle;
wire    grp_aes128_shift_row_hw_fu_593_ap_ready;
wire   [3:0] grp_aes128_shift_row_hw_fu_593_state_address0;
wire    grp_aes128_shift_row_hw_fu_593_state_ce0;
wire    grp_aes128_shift_row_hw_fu_593_state_we0;
wire   [7:0] grp_aes128_shift_row_hw_fu_593_state_d0;
wire   [3:0] grp_aes128_shift_row_hw_fu_593_state_address1;
wire    grp_aes128_shift_row_hw_fu_593_state_ce1;
wire    grp_aes128_shift_row_hw_fu_593_state_we1;
wire   [7:0] grp_aes128_shift_row_hw_fu_593_state_d1;
reg   [4:0] grp_aes128_shift_row_hw_fu_593_state_offset;
reg   [3:0] grp_aes128_shift_row_hw_fu_593_n;
reg   [3:0] i_1_reg_543;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state39;
reg    grp_aes128_expand_key_hw_fu_554_ap_start_reg;
reg    grp_aes128_extract_round_fu_563_ap_start_reg;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state40;
reg    grp_aes128_sub_bytes_hw_fu_572_ap_start_reg;
reg    grp_aes128_add_round_key_fu_587_ap_start_reg;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
reg    grp_aes128_shift_row_hw_fu_593_ap_start_reg;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state51;
wire   [7:0] tmp_s_fu_654_p3;
reg   [58:0] ap_NS_fsm;
reg    ap_block_state13_on_subcall_done;
reg    ap_block_state40_on_subcall_done;

// power-on initialization
initial begin
#0 ap_CS_fsm = 59'd1;
#0 grp_aes128_expand_key_hw_fu_554_ap_start_reg = 1'b0;
#0 grp_aes128_extract_round_fu_563_ap_start_reg = 1'b0;
#0 grp_aes128_sub_bytes_hw_fu_572_ap_start_reg = 1'b0;
#0 grp_aes128_add_round_key_fu_587_ap_start_reg = 1'b0;
#0 grp_aes128_shift_row_hw_fu_593_ap_start_reg = 1'b0;
end

aes128_encrypt_bldEe #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
state_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(state_address0),
    .ce0(state_ce0),
    .we0(state_we0),
    .d0(state_d0),
    .q0(state_q0),
    .address1(state_address1),
    .ce1(state_ce1),
    .we1(state_we1),
    .d1(state_d1),
    .q1(state_q1)
);

aes128_encrypt_bldEe #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
round_key_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(round_key_address0),
    .ce0(round_key_ce0),
    .we0(round_key_we0),
    .d0(grp_aes128_extract_round_fu_563_round_key_d0),
    .q0(round_key_q0),
    .address1(round_key_address1),
    .ce1(round_key_ce1),
    .we1(round_key_we1),
    .d1(grp_aes128_extract_round_fu_563_round_key_d1),
    .q1(round_key_q1)
);

aes128_encrypt_blfYi #(
    .DataWidth( 8 ),
    .AddressRange( 176 ),
    .AddressWidth( 8 ))
expanded_key_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(expanded_key_address0),
    .ce0(expanded_key_ce0),
    .we0(expanded_key_we0),
    .d0(grp_aes128_expand_key_hw_fu_554_expanded_key_d0),
    .q0(expanded_key_q0),
    .address1(expanded_key_address1),
    .ce1(expanded_key_ce1),
    .we1(expanded_key_we1),
    .d1(grp_aes128_expand_key_hw_fu_554_expanded_key_d1),
    .q1(expanded_key_q1)
);

aes128_expand_key_hw grp_aes128_expand_key_hw_fu_554(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes128_expand_key_hw_fu_554_ap_start),
    .ap_done(grp_aes128_expand_key_hw_fu_554_ap_done),
    .ap_idle(grp_aes128_expand_key_hw_fu_554_ap_idle),
    .ap_ready(grp_aes128_expand_key_hw_fu_554_ap_ready),
    .key_address0(grp_aes128_expand_key_hw_fu_554_key_address0),
    .key_ce0(grp_aes128_expand_key_hw_fu_554_key_ce0),
    .key_q0(key_q0),
    .key_address1(grp_aes128_expand_key_hw_fu_554_key_address1),
    .key_ce1(grp_aes128_expand_key_hw_fu_554_key_ce1),
    .key_q1(key_q1),
    .expanded_key_address0(grp_aes128_expand_key_hw_fu_554_expanded_key_address0),
    .expanded_key_ce0(grp_aes128_expand_key_hw_fu_554_expanded_key_ce0),
    .expanded_key_we0(grp_aes128_expand_key_hw_fu_554_expanded_key_we0),
    .expanded_key_d0(grp_aes128_expand_key_hw_fu_554_expanded_key_d0),
    .expanded_key_address1(grp_aes128_expand_key_hw_fu_554_expanded_key_address1),
    .expanded_key_ce1(grp_aes128_expand_key_hw_fu_554_expanded_key_ce1),
    .expanded_key_we1(grp_aes128_expand_key_hw_fu_554_expanded_key_we1),
    .expanded_key_d1(grp_aes128_expand_key_hw_fu_554_expanded_key_d1),
    .expanded_key_q1(expanded_key_q1)
);

aes128_extract_round grp_aes128_extract_round_fu_563(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes128_extract_round_fu_563_ap_start),
    .ap_done(grp_aes128_extract_round_fu_563_ap_done),
    .ap_idle(grp_aes128_extract_round_fu_563_ap_idle),
    .ap_ready(grp_aes128_extract_round_fu_563_ap_ready),
    .expanded_key_address0(grp_aes128_extract_round_fu_563_expanded_key_address0),
    .expanded_key_ce0(grp_aes128_extract_round_fu_563_expanded_key_ce0),
    .expanded_key_q0(expanded_key_q0),
    .expanded_key_address1(grp_aes128_extract_round_fu_563_expanded_key_address1),
    .expanded_key_ce1(grp_aes128_extract_round_fu_563_expanded_key_ce1),
    .expanded_key_q1(expanded_key_q1),
    .expanded_key_offset(grp_aes128_extract_round_fu_563_expanded_key_offset),
    .round_key_address0(grp_aes128_extract_round_fu_563_round_key_address0),
    .round_key_ce0(grp_aes128_extract_round_fu_563_round_key_ce0),
    .round_key_we0(grp_aes128_extract_round_fu_563_round_key_we0),
    .round_key_d0(grp_aes128_extract_round_fu_563_round_key_d0),
    .round_key_address1(grp_aes128_extract_round_fu_563_round_key_address1),
    .round_key_ce1(grp_aes128_extract_round_fu_563_round_key_ce1),
    .round_key_we1(grp_aes128_extract_round_fu_563_round_key_we1),
    .round_key_d1(grp_aes128_extract_round_fu_563_round_key_d1)
);

aes128_sub_bytes_hw grp_aes128_sub_bytes_hw_fu_572(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes128_sub_bytes_hw_fu_572_ap_start),
    .ap_done(grp_aes128_sub_bytes_hw_fu_572_ap_done),
    .ap_idle(grp_aes128_sub_bytes_hw_fu_572_ap_idle),
    .ap_ready(grp_aes128_sub_bytes_hw_fu_572_ap_ready),
    .state_address0(grp_aes128_sub_bytes_hw_fu_572_state_address0),
    .state_ce0(grp_aes128_sub_bytes_hw_fu_572_state_ce0),
    .state_we0(grp_aes128_sub_bytes_hw_fu_572_state_we0),
    .state_d0(grp_aes128_sub_bytes_hw_fu_572_state_d0),
    .state_q0(state_q0),
    .state_address1(grp_aes128_sub_bytes_hw_fu_572_state_address1),
    .state_ce1(grp_aes128_sub_bytes_hw_fu_572_state_ce1),
    .state_we1(grp_aes128_sub_bytes_hw_fu_572_state_we1),
    .state_d1(grp_aes128_sub_bytes_hw_fu_572_state_d1),
    .state_q1(state_q1)
);

aes128_mix_column_hw grp_aes128_mix_column_hw_fu_579(
    .ap_ready(grp_aes128_mix_column_hw_fu_579_ap_ready),
    .column_0_read(grp_aes128_mix_column_hw_fu_579_column_0_read),
    .column_1_read(grp_aes128_mix_column_hw_fu_579_column_1_read),
    .column_2_read(grp_aes128_mix_column_hw_fu_579_column_2_read),
    .column_3_read(grp_aes128_mix_column_hw_fu_579_column_3_read),
    .ap_return_0(grp_aes128_mix_column_hw_fu_579_ap_return_0),
    .ap_return_1(grp_aes128_mix_column_hw_fu_579_ap_return_1),
    .ap_return_2(grp_aes128_mix_column_hw_fu_579_ap_return_2),
    .ap_return_3(grp_aes128_mix_column_hw_fu_579_ap_return_3)
);

aes128_add_round_key grp_aes128_add_round_key_fu_587(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes128_add_round_key_fu_587_ap_start),
    .ap_done(grp_aes128_add_round_key_fu_587_ap_done),
    .ap_idle(grp_aes128_add_round_key_fu_587_ap_idle),
    .ap_ready(grp_aes128_add_round_key_fu_587_ap_ready),
    .state_address0(grp_aes128_add_round_key_fu_587_state_address0),
    .state_ce0(grp_aes128_add_round_key_fu_587_state_ce0),
    .state_we0(grp_aes128_add_round_key_fu_587_state_we0),
    .state_d0(grp_aes128_add_round_key_fu_587_state_d0),
    .state_q0(state_q0),
    .state_address1(grp_aes128_add_round_key_fu_587_state_address1),
    .state_ce1(grp_aes128_add_round_key_fu_587_state_ce1),
    .state_we1(grp_aes128_add_round_key_fu_587_state_we1),
    .state_d1(grp_aes128_add_round_key_fu_587_state_d1),
    .state_q1(state_q1),
    .round_key_address0(grp_aes128_add_round_key_fu_587_round_key_address0),
    .round_key_ce0(grp_aes128_add_round_key_fu_587_round_key_ce0),
    .round_key_q0(round_key_q0),
    .round_key_address1(grp_aes128_add_round_key_fu_587_round_key_address1),
    .round_key_ce1(grp_aes128_add_round_key_fu_587_round_key_ce1),
    .round_key_q1(round_key_q1)
);

aes128_shift_row_hw grp_aes128_shift_row_hw_fu_593(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes128_shift_row_hw_fu_593_ap_start),
    .ap_done(grp_aes128_shift_row_hw_fu_593_ap_done),
    .ap_idle(grp_aes128_shift_row_hw_fu_593_ap_idle),
    .ap_ready(grp_aes128_shift_row_hw_fu_593_ap_ready),
    .state_address0(grp_aes128_shift_row_hw_fu_593_state_address0),
    .state_ce0(grp_aes128_shift_row_hw_fu_593_state_ce0),
    .state_we0(grp_aes128_shift_row_hw_fu_593_state_we0),
    .state_d0(grp_aes128_shift_row_hw_fu_593_state_d0),
    .state_q0(state_q0),
    .state_address1(grp_aes128_shift_row_hw_fu_593_state_address1),
    .state_ce1(grp_aes128_shift_row_hw_fu_593_state_ce1),
    .state_we1(grp_aes128_shift_row_hw_fu_593_state_we1),
    .state_d1(grp_aes128_shift_row_hw_fu_593_state_d1),
    .state_q1(state_q1),
    .state_offset(grp_aes128_shift_row_hw_fu_593_state_offset),
    .n(grp_aes128_shift_row_hw_fu_593_n)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_aes128_add_round_key_fu_587_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state10))) begin
            grp_aes128_add_round_key_fu_587_ap_start_reg <= 1'b1;
        end else if ((grp_aes128_add_round_key_fu_587_ap_ready == 1'b1)) begin
            grp_aes128_add_round_key_fu_587_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_aes128_expand_key_hw_fu_554_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_aes128_expand_key_hw_fu_554_ap_start_reg <= 1'b1;
        end else if ((grp_aes128_expand_key_hw_fu_554_ap_ready == 1'b1)) begin
            grp_aes128_expand_key_hw_fu_554_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_aes128_extract_round_fu_563_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state8) | ((exitcond2_fu_648_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12)) | ((exitcond2_fu_648_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12)))) begin
            grp_aes128_extract_round_fu_563_ap_start_reg <= 1'b1;
        end else if ((grp_aes128_extract_round_fu_563_ap_ready == 1'b1)) begin
            grp_aes128_extract_round_fu_563_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_aes128_shift_row_hw_fu_593_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14))) begin
            grp_aes128_shift_row_hw_fu_593_ap_start_reg <= 1'b1;
        end else if ((grp_aes128_shift_row_hw_fu_593_ap_ready == 1'b1)) begin
            grp_aes128_shift_row_hw_fu_593_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_aes128_sub_bytes_hw_fu_572_ap_start_reg <= 1'b0;
    end else begin
        if ((((exitcond2_fu_648_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12)) | ((exitcond2_fu_648_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12)))) begin
            grp_aes128_sub_bytes_hw_fu_572_ap_start_reg <= 1'b1;
        end else if ((grp_aes128_sub_bytes_hw_fu_572_ap_ready == 1'b1)) begin
            grp_aes128_sub_bytes_hw_fu_572_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((grp_aes128_add_round_key_fu_587_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state39)) begin
            i_1_reg_543 <= i_reg_841;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            i_1_reg_543 <= 4'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        column_0_2_reg_856 <= state_q0;
        column_1_2_reg_861 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        column_0_4_reg_876 <= state_q0;
        column_1_4_reg_881 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        column_0_6_reg_896 <= state_q0;
        column_1_6_reg_901 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        column_2_2_reg_866 <= state_q0;
        column_3_2_reg_871 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        column_2_4_reg_886 <= state_q0;
        column_3_4_reg_891 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        column_2_reg_846 <= state_q0;
        column_3_reg_851 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_648_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        i_reg_841 <= i_fu_667_p2;
        tmp_19_cast_reg_836[7 : 4] <= tmp_19_cast_fu_662_p1[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state23))) begin
        reg_626 <= state_q0;
        reg_632 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30))) begin
        reg_638 <= grp_aes128_mix_column_hw_fu_579_ap_return_2;
        reg_643 <= grp_aes128_mix_column_hw_fu_579_ap_return_3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        expanded_key_address0 = grp_aes128_extract_round_fu_563_expanded_key_address0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        expanded_key_address0 = grp_aes128_expand_key_hw_fu_554_expanded_key_address0;
    end else begin
        expanded_key_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        expanded_key_address1 = grp_aes128_extract_round_fu_563_expanded_key_address1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        expanded_key_address1 = grp_aes128_expand_key_hw_fu_554_expanded_key_address1;
    end else begin
        expanded_key_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        expanded_key_ce0 = grp_aes128_extract_round_fu_563_expanded_key_ce0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        expanded_key_ce0 = grp_aes128_expand_key_hw_fu_554_expanded_key_ce0;
    end else begin
        expanded_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        expanded_key_ce1 = grp_aes128_extract_round_fu_563_expanded_key_ce1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        expanded_key_ce1 = grp_aes128_expand_key_hw_fu_554_expanded_key_ce1;
    end else begin
        expanded_key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        expanded_key_we0 = grp_aes128_expand_key_hw_fu_554_expanded_key_we0;
    end else begin
        expanded_key_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        expanded_key_we1 = grp_aes128_expand_key_hw_fu_554_expanded_key_we1;
    end else begin
        expanded_key_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_aes128_extract_round_fu_563_expanded_key_offset = 10'd160;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_aes128_extract_round_fu_563_expanded_key_offset = tmp_19_cast_reg_836;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_aes128_extract_round_fu_563_expanded_key_offset = 10'd0;
    end else begin
        grp_aes128_extract_round_fu_563_expanded_key_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_aes128_mix_column_hw_fu_579_column_0_read = column_0_6_reg_896;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_aes128_mix_column_hw_fu_579_column_0_read = column_0_4_reg_876;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_aes128_mix_column_hw_fu_579_column_0_read = column_0_2_reg_856;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_aes128_mix_column_hw_fu_579_column_0_read = reg_626;
    end else begin
        grp_aes128_mix_column_hw_fu_579_column_0_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_aes128_mix_column_hw_fu_579_column_1_read = column_1_6_reg_901;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_aes128_mix_column_hw_fu_579_column_1_read = column_1_4_reg_881;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_aes128_mix_column_hw_fu_579_column_1_read = column_1_2_reg_861;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_aes128_mix_column_hw_fu_579_column_1_read = reg_632;
    end else begin
        grp_aes128_mix_column_hw_fu_579_column_1_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_aes128_mix_column_hw_fu_579_column_2_read = reg_626;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_aes128_mix_column_hw_fu_579_column_2_read = column_2_4_reg_886;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_aes128_mix_column_hw_fu_579_column_2_read = column_2_2_reg_866;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_aes128_mix_column_hw_fu_579_column_2_read = column_2_reg_846;
    end else begin
        grp_aes128_mix_column_hw_fu_579_column_2_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_aes128_mix_column_hw_fu_579_column_3_read = reg_632;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_aes128_mix_column_hw_fu_579_column_3_read = column_3_4_reg_891;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_aes128_mix_column_hw_fu_579_column_3_read = column_3_2_reg_871;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_aes128_mix_column_hw_fu_579_column_3_read = column_3_reg_851;
    end else begin
        grp_aes128_mix_column_hw_fu_579_column_3_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_aes128_shift_row_hw_fu_593_n = 4'd3;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_aes128_shift_row_hw_fu_593_n = 4'd2;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state17))) begin
        grp_aes128_shift_row_hw_fu_593_n = 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_aes128_shift_row_hw_fu_593_n = 4'd0;
    end else begin
        grp_aes128_shift_row_hw_fu_593_n = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_aes128_shift_row_hw_fu_593_state_offset = 5'd12;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_aes128_shift_row_hw_fu_593_state_offset = 5'd8;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state17))) begin
        grp_aes128_shift_row_hw_fu_593_state_offset = 5'd4;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_aes128_shift_row_hw_fu_593_state_offset = 5'd0;
    end else begin
        grp_aes128_shift_row_hw_fu_593_state_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        in_r_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        in_r_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        in_r_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        in_r_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        in_r_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        in_r_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        in_r_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        in_r_address0 = 64'd0;
    end else begin
        in_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        in_r_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        in_r_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        in_r_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        in_r_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        in_r_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        in_r_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        in_r_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        in_r_address1 = 64'd1;
    end else begin
        in_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((grp_aes128_expand_key_hw_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7)))) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((grp_aes128_expand_key_hw_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7)))) begin
        in_r_ce1 = 1'b1;
    end else begin
        in_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        out_r_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        out_r_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        out_r_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        out_r_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        out_r_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        out_r_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        out_r_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        out_r_address0 = 64'd0;
    end else begin
        out_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        out_r_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        out_r_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        out_r_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        out_r_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        out_r_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        out_r_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        out_r_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        out_r_address1 = 64'd1;
    end else begin
        out_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52))) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52))) begin
        out_r_ce1 = 1'b1;
    end else begin
        out_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52))) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52))) begin
        out_r_we1 = 1'b1;
    end else begin
        out_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state11))) begin
        round_key_address0 = grp_aes128_add_round_key_fu_587_round_key_address0;
    end else if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        round_key_address0 = grp_aes128_extract_round_fu_563_round_key_address0;
    end else begin
        round_key_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state11))) begin
        round_key_address1 = grp_aes128_add_round_key_fu_587_round_key_address1;
    end else if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        round_key_address1 = grp_aes128_extract_round_fu_563_round_key_address1;
    end else begin
        round_key_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state11))) begin
        round_key_ce0 = grp_aes128_add_round_key_fu_587_round_key_ce0;
    end else if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        round_key_ce0 = grp_aes128_extract_round_fu_563_round_key_ce0;
    end else begin
        round_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state11))) begin
        round_key_ce1 = grp_aes128_add_round_key_fu_587_round_key_ce1;
    end else if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        round_key_ce1 = grp_aes128_extract_round_fu_563_round_key_ce1;
    end else begin
        round_key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        round_key_we0 = grp_aes128_extract_round_fu_563_round_key_we0;
    end else begin
        round_key_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        round_key_we1 = grp_aes128_extract_round_fu_563_round_key_we1;
    end else begin
        round_key_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state29))) begin
        state_address0 = state_addr_32_reg_823;
    end else if (((1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state36))) begin
        state_address0 = state_addr_30_reg_803;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state27))) begin
        state_address0 = state_addr_28_reg_783;
    end else if (((1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state34))) begin
        state_address0 = state_addr_26_reg_763;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state25))) begin
        state_address0 = state_addr_24_reg_743;
    end else if (((1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state32))) begin
        state_address0 = state_addr_22_reg_723;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state23))) begin
        state_address0 = state_addr_20_reg_703;
    end else if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state30))) begin
        state_address0 = state_addr_reg_683;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address0 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15))) begin
        state_address0 = grp_aes128_shift_row_hw_fu_593_state_address0;
    end else if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state11))) begin
        state_address0 = grp_aes128_add_round_key_fu_587_state_address0;
    end else if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state13))) begin
        state_address0 = grp_aes128_sub_bytes_hw_fu_572_state_address0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state29))) begin
        state_address1 = state_addr_33_reg_828;
    end else if (((1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state36))) begin
        state_address1 = state_addr_31_reg_808;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state27))) begin
        state_address1 = state_addr_29_reg_788;
    end else if (((1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state34))) begin
        state_address1 = state_addr_27_reg_768;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state25))) begin
        state_address1 = state_addr_25_reg_748;
    end else if (((1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state32))) begin
        state_address1 = state_addr_23_reg_728;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state23))) begin
        state_address1 = state_addr_21_reg_708;
    end else if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state30))) begin
        state_address1 = state_addr_19_reg_688;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address1 = 64'd4;
    end else if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15))) begin
        state_address1 = grp_aes128_shift_row_hw_fu_593_state_address1;
    end else if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state11))) begin
        state_address1 = grp_aes128_add_round_key_fu_587_state_address1;
    end else if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state13))) begin
        state_address1 = grp_aes128_sub_bytes_hw_fu_572_state_address1;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state23) | ((grp_aes128_extract_round_fu_563_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((grp_aes128_expand_key_hw_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7)))) begin
        state_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15))) begin
        state_ce0 = grp_aes128_shift_row_hw_fu_593_state_ce0;
    end else if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state11))) begin
        state_ce0 = grp_aes128_add_round_key_fu_587_state_ce0;
    end else if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state13))) begin
        state_ce0 = grp_aes128_sub_bytes_hw_fu_572_state_ce0;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state23) | ((grp_aes128_extract_round_fu_563_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((grp_aes128_expand_key_hw_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7)))) begin
        state_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15))) begin
        state_ce1 = grp_aes128_shift_row_hw_fu_593_state_ce1;
    end else if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state11))) begin
        state_ce1 = grp_aes128_add_round_key_fu_587_state_ce1;
    end else if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state13))) begin
        state_ce1 = grp_aes128_sub_bytes_hw_fu_572_state_ce1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31))) begin
        state_d0 = reg_638;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30))) begin
        state_d0 = grp_aes128_mix_column_hw_fu_579_ap_return_0;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        state_d0 = in_r_q0;
    end else if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15))) begin
        state_d0 = grp_aes128_shift_row_hw_fu_593_state_d0;
    end else if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state11))) begin
        state_d0 = grp_aes128_add_round_key_fu_587_state_d0;
    end else if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state13))) begin
        state_d0 = grp_aes128_sub_bytes_hw_fu_572_state_d0;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31))) begin
        state_d1 = reg_643;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30))) begin
        state_d1 = grp_aes128_mix_column_hw_fu_579_ap_return_1;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        state_d1 = in_r_q1;
    end else if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15))) begin
        state_d1 = grp_aes128_shift_row_hw_fu_593_state_d1;
    end else if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state11))) begin
        state_d1 = grp_aes128_add_round_key_fu_587_state_d1;
    end else if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state13))) begin
        state_d1 = grp_aes128_sub_bytes_hw_fu_572_state_d1;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | ((grp_aes128_extract_round_fu_563_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((grp_aes128_expand_key_hw_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7)))) begin
        state_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15))) begin
        state_we0 = grp_aes128_shift_row_hw_fu_593_state_we0;
    end else if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state11))) begin
        state_we0 = grp_aes128_add_round_key_fu_587_state_we0;
    end else if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state13))) begin
        state_we0 = grp_aes128_sub_bytes_hw_fu_572_state_we0;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | ((grp_aes128_extract_round_fu_563_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((grp_aes128_expand_key_hw_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7)))) begin
        state_we1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15))) begin
        state_we1 = grp_aes128_shift_row_hw_fu_593_state_we1;
    end else if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state11))) begin
        state_we1 = grp_aes128_add_round_key_fu_587_state_we1;
    end else if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state13))) begin
        state_we1 = grp_aes128_sub_bytes_hw_fu_572_state_we1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((grp_aes128_expand_key_hw_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((grp_aes128_extract_round_fu_563_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((grp_aes128_add_round_key_fu_587_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((exitcond2_fu_648_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b0 == ap_block_state13_on_subcall_done) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((grp_aes128_shift_row_hw_fu_593_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((grp_aes128_shift_row_hw_fu_593_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((grp_aes128_shift_row_hw_fu_593_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((grp_aes128_shift_row_hw_fu_593_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((grp_aes128_add_round_key_fu_587_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((1'b0 == ap_block_state40_on_subcall_done) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((grp_aes128_shift_row_hw_fu_593_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (((grp_aes128_shift_row_hw_fu_593_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            if (((grp_aes128_shift_row_hw_fu_593_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            if (((grp_aes128_shift_row_hw_fu_593_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if (((grp_aes128_add_round_key_fu_587_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state13_on_subcall_done = ((grp_aes128_sub_bytes_hw_fu_572_ap_done == 1'b0) | (grp_aes128_extract_round_fu_563_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state40_on_subcall_done = ((grp_aes128_sub_bytes_hw_fu_572_ap_done == 1'b0) | (grp_aes128_extract_round_fu_563_ap_done == 1'b0));
end

assign exitcond2_fu_648_p2 = ((i_1_reg_543 == 4'd10) ? 1'b1 : 1'b0);

assign grp_aes128_add_round_key_fu_587_ap_start = grp_aes128_add_round_key_fu_587_ap_start_reg;

assign grp_aes128_expand_key_hw_fu_554_ap_start = grp_aes128_expand_key_hw_fu_554_ap_start_reg;

assign grp_aes128_extract_round_fu_563_ap_start = grp_aes128_extract_round_fu_563_ap_start_reg;

assign grp_aes128_shift_row_hw_fu_593_ap_start = grp_aes128_shift_row_hw_fu_593_ap_start_reg;

assign grp_aes128_sub_bytes_hw_fu_572_ap_start = grp_aes128_sub_bytes_hw_fu_572_ap_start_reg;

assign i_fu_667_p2 = (i_1_reg_543 + 4'd1);

assign key_address0 = grp_aes128_expand_key_hw_fu_554_key_address0;

assign key_address1 = grp_aes128_expand_key_hw_fu_554_key_address1;

assign key_ce0 = grp_aes128_expand_key_hw_fu_554_key_ce0;

assign key_ce1 = grp_aes128_expand_key_hw_fu_554_key_ce1;

assign out_r_d0 = state_q0;

assign out_r_d1 = state_q1;

assign state_addr_19_reg_688 = 64'd4;

assign state_addr_20_reg_703 = 64'd8;

assign state_addr_21_reg_708 = 64'd12;

assign state_addr_22_reg_723 = 64'd1;

assign state_addr_23_reg_728 = 64'd5;

assign state_addr_24_reg_743 = 64'd9;

assign state_addr_25_reg_748 = 64'd13;

assign state_addr_26_reg_763 = 64'd2;

assign state_addr_27_reg_768 = 64'd6;

assign state_addr_28_reg_783 = 64'd10;

assign state_addr_29_reg_788 = 64'd14;

assign state_addr_30_reg_803 = 64'd3;

assign state_addr_31_reg_808 = 64'd7;

assign state_addr_32_reg_823 = 64'd11;

assign state_addr_33_reg_828 = 64'd15;

assign state_addr_reg_683 = 64'd0;

assign tmp_19_cast_fu_662_p1 = tmp_s_fu_654_p3;

assign tmp_s_fu_654_p3 = {{i_1_reg_543}, {4'd0}};

always @ (posedge ap_clk) begin
    tmp_19_cast_reg_836[3:0] <= 4'b0000;
    tmp_19_cast_reg_836[9:8] <= 2'b00;
end

endmodule //aes128_encrypt_block_hw
