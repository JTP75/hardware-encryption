// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aes128_shift_row_hw.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aes128_shift_row_hw::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aes128_shift_row_hw::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> aes128_shift_row_hw::ap_ST_fsm_state1 = "1";
const sc_lv<5> aes128_shift_row_hw::ap_ST_fsm_state2 = "10";
const sc_lv<5> aes128_shift_row_hw::ap_ST_fsm_state3 = "100";
const sc_lv<5> aes128_shift_row_hw::ap_ST_fsm_state4 = "1000";
const sc_lv<5> aes128_shift_row_hw::ap_ST_fsm_state5 = "10000";
const sc_lv<32> aes128_shift_row_hw::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> aes128_shift_row_hw::ap_const_lv32_2 = "10";
const sc_lv<32> aes128_shift_row_hw::ap_const_lv32_3 = "11";
const sc_lv<32> aes128_shift_row_hw::ap_const_lv32_1 = "1";
const sc_lv<2> aes128_shift_row_hw::ap_const_lv2_0 = "00";
const sc_lv<32> aes128_shift_row_hw::ap_const_lv32_4 = "100";
const sc_lv<4> aes128_shift_row_hw::ap_const_lv4_3 = "11";
const sc_lv<4> aes128_shift_row_hw::ap_const_lv4_1 = "1";
const sc_lv<4> aes128_shift_row_hw::ap_const_lv4_2 = "10";
const sc_lv<2> aes128_shift_row_hw::ap_const_lv2_1 = "1";
const sc_lv<1> aes128_shift_row_hw::ap_const_lv1_1 = "1";
const bool aes128_shift_row_hw::ap_const_boolean_1 = true;

aes128_shift_row_hw::aes128_shift_row_hw(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_142_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_142_p2 );

    SC_METHOD(thread_exitcond1_fu_142_p2);
    sensitive << ( tmp_4_reg_158 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_cast_fu_138_p1 );

    SC_METHOD(thread_i_1_fu_147_p2);
    sensitive << ( i_reg_76 );

    SC_METHOD(thread_i_cast_fu_138_p1);
    sensitive << ( i_reg_76 );

    SC_METHOD(thread_state_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( state_addr_reg_153 );
    sensitive << ( state_addr_18_reg_173 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( state_addr_16_reg_163 );
    sensitive << ( state_addr_17_reg_168 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_d0);
    sensitive << ( reg_87 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_d1);
    sensitive << ( state_q0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_reg_186 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_offset_cast3_fu_92_p1);
    sensitive << ( state_offset );

    SC_METHOD(thread_state_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_we1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sum2_1_cast_fu_133_p1);
    sensitive << ( sum2_1_fu_127_p2 );

    SC_METHOD(thread_sum2_1_fu_127_p2);
    sensitive << ( tmp_5_fu_101_p1 );

    SC_METHOD(thread_sum2_cast_fu_122_p1);
    sensitive << ( sum2_fu_116_p2 );

    SC_METHOD(thread_sum2_fu_116_p2);
    sensitive << ( tmp_5_fu_101_p1 );

    SC_METHOD(thread_sum_cast_fu_111_p1);
    sensitive << ( sum_fu_105_p2 );

    SC_METHOD(thread_sum_fu_105_p2);
    sensitive << ( tmp_5_fu_101_p1 );

    SC_METHOD(thread_tmp_4_fu_97_p1);
    sensitive << ( n );

    SC_METHOD(thread_tmp_5_fu_101_p1);
    sensitive << ( state_offset );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_142_p2 );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aes128_shift_row_hw_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_address0, "(port)state_address0");
    sc_trace(mVcdFile, state_ce0, "(port)state_ce0");
    sc_trace(mVcdFile, state_we0, "(port)state_we0");
    sc_trace(mVcdFile, state_d0, "(port)state_d0");
    sc_trace(mVcdFile, state_q0, "(port)state_q0");
    sc_trace(mVcdFile, state_address1, "(port)state_address1");
    sc_trace(mVcdFile, state_ce1, "(port)state_ce1");
    sc_trace(mVcdFile, state_we1, "(port)state_we1");
    sc_trace(mVcdFile, state_d1, "(port)state_d1");
    sc_trace(mVcdFile, state_q1, "(port)state_q1");
    sc_trace(mVcdFile, state_offset, "(port)state_offset");
    sc_trace(mVcdFile, n, "(port)n");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_87, "reg_87");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, state_addr_reg_153, "state_addr_reg_153");
    sc_trace(mVcdFile, tmp_4_fu_97_p1, "tmp_4_fu_97_p1");
    sc_trace(mVcdFile, tmp_4_reg_158, "tmp_4_reg_158");
    sc_trace(mVcdFile, state_addr_16_reg_163, "state_addr_16_reg_163");
    sc_trace(mVcdFile, state_addr_17_reg_168, "state_addr_17_reg_168");
    sc_trace(mVcdFile, state_addr_18_reg_173, "state_addr_18_reg_173");
    sc_trace(mVcdFile, i_1_fu_147_p2, "i_1_fu_147_p2");
    sc_trace(mVcdFile, i_1_reg_181, "i_1_reg_181");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_reg_186, "tmp_reg_186");
    sc_trace(mVcdFile, i_reg_76, "i_reg_76");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, state_offset_cast3_fu_92_p1, "state_offset_cast3_fu_92_p1");
    sc_trace(mVcdFile, sum_cast_fu_111_p1, "sum_cast_fu_111_p1");
    sc_trace(mVcdFile, sum2_cast_fu_122_p1, "sum2_cast_fu_122_p1");
    sc_trace(mVcdFile, sum2_1_cast_fu_133_p1, "sum2_1_cast_fu_133_p1");
    sc_trace(mVcdFile, tmp_5_fu_101_p1, "tmp_5_fu_101_p1");
    sc_trace(mVcdFile, sum_fu_105_p2, "sum_fu_105_p2");
    sc_trace(mVcdFile, sum2_fu_116_p2, "sum2_fu_116_p2");
    sc_trace(mVcdFile, sum2_1_fu_127_p2, "sum2_1_fu_127_p2");
    sc_trace(mVcdFile, i_cast_fu_138_p1, "i_cast_fu_138_p1");
    sc_trace(mVcdFile, exitcond1_fu_142_p2, "exitcond1_fu_142_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

aes128_shift_row_hw::~aes128_shift_row_hw() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void aes128_shift_row_hw::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_reg_76 = i_1_reg_181.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_76 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_181 = i_1_fu_147_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        reg_87 = state_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        state_addr_16_reg_163 =  (sc_lv<4>) (sum_cast_fu_111_p1.read());
        state_addr_17_reg_168 =  (sc_lv<4>) (sum2_cast_fu_122_p1.read());
        state_addr_18_reg_173 =  (sc_lv<4>) (sum2_1_cast_fu_133_p1.read());
        state_addr_reg_153 =  (sc_lv<4>) (state_offset_cast3_fu_92_p1.read());
        tmp_4_reg_158 = tmp_4_fu_97_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_reg_186 = state_q0.read();
    }
}

void aes128_shift_row_hw::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void aes128_shift_row_hw::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void aes128_shift_row_hw::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void aes128_shift_row_hw::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void aes128_shift_row_hw::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void aes128_shift_row_hw::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(exitcond1_fu_142_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aes128_shift_row_hw::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aes128_shift_row_hw::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_142_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aes128_shift_row_hw::thread_exitcond1_fu_142_p2() {
    exitcond1_fu_142_p2 = (!i_cast_fu_138_p1.read().is_01() || !tmp_4_reg_158.read().is_01())? sc_lv<1>(): sc_lv<1>(i_cast_fu_138_p1.read() == tmp_4_reg_158.read());
}

void aes128_shift_row_hw::thread_i_1_fu_147_p2() {
    i_1_fu_147_p2 = (!i_reg_76.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i_reg_76.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void aes128_shift_row_hw::thread_i_cast_fu_138_p1() {
    i_cast_fu_138_p1 = esl_zext<3,2>(i_reg_76.read());
}

void aes128_shift_row_hw::thread_state_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        state_address0 = state_addr_18_reg_173.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        state_address0 = state_addr_reg_153.read();
    } else {
        state_address0 = "XXXX";
    }
}

void aes128_shift_row_hw::thread_state_address1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        state_address1 = state_addr_16_reg_163.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        state_address1 = state_addr_17_reg_168.read();
    } else {
        state_address1 = "XXXX";
    }
}

void aes128_shift_row_hw::thread_state_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        state_ce0 = ap_const_logic_1;
    } else {
        state_ce0 = ap_const_logic_0;
    }
}

void aes128_shift_row_hw::thread_state_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        state_ce1 = ap_const_logic_1;
    } else {
        state_ce1 = ap_const_logic_0;
    }
}

void aes128_shift_row_hw::thread_state_d0() {
    state_d0 = reg_87.read();
}

void aes128_shift_row_hw::thread_state_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_d1 = tmp_reg_186.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_d1 = state_q0.read();
    } else {
        state_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes128_shift_row_hw::thread_state_offset_cast3_fu_92_p1() {
    state_offset_cast3_fu_92_p1 = esl_zext<64,5>(state_offset.read());
}

void aes128_shift_row_hw::thread_state_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        state_we0 = ap_const_logic_1;
    } else {
        state_we0 = ap_const_logic_0;
    }
}

void aes128_shift_row_hw::thread_state_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        state_we1 = ap_const_logic_1;
    } else {
        state_we1 = ap_const_logic_0;
    }
}

void aes128_shift_row_hw::thread_sum2_1_cast_fu_133_p1() {
    sum2_1_cast_fu_133_p1 = esl_zext<64,4>(sum2_1_fu_127_p2.read());
}

void aes128_shift_row_hw::thread_sum2_1_fu_127_p2() {
    sum2_1_fu_127_p2 = (!ap_const_lv4_2.is_01() || !tmp_5_fu_101_p1.read().is_01())? sc_lv<4>(): (sc_biguint<4>(ap_const_lv4_2) + sc_biguint<4>(tmp_5_fu_101_p1.read()));
}

void aes128_shift_row_hw::thread_sum2_cast_fu_122_p1() {
    sum2_cast_fu_122_p1 = esl_zext<64,4>(sum2_fu_116_p2.read());
}

void aes128_shift_row_hw::thread_sum2_fu_116_p2() {
    sum2_fu_116_p2 = (!ap_const_lv4_1.is_01() || !tmp_5_fu_101_p1.read().is_01())? sc_lv<4>(): (sc_biguint<4>(ap_const_lv4_1) + sc_biguint<4>(tmp_5_fu_101_p1.read()));
}

void aes128_shift_row_hw::thread_sum_cast_fu_111_p1() {
    sum_cast_fu_111_p1 = esl_zext<64,4>(sum_fu_105_p2.read());
}

void aes128_shift_row_hw::thread_sum_fu_105_p2() {
    sum_fu_105_p2 = (!ap_const_lv4_3.is_01() || !tmp_5_fu_101_p1.read().is_01())? sc_lv<4>(): (sc_biguint<4>(ap_const_lv4_3) + sc_biguint<4>(tmp_5_fu_101_p1.read()));
}

void aes128_shift_row_hw::thread_tmp_4_fu_97_p1() {
    tmp_4_fu_97_p1 = n.read().range(3-1, 0);
}

void aes128_shift_row_hw::thread_tmp_5_fu_101_p1() {
    tmp_5_fu_101_p1 = state_offset.read().range(4-1, 0);
}

void aes128_shift_row_hw::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_142_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

}

