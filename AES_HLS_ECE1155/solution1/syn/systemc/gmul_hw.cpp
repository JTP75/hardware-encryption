// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "gmul_hw.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic gmul_hw::ap_const_logic_1 = sc_dt::Log_1;
const bool gmul_hw::ap_const_boolean_1 = true;
const sc_lv<8> gmul_hw::ap_const_lv8_0 = "00000000";
const sc_lv<32> gmul_hw::ap_const_lv32_7 = "111";
const sc_lv<8> gmul_hw::ap_const_lv8_1 = "1";
const sc_lv<8> gmul_hw::ap_const_lv8_1B = "11011";
const sc_lv<32> gmul_hw::ap_const_lv32_1 = "1";
const sc_logic gmul_hw::ap_const_logic_0 = sc_dt::Log_0;

gmul_hw::gmul_hw(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_a_assign_fu_60_p2);
    sensitive << ( tmp_2_fu_54_p2 );

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( tmp_5_fu_38_p3 );
    sensitive << ( tmp_5_1_fu_82_p3 );

    SC_METHOD(thread_p_1_fu_66_p3);
    sensitive << ( tmp_2_fu_54_p2 );
    sensitive << ( tmp_1_fu_46_p3 );
    sensitive << ( a_assign_fu_60_p2 );

    SC_METHOD(thread_tmp_1_fu_46_p3);
    sensitive << ( a );

    SC_METHOD(thread_tmp_2_fu_54_p2);
    sensitive << ( a );

    SC_METHOD(thread_tmp_3_fu_74_p3);
    sensitive << ( b );

    SC_METHOD(thread_tmp_5_1_fu_82_p3);
    sensitive << ( tmp_3_fu_74_p3 );
    sensitive << ( p_1_fu_66_p3 );

    SC_METHOD(thread_tmp_5_fu_38_p3);
    sensitive << ( a );
    sensitive << ( tmp_fu_34_p1 );

    SC_METHOD(thread_tmp_fu_34_p1);
    sensitive << ( b );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "gmul_hw_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a, "(port)a");
    sc_trace(mVcdFile, b, "(port)b");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_fu_34_p1, "tmp_fu_34_p1");
    sc_trace(mVcdFile, tmp_2_fu_54_p2, "tmp_2_fu_54_p2");
    sc_trace(mVcdFile, tmp_1_fu_46_p3, "tmp_1_fu_46_p3");
    sc_trace(mVcdFile, a_assign_fu_60_p2, "a_assign_fu_60_p2");
    sc_trace(mVcdFile, tmp_3_fu_74_p3, "tmp_3_fu_74_p3");
    sc_trace(mVcdFile, p_1_fu_66_p3, "p_1_fu_66_p3");
    sc_trace(mVcdFile, tmp_5_fu_38_p3, "tmp_5_fu_38_p3");
    sc_trace(mVcdFile, tmp_5_1_fu_82_p3, "tmp_5_1_fu_82_p3");
#endif

    }
}

gmul_hw::~gmul_hw() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void gmul_hw::thread_a_assign_fu_60_p2() {
    a_assign_fu_60_p2 = (tmp_2_fu_54_p2.read() ^ ap_const_lv8_1B);
}

void gmul_hw::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void gmul_hw::thread_ap_return() {
    ap_return = (tmp_5_fu_38_p3.read() ^ tmp_5_1_fu_82_p3.read());
}

void gmul_hw::thread_p_1_fu_66_p3() {
    p_1_fu_66_p3 = (!tmp_1_fu_46_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_1_fu_46_p3.read()[0].to_bool())? a_assign_fu_60_p2.read(): tmp_2_fu_54_p2.read());
}

void gmul_hw::thread_tmp_1_fu_46_p3() {
    tmp_1_fu_46_p3 = a.read().range(7, 7);
}

void gmul_hw::thread_tmp_2_fu_54_p2() {
    tmp_2_fu_54_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): a.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void gmul_hw::thread_tmp_3_fu_74_p3() {
    tmp_3_fu_74_p3 = b.read().range(1, 1);
}

void gmul_hw::thread_tmp_5_1_fu_82_p3() {
    tmp_5_1_fu_82_p3 = (!tmp_3_fu_74_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_3_fu_74_p3.read()[0].to_bool())? p_1_fu_66_p3.read(): ap_const_lv8_0);
}

void gmul_hw::thread_tmp_5_fu_38_p3() {
    tmp_5_fu_38_p3 = (!tmp_fu_34_p1.read()[0].is_01())? sc_lv<8>(): ((tmp_fu_34_p1.read()[0].to_bool())? a.read(): ap_const_lv8_0);
}

void gmul_hw::thread_tmp_fu_34_p1() {
    tmp_fu_34_p1 = b.read().range(1-1, 0);
}

}

