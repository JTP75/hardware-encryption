// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aes128_add_round_key.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aes128_add_round_key::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aes128_add_round_key::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> aes128_add_round_key::ap_ST_fsm_state1 = "1";
const sc_lv<3> aes128_add_round_key::ap_ST_fsm_state2 = "10";
const sc_lv<3> aes128_add_round_key::ap_ST_fsm_state3 = "100";
const sc_lv<32> aes128_add_round_key::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> aes128_add_round_key::ap_const_lv32_1 = "1";
const sc_lv<1> aes128_add_round_key::ap_const_lv1_0 = "0";
const sc_lv<5> aes128_add_round_key::ap_const_lv5_0 = "00000";
const sc_lv<32> aes128_add_round_key::ap_const_lv32_2 = "10";
const sc_lv<5> aes128_add_round_key::ap_const_lv5_10 = "10000";
const sc_lv<5> aes128_add_round_key::ap_const_lv5_1 = "1";
const sc_lv<1> aes128_add_round_key::ap_const_lv1_1 = "1";
const bool aes128_add_round_key::ap_const_boolean_1 = true;

aes128_add_round_key::aes128_add_round_key(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_53_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_53_p2 );

    SC_METHOD(thread_exitcond_fu_53_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_42 );

    SC_METHOD(thread_i_15_fu_59_p2);
    sensitive << ( i_reg_42 );

    SC_METHOD(thread_round_key_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_65_p1 );

    SC_METHOD(thread_round_key_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_state_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_addr_reg_91 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_65_p1 );

    SC_METHOD(thread_state_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_state_d0);
    sensitive << ( state_q0 );
    sensitive << ( round_key_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_state_we0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_fu_65_p1);
    sensitive << ( i_reg_42 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_53_p2 );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aes128_add_round_key_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_address0, "(port)state_address0");
    sc_trace(mVcdFile, state_ce0, "(port)state_ce0");
    sc_trace(mVcdFile, state_we0, "(port)state_we0");
    sc_trace(mVcdFile, state_d0, "(port)state_d0");
    sc_trace(mVcdFile, state_q0, "(port)state_q0");
    sc_trace(mVcdFile, round_key_address0, "(port)round_key_address0");
    sc_trace(mVcdFile, round_key_ce0, "(port)round_key_ce0");
    sc_trace(mVcdFile, round_key_q0, "(port)round_key_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_15_fu_59_p2, "i_15_fu_59_p2");
    sc_trace(mVcdFile, i_15_reg_81, "i_15_reg_81");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond_fu_53_p2, "exitcond_fu_53_p2");
    sc_trace(mVcdFile, state_addr_reg_91, "state_addr_reg_91");
    sc_trace(mVcdFile, i_reg_42, "i_reg_42");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_fu_65_p1, "tmp_fu_65_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

aes128_add_round_key::~aes128_add_round_key() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void aes128_add_round_key::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_reg_42 = i_15_reg_81.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_42 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_15_reg_81 = i_15_fu_59_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_53_p2.read(), ap_const_lv1_0))) {
        state_addr_reg_91 =  (sc_lv<4>) (tmp_fu_65_p1.read());
    }
}

void aes128_add_round_key::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void aes128_add_round_key::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void aes128_add_round_key::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void aes128_add_round_key::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_53_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aes128_add_round_key::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aes128_add_round_key::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_53_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aes128_add_round_key::thread_exitcond_fu_53_p2() {
    exitcond_fu_53_p2 = (!i_reg_42.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_42.read() == ap_const_lv5_10);
}

void aes128_add_round_key::thread_i_15_fu_59_p2() {
    i_15_fu_59_p2 = (!i_reg_42.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_42.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void aes128_add_round_key::thread_round_key_address0() {
    round_key_address0 =  (sc_lv<4>) (tmp_fu_65_p1.read());
}

void aes128_add_round_key::thread_round_key_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        round_key_ce0 = ap_const_logic_1;
    } else {
        round_key_ce0 = ap_const_logic_0;
    }
}

void aes128_add_round_key::thread_state_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_address0 = state_addr_reg_91.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_address0 =  (sc_lv<4>) (tmp_fu_65_p1.read());
    } else {
        state_address0 = "XXXX";
    }
}

void aes128_add_round_key::thread_state_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        state_ce0 = ap_const_logic_1;
    } else {
        state_ce0 = ap_const_logic_0;
    }
}

void aes128_add_round_key::thread_state_d0() {
    state_d0 = (state_q0.read() ^ round_key_q0.read());
}

void aes128_add_round_key::thread_state_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_we0 = ap_const_logic_1;
    } else {
        state_we0 = ap_const_logic_0;
    }
}

void aes128_add_round_key::thread_tmp_fu_65_p1() {
    tmp_fu_65_p1 = esl_zext<64,5>(i_reg_42.read());
}

void aes128_add_round_key::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_53_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

}

