// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _aes128_mix_column_hw_HH_
#define _aes128_mix_column_hw_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "gmul_hw.h"

namespace ap_rtl {

struct aes128_mix_column_hw : public sc_module {
    // Port declarations 9
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > column_0_read;
    sc_in< sc_lv<8> > column_1_read;
    sc_in< sc_lv<8> > column_2_read;
    sc_in< sc_lv<8> > column_3_read;
    sc_out< sc_lv<8> > ap_return_0;
    sc_out< sc_lv<8> > ap_return_1;
    sc_out< sc_lv<8> > ap_return_2;
    sc_out< sc_lv<8> > ap_return_3;
    sc_signal< sc_lv<3> > ap_var_for_const0;
    sc_signal< sc_lv<3> > ap_var_for_const1;
    sc_signal< sc_lv<3> > ap_var_for_const2;


    // Module declarations
    aes128_mix_column_hw(sc_module_name name);
    SC_HAS_PROCESS(aes128_mix_column_hw);

    ~aes128_mix_column_hw();

    sc_trace_file* mVcdFile;

    gmul_hw* tmp_gmul_hw_fu_44;
    gmul_hw* tmp_s_gmul_hw_fu_52;
    gmul_hw* tmp_9_gmul_hw_fu_60;
    gmul_hw* tmp_1_gmul_hw_fu_68;
    gmul_hw* tmp_4_gmul_hw_fu_76;
    gmul_hw* tmp_5_gmul_hw_fu_84;
    gmul_hw* tmp_6_gmul_hw_fu_92;
    gmul_hw* tmp_2_gmul_hw_fu_100;
    gmul_hw* tmp_3_gmul_hw_fu_108;
    gmul_hw* tmp_7_gmul_hw_fu_116;
    gmul_hw* tmp_8_gmul_hw_fu_124;
    gmul_hw* tmp_10_gmul_hw_fu_132;
    sc_signal< sc_logic > tmp_gmul_hw_fu_44_ap_ready;
    sc_signal< sc_lv<8> > tmp_gmul_hw_fu_44_ap_return;
    sc_signal< sc_logic > tmp_s_gmul_hw_fu_52_ap_ready;
    sc_signal< sc_lv<8> > tmp_s_gmul_hw_fu_52_ap_return;
    sc_signal< sc_logic > tmp_9_gmul_hw_fu_60_ap_ready;
    sc_signal< sc_lv<8> > tmp_9_gmul_hw_fu_60_ap_return;
    sc_signal< sc_logic > tmp_1_gmul_hw_fu_68_ap_ready;
    sc_signal< sc_lv<8> > tmp_1_gmul_hw_fu_68_ap_return;
    sc_signal< sc_logic > tmp_4_gmul_hw_fu_76_ap_ready;
    sc_signal< sc_lv<8> > tmp_4_gmul_hw_fu_76_ap_return;
    sc_signal< sc_logic > tmp_5_gmul_hw_fu_84_ap_ready;
    sc_signal< sc_lv<8> > tmp_5_gmul_hw_fu_84_ap_return;
    sc_signal< sc_logic > tmp_6_gmul_hw_fu_92_ap_ready;
    sc_signal< sc_lv<8> > tmp_6_gmul_hw_fu_92_ap_return;
    sc_signal< sc_logic > tmp_2_gmul_hw_fu_100_ap_ready;
    sc_signal< sc_lv<8> > tmp_2_gmul_hw_fu_100_ap_return;
    sc_signal< sc_logic > tmp_3_gmul_hw_fu_108_ap_ready;
    sc_signal< sc_lv<8> > tmp_3_gmul_hw_fu_108_ap_return;
    sc_signal< sc_logic > tmp_7_gmul_hw_fu_116_ap_ready;
    sc_signal< sc_lv<8> > tmp_7_gmul_hw_fu_116_ap_return;
    sc_signal< sc_logic > tmp_8_gmul_hw_fu_124_ap_ready;
    sc_signal< sc_lv<8> > tmp_8_gmul_hw_fu_124_ap_return;
    sc_signal< sc_logic > tmp_10_gmul_hw_fu_132_ap_ready;
    sc_signal< sc_lv<8> > tmp_10_gmul_hw_fu_132_ap_return;
    sc_signal< sc_lv<8> > tmp2_fu_146_p2;
    sc_signal< sc_lv<8> > tmp1_fu_140_p2;
    sc_signal< sc_lv<8> > tmp4_fu_164_p2;
    sc_signal< sc_lv<8> > tmp3_fu_158_p2;
    sc_signal< sc_lv<8> > tmp6_fu_182_p2;
    sc_signal< sc_lv<8> > tmp5_fu_176_p2;
    sc_signal< sc_lv<8> > tmp8_fu_200_p2;
    sc_signal< sc_lv<8> > tmp7_fu_194_p2;
    sc_signal< sc_lv<8> > column_0_write_assi_fu_152_p2;
    sc_signal< sc_lv<8> > column_1_write_assi_fu_170_p2;
    sc_signal< sc_lv<8> > column_2_write_assi_fu_188_p2;
    sc_signal< sc_lv<8> > column_3_write_assi_fu_206_p2;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<3> ap_const_lv3_2;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_column_0_write_assi_fu_152_p2();
    void thread_column_1_write_assi_fu_170_p2();
    void thread_column_2_write_assi_fu_188_p2();
    void thread_column_3_write_assi_fu_206_p2();
    void thread_tmp1_fu_140_p2();
    void thread_tmp2_fu_146_p2();
    void thread_tmp3_fu_158_p2();
    void thread_tmp4_fu_164_p2();
    void thread_tmp5_fu_176_p2();
    void thread_tmp6_fu_182_p2();
    void thread_tmp7_fu_194_p2();
    void thread_tmp8_fu_200_p2();
};

}

using namespace ap_rtl;

#endif
