// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aes128_extract_round.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aes128_extract_round::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aes128_extract_round::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> aes128_extract_round::ap_ST_fsm_state1 = "1";
const sc_lv<9> aes128_extract_round::ap_ST_fsm_state2 = "10";
const sc_lv<9> aes128_extract_round::ap_ST_fsm_state3 = "100";
const sc_lv<9> aes128_extract_round::ap_ST_fsm_state4 = "1000";
const sc_lv<9> aes128_extract_round::ap_ST_fsm_state5 = "10000";
const sc_lv<9> aes128_extract_round::ap_ST_fsm_state6 = "100000";
const sc_lv<9> aes128_extract_round::ap_ST_fsm_state7 = "1000000";
const sc_lv<9> aes128_extract_round::ap_ST_fsm_state8 = "10000000";
const sc_lv<9> aes128_extract_round::ap_ST_fsm_state9 = "100000000";
const sc_lv<32> aes128_extract_round::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> aes128_extract_round::ap_const_lv32_1 = "1";
const sc_lv<32> aes128_extract_round::ap_const_lv32_2 = "10";
const sc_lv<32> aes128_extract_round::ap_const_lv32_3 = "11";
const sc_lv<32> aes128_extract_round::ap_const_lv32_4 = "100";
const sc_lv<32> aes128_extract_round::ap_const_lv32_5 = "101";
const sc_lv<32> aes128_extract_round::ap_const_lv32_6 = "110";
const sc_lv<32> aes128_extract_round::ap_const_lv32_7 = "111";
const sc_lv<64> aes128_extract_round::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> aes128_extract_round::ap_const_lv64_4 = "100";
const sc_lv<64> aes128_extract_round::ap_const_lv64_8 = "1000";
const sc_lv<64> aes128_extract_round::ap_const_lv64_C = "1100";
const sc_lv<64> aes128_extract_round::ap_const_lv64_1 = "1";
const sc_lv<64> aes128_extract_round::ap_const_lv64_5 = "101";
const sc_lv<64> aes128_extract_round::ap_const_lv64_9 = "1001";
const sc_lv<64> aes128_extract_round::ap_const_lv64_D = "1101";
const sc_lv<64> aes128_extract_round::ap_const_lv64_2 = "10";
const sc_lv<64> aes128_extract_round::ap_const_lv64_6 = "110";
const sc_lv<64> aes128_extract_round::ap_const_lv64_A = "1010";
const sc_lv<64> aes128_extract_round::ap_const_lv64_E = "1110";
const sc_lv<64> aes128_extract_round::ap_const_lv64_3 = "11";
const sc_lv<64> aes128_extract_round::ap_const_lv64_7 = "111";
const sc_lv<64> aes128_extract_round::ap_const_lv64_B = "1011";
const sc_lv<32> aes128_extract_round::ap_const_lv32_8 = "1000";
const sc_lv<64> aes128_extract_round::ap_const_lv64_F = "1111";
const sc_lv<8> aes128_extract_round::ap_const_lv8_1 = "1";
const sc_lv<8> aes128_extract_round::ap_const_lv8_2 = "10";
const sc_lv<8> aes128_extract_round::ap_const_lv8_3 = "11";
const sc_lv<8> aes128_extract_round::ap_const_lv8_4 = "100";
const sc_lv<8> aes128_extract_round::ap_const_lv8_5 = "101";
const sc_lv<8> aes128_extract_round::ap_const_lv8_6 = "110";
const sc_lv<8> aes128_extract_round::ap_const_lv8_7 = "111";
const sc_lv<8> aes128_extract_round::ap_const_lv8_8 = "1000";
const sc_lv<8> aes128_extract_round::ap_const_lv8_9 = "1001";
const sc_lv<8> aes128_extract_round::ap_const_lv8_A = "1010";
const sc_lv<8> aes128_extract_round::ap_const_lv8_B = "1011";
const sc_lv<8> aes128_extract_round::ap_const_lv8_C = "1100";
const sc_lv<8> aes128_extract_round::ap_const_lv8_D = "1101";
const sc_lv<8> aes128_extract_round::ap_const_lv8_E = "1110";
const sc_lv<8> aes128_extract_round::ap_const_lv8_F = "1111";
const bool aes128_extract_round::ap_const_boolean_1 = true;

aes128_extract_round::aes128_extract_round(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_expanded_key_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( expanded_key_offset_s_fu_368_p1 );
    sensitive << ( sum_0_2_cast_fu_393_p1 );
    sensitive << ( sum_1_cast_fu_413_p1 );
    sensitive << ( sum_1_2_cast_fu_433_p1 );
    sensitive << ( sum_2_cast_fu_453_p1 );
    sensitive << ( sum_2_2_cast_fu_473_p1 );
    sensitive << ( sum_3_cast_fu_493_p1 );
    sensitive << ( sum_3_2_cast_fu_513_p1 );

    SC_METHOD(thread_expanded_key_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( sum_0_1_cast_fu_383_p1 );
    sensitive << ( sum_0_3_cast_fu_403_p1 );
    sensitive << ( sum_1_1_cast_fu_423_p1 );
    sensitive << ( sum_1_3_cast_fu_443_p1 );
    sensitive << ( sum_2_1_cast_fu_463_p1 );
    sensitive << ( sum_2_3_cast_fu_483_p1 );
    sensitive << ( sum_3_1_cast_fu_503_p1 );
    sensitive << ( sum_3_3_cast_fu_523_p1 );

    SC_METHOD(thread_expanded_key_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_expanded_key_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_expanded_key_offset_s_fu_368_p1);
    sensitive << ( expanded_key_offset );

    SC_METHOD(thread_round_key_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_round_key_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_round_key_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_round_key_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_round_key_d0);
    sensitive << ( expanded_key_q0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_round_key_d1);
    sensitive << ( expanded_key_q1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_round_key_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_round_key_we1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_sum_0_1_cast_fu_383_p1);
    sensitive << ( sum_0_1_fu_377_p2 );

    SC_METHOD(thread_sum_0_1_fu_377_p2);
    sensitive << ( tmp_fu_373_p1 );

    SC_METHOD(thread_sum_0_2_cast_fu_393_p1);
    sensitive << ( sum_0_2_fu_388_p2 );

    SC_METHOD(thread_sum_0_2_fu_388_p2);
    sensitive << ( tmp_reg_533 );

    SC_METHOD(thread_sum_0_3_cast_fu_403_p1);
    sensitive << ( sum_0_3_fu_398_p2 );

    SC_METHOD(thread_sum_0_3_fu_398_p2);
    sensitive << ( tmp_reg_533 );

    SC_METHOD(thread_sum_1_1_cast_fu_423_p1);
    sensitive << ( sum_1_1_fu_418_p2 );

    SC_METHOD(thread_sum_1_1_fu_418_p2);
    sensitive << ( tmp_reg_533 );

    SC_METHOD(thread_sum_1_2_cast_fu_433_p1);
    sensitive << ( sum_1_2_fu_428_p2 );

    SC_METHOD(thread_sum_1_2_fu_428_p2);
    sensitive << ( tmp_reg_533 );

    SC_METHOD(thread_sum_1_3_cast_fu_443_p1);
    sensitive << ( sum_1_3_fu_438_p2 );

    SC_METHOD(thread_sum_1_3_fu_438_p2);
    sensitive << ( tmp_reg_533 );

    SC_METHOD(thread_sum_1_cast_fu_413_p1);
    sensitive << ( sum_1_fu_408_p2 );

    SC_METHOD(thread_sum_1_fu_408_p2);
    sensitive << ( tmp_reg_533 );

    SC_METHOD(thread_sum_2_1_cast_fu_463_p1);
    sensitive << ( sum_2_1_fu_458_p2 );

    SC_METHOD(thread_sum_2_1_fu_458_p2);
    sensitive << ( tmp_reg_533 );

    SC_METHOD(thread_sum_2_2_cast_fu_473_p1);
    sensitive << ( sum_2_2_fu_468_p2 );

    SC_METHOD(thread_sum_2_2_fu_468_p2);
    sensitive << ( tmp_reg_533 );

    SC_METHOD(thread_sum_2_3_cast_fu_483_p1);
    sensitive << ( sum_2_3_fu_478_p2 );

    SC_METHOD(thread_sum_2_3_fu_478_p2);
    sensitive << ( tmp_reg_533 );

    SC_METHOD(thread_sum_2_cast_fu_453_p1);
    sensitive << ( sum_2_fu_448_p2 );

    SC_METHOD(thread_sum_2_fu_448_p2);
    sensitive << ( tmp_reg_533 );

    SC_METHOD(thread_sum_3_1_cast_fu_503_p1);
    sensitive << ( sum_3_1_fu_498_p2 );

    SC_METHOD(thread_sum_3_1_fu_498_p2);
    sensitive << ( tmp_reg_533 );

    SC_METHOD(thread_sum_3_2_cast_fu_513_p1);
    sensitive << ( sum_3_2_fu_508_p2 );

    SC_METHOD(thread_sum_3_2_fu_508_p2);
    sensitive << ( tmp_reg_533 );

    SC_METHOD(thread_sum_3_3_cast_fu_523_p1);
    sensitive << ( sum_3_3_fu_518_p2 );

    SC_METHOD(thread_sum_3_3_fu_518_p2);
    sensitive << ( tmp_reg_533 );

    SC_METHOD(thread_sum_3_cast_fu_493_p1);
    sensitive << ( sum_3_fu_488_p2 );

    SC_METHOD(thread_sum_3_fu_488_p2);
    sensitive << ( tmp_reg_533 );

    SC_METHOD(thread_tmp_fu_373_p1);
    sensitive << ( expanded_key_offset );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aes128_extract_round_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, expanded_key_address0, "(port)expanded_key_address0");
    sc_trace(mVcdFile, expanded_key_ce0, "(port)expanded_key_ce0");
    sc_trace(mVcdFile, expanded_key_q0, "(port)expanded_key_q0");
    sc_trace(mVcdFile, expanded_key_address1, "(port)expanded_key_address1");
    sc_trace(mVcdFile, expanded_key_ce1, "(port)expanded_key_ce1");
    sc_trace(mVcdFile, expanded_key_q1, "(port)expanded_key_q1");
    sc_trace(mVcdFile, expanded_key_offset, "(port)expanded_key_offset");
    sc_trace(mVcdFile, round_key_address0, "(port)round_key_address0");
    sc_trace(mVcdFile, round_key_ce0, "(port)round_key_ce0");
    sc_trace(mVcdFile, round_key_we0, "(port)round_key_we0");
    sc_trace(mVcdFile, round_key_d0, "(port)round_key_d0");
    sc_trace(mVcdFile, round_key_address1, "(port)round_key_address1");
    sc_trace(mVcdFile, round_key_ce1, "(port)round_key_ce1");
    sc_trace(mVcdFile, round_key_we1, "(port)round_key_we1");
    sc_trace(mVcdFile, round_key_d1, "(port)round_key_d1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_fu_373_p1, "tmp_fu_373_p1");
    sc_trace(mVcdFile, tmp_reg_533, "tmp_reg_533");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, expanded_key_offset_s_fu_368_p1, "expanded_key_offset_s_fu_368_p1");
    sc_trace(mVcdFile, sum_0_1_cast_fu_383_p1, "sum_0_1_cast_fu_383_p1");
    sc_trace(mVcdFile, sum_0_2_cast_fu_393_p1, "sum_0_2_cast_fu_393_p1");
    sc_trace(mVcdFile, sum_0_3_cast_fu_403_p1, "sum_0_3_cast_fu_403_p1");
    sc_trace(mVcdFile, sum_1_cast_fu_413_p1, "sum_1_cast_fu_413_p1");
    sc_trace(mVcdFile, sum_1_1_cast_fu_423_p1, "sum_1_1_cast_fu_423_p1");
    sc_trace(mVcdFile, sum_1_2_cast_fu_433_p1, "sum_1_2_cast_fu_433_p1");
    sc_trace(mVcdFile, sum_1_3_cast_fu_443_p1, "sum_1_3_cast_fu_443_p1");
    sc_trace(mVcdFile, sum_2_cast_fu_453_p1, "sum_2_cast_fu_453_p1");
    sc_trace(mVcdFile, sum_2_1_cast_fu_463_p1, "sum_2_1_cast_fu_463_p1");
    sc_trace(mVcdFile, sum_2_2_cast_fu_473_p1, "sum_2_2_cast_fu_473_p1");
    sc_trace(mVcdFile, sum_2_3_cast_fu_483_p1, "sum_2_3_cast_fu_483_p1");
    sc_trace(mVcdFile, sum_3_cast_fu_493_p1, "sum_3_cast_fu_493_p1");
    sc_trace(mVcdFile, sum_3_1_cast_fu_503_p1, "sum_3_1_cast_fu_503_p1");
    sc_trace(mVcdFile, sum_3_2_cast_fu_513_p1, "sum_3_2_cast_fu_513_p1");
    sc_trace(mVcdFile, sum_3_3_cast_fu_523_p1, "sum_3_3_cast_fu_523_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, sum_0_1_fu_377_p2, "sum_0_1_fu_377_p2");
    sc_trace(mVcdFile, sum_0_2_fu_388_p2, "sum_0_2_fu_388_p2");
    sc_trace(mVcdFile, sum_0_3_fu_398_p2, "sum_0_3_fu_398_p2");
    sc_trace(mVcdFile, sum_1_fu_408_p2, "sum_1_fu_408_p2");
    sc_trace(mVcdFile, sum_1_1_fu_418_p2, "sum_1_1_fu_418_p2");
    sc_trace(mVcdFile, sum_1_2_fu_428_p2, "sum_1_2_fu_428_p2");
    sc_trace(mVcdFile, sum_1_3_fu_438_p2, "sum_1_3_fu_438_p2");
    sc_trace(mVcdFile, sum_2_fu_448_p2, "sum_2_fu_448_p2");
    sc_trace(mVcdFile, sum_2_1_fu_458_p2, "sum_2_1_fu_458_p2");
    sc_trace(mVcdFile, sum_2_2_fu_468_p2, "sum_2_2_fu_468_p2");
    sc_trace(mVcdFile, sum_2_3_fu_478_p2, "sum_2_3_fu_478_p2");
    sc_trace(mVcdFile, sum_3_fu_488_p2, "sum_3_fu_488_p2");
    sc_trace(mVcdFile, sum_3_1_fu_498_p2, "sum_3_1_fu_498_p2");
    sc_trace(mVcdFile, sum_3_2_fu_508_p2, "sum_3_2_fu_508_p2");
    sc_trace(mVcdFile, sum_3_3_fu_518_p2, "sum_3_3_fu_518_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

aes128_extract_round::~aes128_extract_round() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void aes128_extract_round::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_reg_533 = tmp_fu_373_p1.read();
    }
}

void aes128_extract_round::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void aes128_extract_round::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void aes128_extract_round::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void aes128_extract_round::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void aes128_extract_round::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void aes128_extract_round::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void aes128_extract_round::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void aes128_extract_round::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void aes128_extract_round::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void aes128_extract_round::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aes128_extract_round::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aes128_extract_round::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aes128_extract_round::thread_expanded_key_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        expanded_key_address0 =  (sc_lv<8>) (sum_3_2_cast_fu_513_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        expanded_key_address0 =  (sc_lv<8>) (sum_3_cast_fu_493_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        expanded_key_address0 =  (sc_lv<8>) (sum_2_2_cast_fu_473_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        expanded_key_address0 =  (sc_lv<8>) (sum_2_cast_fu_453_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        expanded_key_address0 =  (sc_lv<8>) (sum_1_2_cast_fu_433_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        expanded_key_address0 =  (sc_lv<8>) (sum_1_cast_fu_413_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        expanded_key_address0 =  (sc_lv<8>) (sum_0_2_cast_fu_393_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        expanded_key_address0 =  (sc_lv<8>) (expanded_key_offset_s_fu_368_p1.read());
    } else {
        expanded_key_address0 = "XXXXXXXX";
    }
}

void aes128_extract_round::thread_expanded_key_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        expanded_key_address1 =  (sc_lv<8>) (sum_3_3_cast_fu_523_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        expanded_key_address1 =  (sc_lv<8>) (sum_3_1_cast_fu_503_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        expanded_key_address1 =  (sc_lv<8>) (sum_2_3_cast_fu_483_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        expanded_key_address1 =  (sc_lv<8>) (sum_2_1_cast_fu_463_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        expanded_key_address1 =  (sc_lv<8>) (sum_1_3_cast_fu_443_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        expanded_key_address1 =  (sc_lv<8>) (sum_1_1_cast_fu_423_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        expanded_key_address1 =  (sc_lv<8>) (sum_0_3_cast_fu_403_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        expanded_key_address1 =  (sc_lv<8>) (sum_0_1_cast_fu_383_p1.read());
    } else {
        expanded_key_address1 = "XXXXXXXX";
    }
}

void aes128_extract_round::thread_expanded_key_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        expanded_key_ce0 = ap_const_logic_1;
    } else {
        expanded_key_ce0 = ap_const_logic_0;
    }
}

void aes128_extract_round::thread_expanded_key_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        expanded_key_ce1 = ap_const_logic_1;
    } else {
        expanded_key_ce1 = ap_const_logic_0;
    }
}

void aes128_extract_round::thread_expanded_key_offset_s_fu_368_p1() {
    expanded_key_offset_s_fu_368_p1 = esl_zext<64,10>(expanded_key_offset.read());
}

void aes128_extract_round::thread_round_key_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        round_key_address0 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        round_key_address0 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        round_key_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        round_key_address0 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        round_key_address0 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        round_key_address0 =  (sc_lv<4>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        round_key_address0 =  (sc_lv<4>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        round_key_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        round_key_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void aes128_extract_round::thread_round_key_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        round_key_address1 =  (sc_lv<4>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        round_key_address1 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        round_key_address1 =  (sc_lv<4>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        round_key_address1 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        round_key_address1 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        round_key_address1 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        round_key_address1 =  (sc_lv<4>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        round_key_address1 =  (sc_lv<4>) (ap_const_lv64_4);
    } else {
        round_key_address1 =  (sc_lv<4>) ("XXXX");
    }
}

void aes128_extract_round::thread_round_key_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        round_key_ce0 = ap_const_logic_1;
    } else {
        round_key_ce0 = ap_const_logic_0;
    }
}

void aes128_extract_round::thread_round_key_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        round_key_ce1 = ap_const_logic_1;
    } else {
        round_key_ce1 = ap_const_logic_0;
    }
}

void aes128_extract_round::thread_round_key_d0() {
    round_key_d0 = expanded_key_q0.read();
}

void aes128_extract_round::thread_round_key_d1() {
    round_key_d1 = expanded_key_q1.read();
}

void aes128_extract_round::thread_round_key_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        round_key_we0 = ap_const_logic_1;
    } else {
        round_key_we0 = ap_const_logic_0;
    }
}

void aes128_extract_round::thread_round_key_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        round_key_we1 = ap_const_logic_1;
    } else {
        round_key_we1 = ap_const_logic_0;
    }
}

void aes128_extract_round::thread_sum_0_1_cast_fu_383_p1() {
    sum_0_1_cast_fu_383_p1 = esl_zext<64,8>(sum_0_1_fu_377_p2.read());
}

void aes128_extract_round::thread_sum_0_1_fu_377_p2() {
    sum_0_1_fu_377_p2 = (!ap_const_lv8_1.is_01() || !tmp_fu_373_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_1) + sc_biguint<8>(tmp_fu_373_p1.read()));
}

void aes128_extract_round::thread_sum_0_2_cast_fu_393_p1() {
    sum_0_2_cast_fu_393_p1 = esl_zext<64,8>(sum_0_2_fu_388_p2.read());
}

void aes128_extract_round::thread_sum_0_2_fu_388_p2() {
    sum_0_2_fu_388_p2 = (!ap_const_lv8_2.is_01() || !tmp_reg_533.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_2) + sc_biguint<8>(tmp_reg_533.read()));
}

void aes128_extract_round::thread_sum_0_3_cast_fu_403_p1() {
    sum_0_3_cast_fu_403_p1 = esl_zext<64,8>(sum_0_3_fu_398_p2.read());
}

void aes128_extract_round::thread_sum_0_3_fu_398_p2() {
    sum_0_3_fu_398_p2 = (!ap_const_lv8_3.is_01() || !tmp_reg_533.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_3) + sc_biguint<8>(tmp_reg_533.read()));
}

void aes128_extract_round::thread_sum_1_1_cast_fu_423_p1() {
    sum_1_1_cast_fu_423_p1 = esl_zext<64,8>(sum_1_1_fu_418_p2.read());
}

void aes128_extract_round::thread_sum_1_1_fu_418_p2() {
    sum_1_1_fu_418_p2 = (!ap_const_lv8_5.is_01() || !tmp_reg_533.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_5) + sc_biguint<8>(tmp_reg_533.read()));
}

void aes128_extract_round::thread_sum_1_2_cast_fu_433_p1() {
    sum_1_2_cast_fu_433_p1 = esl_zext<64,8>(sum_1_2_fu_428_p2.read());
}

void aes128_extract_round::thread_sum_1_2_fu_428_p2() {
    sum_1_2_fu_428_p2 = (!ap_const_lv8_6.is_01() || !tmp_reg_533.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_6) + sc_biguint<8>(tmp_reg_533.read()));
}

void aes128_extract_round::thread_sum_1_3_cast_fu_443_p1() {
    sum_1_3_cast_fu_443_p1 = esl_zext<64,8>(sum_1_3_fu_438_p2.read());
}

void aes128_extract_round::thread_sum_1_3_fu_438_p2() {
    sum_1_3_fu_438_p2 = (!ap_const_lv8_7.is_01() || !tmp_reg_533.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_7) + sc_biguint<8>(tmp_reg_533.read()));
}

void aes128_extract_round::thread_sum_1_cast_fu_413_p1() {
    sum_1_cast_fu_413_p1 = esl_zext<64,8>(sum_1_fu_408_p2.read());
}

void aes128_extract_round::thread_sum_1_fu_408_p2() {
    sum_1_fu_408_p2 = (!ap_const_lv8_4.is_01() || !tmp_reg_533.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_4) + sc_biguint<8>(tmp_reg_533.read()));
}

void aes128_extract_round::thread_sum_2_1_cast_fu_463_p1() {
    sum_2_1_cast_fu_463_p1 = esl_zext<64,8>(sum_2_1_fu_458_p2.read());
}

void aes128_extract_round::thread_sum_2_1_fu_458_p2() {
    sum_2_1_fu_458_p2 = (!ap_const_lv8_9.is_01() || !tmp_reg_533.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_9) + sc_biguint<8>(tmp_reg_533.read()));
}

void aes128_extract_round::thread_sum_2_2_cast_fu_473_p1() {
    sum_2_2_cast_fu_473_p1 = esl_zext<64,8>(sum_2_2_fu_468_p2.read());
}

void aes128_extract_round::thread_sum_2_2_fu_468_p2() {
    sum_2_2_fu_468_p2 = (!ap_const_lv8_A.is_01() || !tmp_reg_533.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_A) + sc_biguint<8>(tmp_reg_533.read()));
}

void aes128_extract_round::thread_sum_2_3_cast_fu_483_p1() {
    sum_2_3_cast_fu_483_p1 = esl_zext<64,8>(sum_2_3_fu_478_p2.read());
}

void aes128_extract_round::thread_sum_2_3_fu_478_p2() {
    sum_2_3_fu_478_p2 = (!ap_const_lv8_B.is_01() || !tmp_reg_533.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_B) + sc_biguint<8>(tmp_reg_533.read()));
}

void aes128_extract_round::thread_sum_2_cast_fu_453_p1() {
    sum_2_cast_fu_453_p1 = esl_zext<64,8>(sum_2_fu_448_p2.read());
}

void aes128_extract_round::thread_sum_2_fu_448_p2() {
    sum_2_fu_448_p2 = (!ap_const_lv8_8.is_01() || !tmp_reg_533.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_8) + sc_biguint<8>(tmp_reg_533.read()));
}

void aes128_extract_round::thread_sum_3_1_cast_fu_503_p1() {
    sum_3_1_cast_fu_503_p1 = esl_zext<64,8>(sum_3_1_fu_498_p2.read());
}

void aes128_extract_round::thread_sum_3_1_fu_498_p2() {
    sum_3_1_fu_498_p2 = (!ap_const_lv8_D.is_01() || !tmp_reg_533.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_D) + sc_biguint<8>(tmp_reg_533.read()));
}

void aes128_extract_round::thread_sum_3_2_cast_fu_513_p1() {
    sum_3_2_cast_fu_513_p1 = esl_zext<64,8>(sum_3_2_fu_508_p2.read());
}

void aes128_extract_round::thread_sum_3_2_fu_508_p2() {
    sum_3_2_fu_508_p2 = (!ap_const_lv8_E.is_01() || !tmp_reg_533.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_E) + sc_biguint<8>(tmp_reg_533.read()));
}

void aes128_extract_round::thread_sum_3_3_cast_fu_523_p1() {
    sum_3_3_cast_fu_523_p1 = esl_zext<64,8>(sum_3_3_fu_518_p2.read());
}

void aes128_extract_round::thread_sum_3_3_fu_518_p2() {
    sum_3_3_fu_518_p2 = (!ap_const_lv8_F.is_01() || !tmp_reg_533.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_F) + sc_biguint<8>(tmp_reg_533.read()));
}

void aes128_extract_round::thread_sum_3_cast_fu_493_p1() {
    sum_3_cast_fu_493_p1 = esl_zext<64,8>(sum_3_fu_488_p2.read());
}

void aes128_extract_round::thread_sum_3_fu_488_p2() {
    sum_3_fu_488_p2 = (!ap_const_lv8_C.is_01() || !tmp_reg_533.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_C) + sc_biguint<8>(tmp_reg_533.read()));
}

void aes128_extract_round::thread_tmp_fu_373_p1() {
    tmp_fu_373_p1 = expanded_key_offset.read().range(8-1, 0);
}

void aes128_extract_round::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<9>) ("XXXXXXXXX");
            break;
    }
}

}

