// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aes128_encrypt_block_hw.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aes128_encrypt_block_hw::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aes128_encrypt_block_hw::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state1 = "1";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state2 = "10";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state3 = "100";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state4 = "1000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state5 = "10000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state6 = "100000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state7 = "1000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state8 = "10000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state9 = "100000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state10 = "1000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state11 = "10000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state12 = "100000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<28> aes128_encrypt_block_hw::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_1 = "1";
const sc_lv<1> aes128_encrypt_block_hw::ap_const_lv1_0 = "0";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_2 = "10";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_9 = "1001";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_B = "1011";
const sc_lv<1> aes128_encrypt_block_hw::ap_const_lv1_1 = "1";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_C = "1100";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_13 = "10011";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_14 = "10100";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_19 = "11001";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_1A = "11010";
const sc_lv<3> aes128_encrypt_block_hw::ap_const_lv3_0 = "000";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_3 = "11";
const sc_lv<4> aes128_encrypt_block_hw::ap_const_lv4_1 = "1";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_8 = "1000";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_12 = "10010";
const sc_lv<5> aes128_encrypt_block_hw::ap_const_lv5_0 = "00000";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_A = "1010";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_D = "1101";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_15 = "10101";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_18 = "11000";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_1B = "11011";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_F = "1111";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_10 = "10000";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_4 = "100";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_E = "1110";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_16 = "10110";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_5 = "101";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_6 = "110";
const sc_lv<10> aes128_encrypt_block_hw::ap_const_lv10_0 = "0000000000";
const sc_lv<10> aes128_encrypt_block_hw::ap_const_lv10_A0 = "10100000";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_7 = "111";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_11 = "10001";
const sc_lv<32> aes128_encrypt_block_hw::ap_const_lv32_17 = "10111";
const sc_lv<3> aes128_encrypt_block_hw::ap_const_lv3_4 = "100";
const sc_lv<3> aes128_encrypt_block_hw::ap_const_lv3_1 = "1";
const sc_lv<2> aes128_encrypt_block_hw::ap_const_lv2_0 = "00";
const sc_lv<4> aes128_encrypt_block_hw::ap_const_lv4_A = "1010";
const sc_lv<4> aes128_encrypt_block_hw::ap_const_lv4_0 = "0000";
const sc_lv<5> aes128_encrypt_block_hw::ap_const_lv5_10 = "10000";
const sc_lv<5> aes128_encrypt_block_hw::ap_const_lv5_1 = "1";
const bool aes128_encrypt_block_hw::ap_const_boolean_0 = false;
const sc_lv<8> aes128_encrypt_block_hw::ap_const_lv8_0 = "00000000";
const bool aes128_encrypt_block_hw::ap_const_boolean_1 = true;

aes128_encrypt_block_hw::aes128_encrypt_block_hw(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sbox_hw_U = new aes128_expand_keybkb("sbox_hw_U");
    sbox_hw_U->clk(ap_clk);
    sbox_hw_U->reset(ap_rst);
    sbox_hw_U->address0(sbox_hw_address0);
    sbox_hw_U->ce0(sbox_hw_ce0);
    sbox_hw_U->q0(sbox_hw_q0);
    state_U = new aes128_encrypt_blg8j("state_U");
    state_U->clk(ap_clk);
    state_U->reset(ap_rst);
    state_U->address0(state_address0);
    state_U->ce0(state_ce0);
    state_U->we0(state_we0);
    state_U->d0(state_d0);
    state_U->q0(state_q0);
    round_key_U = new aes128_encrypt_blg8j("round_key_U");
    round_key_U->clk(ap_clk);
    round_key_U->reset(ap_rst);
    round_key_U->address0(round_key_address0);
    round_key_U->ce0(round_key_ce0);
    round_key_U->we0(round_key_we0);
    round_key_U->d0(grp_aes128_extract_round_fu_260_round_key_d0);
    round_key_U->q0(round_key_q0);
    expanded_key_U = new aes128_encrypt_blibs("expanded_key_U");
    expanded_key_U->clk(ap_clk);
    expanded_key_U->reset(ap_rst);
    expanded_key_U->address0(expanded_key_address0);
    expanded_key_U->ce0(expanded_key_ce0);
    expanded_key_U->we0(expanded_key_we0);
    expanded_key_U->d0(grp_aes128_expand_key_hw_fu_244_expanded_key_d0);
    expanded_key_U->q0(expanded_key_q0);
    grp_aes128_mix_columns_h_fu_239 = new aes128_mix_columns_h("grp_aes128_mix_columns_h_fu_239");
    grp_aes128_mix_columns_h_fu_239->ap_clk(ap_clk);
    grp_aes128_mix_columns_h_fu_239->ap_rst(ap_rst);
    grp_aes128_mix_columns_h_fu_239->ap_start(grp_aes128_mix_columns_h_fu_239_ap_start);
    grp_aes128_mix_columns_h_fu_239->ap_done(grp_aes128_mix_columns_h_fu_239_ap_done);
    grp_aes128_mix_columns_h_fu_239->ap_idle(grp_aes128_mix_columns_h_fu_239_ap_idle);
    grp_aes128_mix_columns_h_fu_239->ap_ready(grp_aes128_mix_columns_h_fu_239_ap_ready);
    grp_aes128_mix_columns_h_fu_239->state_address0(grp_aes128_mix_columns_h_fu_239_state_address0);
    grp_aes128_mix_columns_h_fu_239->state_ce0(grp_aes128_mix_columns_h_fu_239_state_ce0);
    grp_aes128_mix_columns_h_fu_239->state_we0(grp_aes128_mix_columns_h_fu_239_state_we0);
    grp_aes128_mix_columns_h_fu_239->state_d0(grp_aes128_mix_columns_h_fu_239_state_d0);
    grp_aes128_mix_columns_h_fu_239->state_q0(state_q0);
    grp_aes128_expand_key_hw_fu_244 = new aes128_expand_key_hw("grp_aes128_expand_key_hw_fu_244");
    grp_aes128_expand_key_hw_fu_244->ap_clk(ap_clk);
    grp_aes128_expand_key_hw_fu_244->ap_rst(ap_rst);
    grp_aes128_expand_key_hw_fu_244->ap_start(grp_aes128_expand_key_hw_fu_244_ap_start);
    grp_aes128_expand_key_hw_fu_244->ap_done(grp_aes128_expand_key_hw_fu_244_ap_done);
    grp_aes128_expand_key_hw_fu_244->ap_idle(grp_aes128_expand_key_hw_fu_244_ap_idle);
    grp_aes128_expand_key_hw_fu_244->ap_ready(grp_aes128_expand_key_hw_fu_244_ap_ready);
    grp_aes128_expand_key_hw_fu_244->key_address0(grp_aes128_expand_key_hw_fu_244_key_address0);
    grp_aes128_expand_key_hw_fu_244->key_ce0(grp_aes128_expand_key_hw_fu_244_key_ce0);
    grp_aes128_expand_key_hw_fu_244->key_q0(key_q0);
    grp_aes128_expand_key_hw_fu_244->expanded_key_address0(grp_aes128_expand_key_hw_fu_244_expanded_key_address0);
    grp_aes128_expand_key_hw_fu_244->expanded_key_ce0(grp_aes128_expand_key_hw_fu_244_expanded_key_ce0);
    grp_aes128_expand_key_hw_fu_244->expanded_key_we0(grp_aes128_expand_key_hw_fu_244_expanded_key_we0);
    grp_aes128_expand_key_hw_fu_244->expanded_key_d0(grp_aes128_expand_key_hw_fu_244_expanded_key_d0);
    grp_aes128_expand_key_hw_fu_244->expanded_key_q0(expanded_key_q0);
    grp_aes128_shift_rows_hw_fu_255 = new aes128_shift_rows_hw("grp_aes128_shift_rows_hw_fu_255");
    grp_aes128_shift_rows_hw_fu_255->ap_clk(ap_clk);
    grp_aes128_shift_rows_hw_fu_255->ap_rst(ap_rst);
    grp_aes128_shift_rows_hw_fu_255->ap_start(grp_aes128_shift_rows_hw_fu_255_ap_start);
    grp_aes128_shift_rows_hw_fu_255->ap_done(grp_aes128_shift_rows_hw_fu_255_ap_done);
    grp_aes128_shift_rows_hw_fu_255->ap_idle(grp_aes128_shift_rows_hw_fu_255_ap_idle);
    grp_aes128_shift_rows_hw_fu_255->ap_ready(grp_aes128_shift_rows_hw_fu_255_ap_ready);
    grp_aes128_shift_rows_hw_fu_255->state_address0(grp_aes128_shift_rows_hw_fu_255_state_address0);
    grp_aes128_shift_rows_hw_fu_255->state_ce0(grp_aes128_shift_rows_hw_fu_255_state_ce0);
    grp_aes128_shift_rows_hw_fu_255->state_we0(grp_aes128_shift_rows_hw_fu_255_state_we0);
    grp_aes128_shift_rows_hw_fu_255->state_d0(grp_aes128_shift_rows_hw_fu_255_state_d0);
    grp_aes128_shift_rows_hw_fu_255->state_q0(state_q0);
    grp_aes128_extract_round_fu_260 = new aes128_extract_round("grp_aes128_extract_round_fu_260");
    grp_aes128_extract_round_fu_260->ap_clk(ap_clk);
    grp_aes128_extract_round_fu_260->ap_rst(ap_rst);
    grp_aes128_extract_round_fu_260->ap_start(grp_aes128_extract_round_fu_260_ap_start);
    grp_aes128_extract_round_fu_260->ap_done(grp_aes128_extract_round_fu_260_ap_done);
    grp_aes128_extract_round_fu_260->ap_idle(grp_aes128_extract_round_fu_260_ap_idle);
    grp_aes128_extract_round_fu_260->ap_ready(grp_aes128_extract_round_fu_260_ap_ready);
    grp_aes128_extract_round_fu_260->expanded_key_address0(grp_aes128_extract_round_fu_260_expanded_key_address0);
    grp_aes128_extract_round_fu_260->expanded_key_ce0(grp_aes128_extract_round_fu_260_expanded_key_ce0);
    grp_aes128_extract_round_fu_260->expanded_key_q0(expanded_key_q0);
    grp_aes128_extract_round_fu_260->expanded_key_offset(grp_aes128_extract_round_fu_260_expanded_key_offset);
    grp_aes128_extract_round_fu_260->round_key_address0(grp_aes128_extract_round_fu_260_round_key_address0);
    grp_aes128_extract_round_fu_260->round_key_ce0(grp_aes128_extract_round_fu_260_round_key_ce0);
    grp_aes128_extract_round_fu_260->round_key_we0(grp_aes128_extract_round_fu_260_round_key_we0);
    grp_aes128_extract_round_fu_260->round_key_d0(grp_aes128_extract_round_fu_260_round_key_d0);
    grp_aes128_add_round_key_fu_269 = new aes128_add_round_key("grp_aes128_add_round_key_fu_269");
    grp_aes128_add_round_key_fu_269->ap_clk(ap_clk);
    grp_aes128_add_round_key_fu_269->ap_rst(ap_rst);
    grp_aes128_add_round_key_fu_269->ap_start(grp_aes128_add_round_key_fu_269_ap_start);
    grp_aes128_add_round_key_fu_269->ap_done(grp_aes128_add_round_key_fu_269_ap_done);
    grp_aes128_add_round_key_fu_269->ap_idle(grp_aes128_add_round_key_fu_269_ap_idle);
    grp_aes128_add_round_key_fu_269->ap_ready(grp_aes128_add_round_key_fu_269_ap_ready);
    grp_aes128_add_round_key_fu_269->state_address0(grp_aes128_add_round_key_fu_269_state_address0);
    grp_aes128_add_round_key_fu_269->state_ce0(grp_aes128_add_round_key_fu_269_state_ce0);
    grp_aes128_add_round_key_fu_269->state_we0(grp_aes128_add_round_key_fu_269_state_we0);
    grp_aes128_add_round_key_fu_269->state_d0(grp_aes128_add_round_key_fu_269_state_d0);
    grp_aes128_add_round_key_fu_269->state_q0(state_q0);
    grp_aes128_add_round_key_fu_269->round_key_address0(grp_aes128_add_round_key_fu_269_round_key_address0);
    grp_aes128_add_round_key_fu_269->round_key_ce0(grp_aes128_add_round_key_fu_269_round_key_ce0);
    grp_aes128_add_round_key_fu_269->round_key_q0(round_key_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state23_on_subcall_done);
    sensitive << ( grp_aes128_shift_rows_hw_fu_255_ap_done );
    sensitive << ( grp_aes128_extract_round_fu_260_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( exitcond1_fu_423_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( exitcond1_fu_423_p2 );

    SC_METHOD(thread_exitcond1_fu_423_p2);
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( i_2_reg_217 );

    SC_METHOD(thread_exitcond2_fu_350_p2);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( i_1_reg_183 );

    SC_METHOD(thread_exitcond3_fu_307_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_reg_172 );

    SC_METHOD(thread_exitcond4_fu_279_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_161 );

    SC_METHOD(thread_exitcond_fu_451_p2);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( j_1_reg_228 );

    SC_METHOD(thread_exitcond_i7_fu_397_p2);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( i_i6_reg_206 );

    SC_METHOD(thread_exitcond_i_fu_369_p2);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( i_i_reg_195 );

    SC_METHOD(thread_expanded_key_address0);
    sensitive << ( grp_aes128_expand_key_hw_fu_244_expanded_key_address0 );
    sensitive << ( grp_aes128_extract_round_fu_260_expanded_key_address0 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_expanded_key_ce0);
    sensitive << ( grp_aes128_expand_key_hw_fu_244_expanded_key_ce0 );
    sensitive << ( grp_aes128_extract_round_fu_260_expanded_key_ce0 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_expanded_key_we0);
    sensitive << ( grp_aes128_expand_key_hw_fu_244_expanded_key_we0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_aes128_add_round_key_fu_269_ap_start);
    sensitive << ( grp_aes128_add_round_key_fu_269_ap_start_reg );

    SC_METHOD(thread_grp_aes128_expand_key_hw_fu_244_ap_start);
    sensitive << ( grp_aes128_expand_key_hw_fu_244_ap_start_reg );

    SC_METHOD(thread_grp_aes128_extract_round_fu_260_ap_start);
    sensitive << ( grp_aes128_extract_round_fu_260_ap_start_reg );

    SC_METHOD(thread_grp_aes128_extract_round_fu_260_expanded_key_offset);
    sensitive << ( tmp_41_cast_reg_533 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_grp_aes128_mix_columns_h_fu_239_ap_start);
    sensitive << ( grp_aes128_mix_columns_h_fu_239_ap_start_reg );

    SC_METHOD(thread_grp_aes128_shift_rows_hw_fu_255_ap_start);
    sensitive << ( grp_aes128_shift_rows_hw_fu_255_ap_start_reg );

    SC_METHOD(thread_i_11_fu_285_p2);
    sensitive << ( i_reg_161 );

    SC_METHOD(thread_i_12_fu_403_p2);
    sensitive << ( i_i6_reg_206 );

    SC_METHOD(thread_i_13_fu_386_p2);
    sensitive << ( i_1_reg_183 );

    SC_METHOD(thread_i_14_fu_429_p2);
    sensitive << ( i_2_reg_217 );

    SC_METHOD(thread_i_2_cast_fu_419_p1);
    sensitive << ( i_2_reg_217 );

    SC_METHOD(thread_i_3_fu_375_p2);
    sensitive << ( i_i_reg_195 );

    SC_METHOD(thread_i_cast_fu_275_p1);
    sensitive << ( i_reg_161 );

    SC_METHOD(thread_in_r_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_29_fu_324_p1 );

    SC_METHOD(thread_in_r_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_j_1_cast_fu_447_p1);
    sensitive << ( j_1_reg_228 );

    SC_METHOD(thread_j_6_fu_313_p2);
    sensitive << ( j_reg_172 );

    SC_METHOD(thread_j_7_fu_457_p2);
    sensitive << ( j_1_reg_228 );

    SC_METHOD(thread_j_cast_fu_303_p1);
    sensitive << ( j_reg_172 );

    SC_METHOD(thread_key_address0);
    sensitive << ( grp_aes128_expand_key_hw_fu_244_key_address0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_key_ce0);
    sensitive << ( grp_aes128_expand_key_hw_fu_244_key_ce0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_out_r_address0);
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( tmp_38_fu_490_p1 );

    SC_METHOD(thread_out_r_ce0);
    sensitive << ( ap_CS_fsm_state28 );

    SC_METHOD(thread_out_r_d0);
    sensitive << ( state_q0 );
    sensitive << ( ap_CS_fsm_state28 );

    SC_METHOD(thread_out_r_we0);
    sensitive << ( ap_CS_fsm_state28 );

    SC_METHOD(thread_round_key_address0);
    sensitive << ( grp_aes128_extract_round_fu_260_round_key_address0 );
    sensitive << ( grp_aes128_add_round_key_fu_269_round_key_address0 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_round_key_ce0);
    sensitive << ( grp_aes128_extract_round_fu_260_round_key_ce0 );
    sensitive << ( grp_aes128_add_round_key_fu_269_round_key_ce0 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_round_key_we0);
    sensitive << ( grp_aes128_extract_round_fu_260_round_key_we0 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_sbox_hw_address0);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_i_19_fu_392_p1 );
    sensitive << ( tmp_i1_fu_414_p1 );

    SC_METHOD(thread_sbox_hw_ce0);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_address0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( state_addr_6_reg_546 );
    sensitive << ( exitcond_i_fu_369_p2 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( state_addr_5_reg_569 );
    sensitive << ( exitcond_i7_fu_397_p2 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( grp_aes128_mix_columns_h_fu_239_state_address0 );
    sensitive << ( grp_aes128_shift_rows_hw_fu_255_state_address0 );
    sensitive << ( grp_aes128_add_round_key_fu_269_state_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( tmp_32_fu_346_p1 );
    sensitive << ( tmp_i_fu_381_p1 );
    sensitive << ( tmp_i8_fu_409_p1 );
    sensitive << ( tmp_36_fu_480_p1 );

    SC_METHOD(thread_state_ce0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( exitcond_i_fu_369_p2 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( exitcond_i7_fu_397_p2 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( grp_aes128_mix_columns_h_fu_239_state_ce0 );
    sensitive << ( grp_aes128_shift_rows_hw_fu_255_state_ce0 );
    sensitive << ( grp_aes128_add_round_key_fu_269_state_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_state_d0);
    sensitive << ( in_r_q0 );
    sensitive << ( sbox_hw_q0 );
    sensitive << ( grp_aes128_mix_columns_h_fu_239_state_d0 );
    sensitive << ( grp_aes128_shift_rows_hw_fu_255_state_d0 );
    sensitive << ( grp_aes128_add_round_key_fu_269_state_d0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_state_we0);
    sensitive << ( grp_aes128_mix_columns_h_fu_239_state_we0 );
    sensitive << ( grp_aes128_shift_rows_hw_fu_255_state_we0 );
    sensitive << ( grp_aes128_add_round_key_fu_269_state_we0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_tmp_28_fu_319_p2);
    sensitive << ( tmp_reg_507 );
    sensitive << ( j_cast_fu_303_p1 );

    SC_METHOD(thread_tmp_29_fu_324_p1);
    sensitive << ( tmp_28_fu_319_p2 );

    SC_METHOD(thread_tmp_30_fu_333_p3);
    sensitive << ( tmp_40_fu_329_p1 );

    SC_METHOD(thread_tmp_31_fu_341_p2);
    sensitive << ( i_cast_reg_494 );
    sensitive << ( tmp_30_fu_333_p3 );

    SC_METHOD(thread_tmp_32_fu_346_p1);
    sensitive << ( tmp_31_reg_525 );

    SC_METHOD(thread_tmp_33_fu_439_p3);
    sensitive << ( tmp_41_fu_435_p1 );

    SC_METHOD(thread_tmp_34_fu_467_p3);
    sensitive << ( tmp_42_fu_463_p1 );

    SC_METHOD(thread_tmp_35_fu_475_p2);
    sensitive << ( i_2_cast_reg_579 );
    sensitive << ( tmp_34_fu_467_p3 );

    SC_METHOD(thread_tmp_36_fu_480_p1);
    sensitive << ( tmp_35_fu_475_p2 );

    SC_METHOD(thread_tmp_37_fu_485_p2);
    sensitive << ( tmp_33_reg_592 );
    sensitive << ( j_1_cast_fu_447_p1 );

    SC_METHOD(thread_tmp_38_fu_490_p1);
    sensitive << ( tmp_37_reg_610 );

    SC_METHOD(thread_tmp_39_fu_291_p1);
    sensitive << ( i_reg_161 );

    SC_METHOD(thread_tmp_40_fu_329_p1);
    sensitive << ( j_reg_172 );

    SC_METHOD(thread_tmp_41_cast_fu_364_p1);
    sensitive << ( tmp_s_fu_356_p3 );

    SC_METHOD(thread_tmp_41_fu_435_p1);
    sensitive << ( i_2_reg_217 );

    SC_METHOD(thread_tmp_42_fu_463_p1);
    sensitive << ( j_1_reg_228 );

    SC_METHOD(thread_tmp_fu_295_p3);
    sensitive << ( tmp_39_fu_291_p1 );

    SC_METHOD(thread_tmp_i1_fu_414_p1);
    sensitive << ( state_q0 );

    SC_METHOD(thread_tmp_i8_fu_409_p1);
    sensitive << ( i_i6_reg_206 );

    SC_METHOD(thread_tmp_i_19_fu_392_p1);
    sensitive << ( state_q0 );

    SC_METHOD(thread_tmp_i_fu_381_p1);
    sensitive << ( i_i_reg_195 );

    SC_METHOD(thread_tmp_s_fu_356_p3);
    sensitive << ( i_1_reg_183 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond4_fu_279_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond3_fu_307_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( exitcond2_fu_350_p2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( exitcond_i_fu_369_p2 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( exitcond_i7_fu_397_p2 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( exitcond1_fu_423_p2 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( exitcond_fu_451_p2 );
    sensitive << ( grp_aes128_mix_columns_h_fu_239_ap_done );
    sensitive << ( grp_aes128_expand_key_hw_fu_244_ap_done );
    sensitive << ( grp_aes128_shift_rows_hw_fu_255_ap_done );
    sensitive << ( grp_aes128_extract_round_fu_260_ap_done );
    sensitive << ( grp_aes128_add_round_key_fu_269_ap_done );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_block_state23_on_subcall_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000000000000000000000000001";
    grp_aes128_mix_columns_h_fu_239_ap_start_reg = SC_LOGIC_0;
    grp_aes128_expand_key_hw_fu_244_ap_start_reg = SC_LOGIC_0;
    grp_aes128_shift_rows_hw_fu_255_ap_start_reg = SC_LOGIC_0;
    grp_aes128_extract_round_fu_260_ap_start_reg = SC_LOGIC_0;
    grp_aes128_add_round_key_fu_269_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aes128_encrypt_block_hw_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_r_address0, "(port)in_r_address0");
    sc_trace(mVcdFile, in_r_ce0, "(port)in_r_ce0");
    sc_trace(mVcdFile, in_r_q0, "(port)in_r_q0");
    sc_trace(mVcdFile, key_address0, "(port)key_address0");
    sc_trace(mVcdFile, key_ce0, "(port)key_ce0");
    sc_trace(mVcdFile, key_q0, "(port)key_q0");
    sc_trace(mVcdFile, out_r_address0, "(port)out_r_address0");
    sc_trace(mVcdFile, out_r_ce0, "(port)out_r_ce0");
    sc_trace(mVcdFile, out_r_we0, "(port)out_r_we0");
    sc_trace(mVcdFile, out_r_d0, "(port)out_r_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sbox_hw_address0, "sbox_hw_address0");
    sc_trace(mVcdFile, sbox_hw_ce0, "sbox_hw_ce0");
    sc_trace(mVcdFile, sbox_hw_q0, "sbox_hw_q0");
    sc_trace(mVcdFile, i_cast_fu_275_p1, "i_cast_fu_275_p1");
    sc_trace(mVcdFile, i_cast_reg_494, "i_cast_reg_494");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_11_fu_285_p2, "i_11_fu_285_p2");
    sc_trace(mVcdFile, i_11_reg_502, "i_11_reg_502");
    sc_trace(mVcdFile, tmp_fu_295_p3, "tmp_fu_295_p3");
    sc_trace(mVcdFile, tmp_reg_507, "tmp_reg_507");
    sc_trace(mVcdFile, exitcond4_fu_279_p2, "exitcond4_fu_279_p2");
    sc_trace(mVcdFile, j_6_fu_313_p2, "j_6_fu_313_p2");
    sc_trace(mVcdFile, j_6_reg_515, "j_6_reg_515");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond3_fu_307_p2, "exitcond3_fu_307_p2");
    sc_trace(mVcdFile, tmp_31_fu_341_p2, "tmp_31_fu_341_p2");
    sc_trace(mVcdFile, tmp_31_reg_525, "tmp_31_reg_525");
    sc_trace(mVcdFile, tmp_41_cast_fu_364_p1, "tmp_41_cast_fu_364_p1");
    sc_trace(mVcdFile, tmp_41_cast_reg_533, "tmp_41_cast_reg_533");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, exitcond2_fu_350_p2, "exitcond2_fu_350_p2");
    sc_trace(mVcdFile, i_3_fu_375_p2, "i_3_fu_375_p2");
    sc_trace(mVcdFile, i_3_reg_541, "i_3_reg_541");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, state_addr_6_reg_546, "state_addr_6_reg_546");
    sc_trace(mVcdFile, exitcond_i_fu_369_p2, "exitcond_i_fu_369_p2");
    sc_trace(mVcdFile, i_13_fu_386_p2, "i_13_fu_386_p2");
    sc_trace(mVcdFile, i_13_reg_551, "i_13_reg_551");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, i_12_fu_403_p2, "i_12_fu_403_p2");
    sc_trace(mVcdFile, i_12_reg_564, "i_12_reg_564");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, state_addr_5_reg_569, "state_addr_5_reg_569");
    sc_trace(mVcdFile, exitcond_i7_fu_397_p2, "exitcond_i7_fu_397_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, i_2_cast_fu_419_p1, "i_2_cast_fu_419_p1");
    sc_trace(mVcdFile, i_2_cast_reg_579, "i_2_cast_reg_579");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, i_14_fu_429_p2, "i_14_fu_429_p2");
    sc_trace(mVcdFile, i_14_reg_587, "i_14_reg_587");
    sc_trace(mVcdFile, tmp_33_fu_439_p3, "tmp_33_fu_439_p3");
    sc_trace(mVcdFile, tmp_33_reg_592, "tmp_33_reg_592");
    sc_trace(mVcdFile, exitcond1_fu_423_p2, "exitcond1_fu_423_p2");
    sc_trace(mVcdFile, j_7_fu_457_p2, "j_7_fu_457_p2");
    sc_trace(mVcdFile, j_7_reg_600, "j_7_reg_600");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, exitcond_fu_451_p2, "exitcond_fu_451_p2");
    sc_trace(mVcdFile, tmp_37_fu_485_p2, "tmp_37_fu_485_p2");
    sc_trace(mVcdFile, tmp_37_reg_610, "tmp_37_reg_610");
    sc_trace(mVcdFile, state_address0, "state_address0");
    sc_trace(mVcdFile, state_ce0, "state_ce0");
    sc_trace(mVcdFile, state_we0, "state_we0");
    sc_trace(mVcdFile, state_d0, "state_d0");
    sc_trace(mVcdFile, state_q0, "state_q0");
    sc_trace(mVcdFile, round_key_address0, "round_key_address0");
    sc_trace(mVcdFile, round_key_ce0, "round_key_ce0");
    sc_trace(mVcdFile, round_key_we0, "round_key_we0");
    sc_trace(mVcdFile, round_key_q0, "round_key_q0");
    sc_trace(mVcdFile, expanded_key_address0, "expanded_key_address0");
    sc_trace(mVcdFile, expanded_key_ce0, "expanded_key_ce0");
    sc_trace(mVcdFile, expanded_key_we0, "expanded_key_we0");
    sc_trace(mVcdFile, expanded_key_q0, "expanded_key_q0");
    sc_trace(mVcdFile, grp_aes128_mix_columns_h_fu_239_ap_start, "grp_aes128_mix_columns_h_fu_239_ap_start");
    sc_trace(mVcdFile, grp_aes128_mix_columns_h_fu_239_ap_done, "grp_aes128_mix_columns_h_fu_239_ap_done");
    sc_trace(mVcdFile, grp_aes128_mix_columns_h_fu_239_ap_idle, "grp_aes128_mix_columns_h_fu_239_ap_idle");
    sc_trace(mVcdFile, grp_aes128_mix_columns_h_fu_239_ap_ready, "grp_aes128_mix_columns_h_fu_239_ap_ready");
    sc_trace(mVcdFile, grp_aes128_mix_columns_h_fu_239_state_address0, "grp_aes128_mix_columns_h_fu_239_state_address0");
    sc_trace(mVcdFile, grp_aes128_mix_columns_h_fu_239_state_ce0, "grp_aes128_mix_columns_h_fu_239_state_ce0");
    sc_trace(mVcdFile, grp_aes128_mix_columns_h_fu_239_state_we0, "grp_aes128_mix_columns_h_fu_239_state_we0");
    sc_trace(mVcdFile, grp_aes128_mix_columns_h_fu_239_state_d0, "grp_aes128_mix_columns_h_fu_239_state_d0");
    sc_trace(mVcdFile, grp_aes128_expand_key_hw_fu_244_ap_start, "grp_aes128_expand_key_hw_fu_244_ap_start");
    sc_trace(mVcdFile, grp_aes128_expand_key_hw_fu_244_ap_done, "grp_aes128_expand_key_hw_fu_244_ap_done");
    sc_trace(mVcdFile, grp_aes128_expand_key_hw_fu_244_ap_idle, "grp_aes128_expand_key_hw_fu_244_ap_idle");
    sc_trace(mVcdFile, grp_aes128_expand_key_hw_fu_244_ap_ready, "grp_aes128_expand_key_hw_fu_244_ap_ready");
    sc_trace(mVcdFile, grp_aes128_expand_key_hw_fu_244_key_address0, "grp_aes128_expand_key_hw_fu_244_key_address0");
    sc_trace(mVcdFile, grp_aes128_expand_key_hw_fu_244_key_ce0, "grp_aes128_expand_key_hw_fu_244_key_ce0");
    sc_trace(mVcdFile, grp_aes128_expand_key_hw_fu_244_expanded_key_address0, "grp_aes128_expand_key_hw_fu_244_expanded_key_address0");
    sc_trace(mVcdFile, grp_aes128_expand_key_hw_fu_244_expanded_key_ce0, "grp_aes128_expand_key_hw_fu_244_expanded_key_ce0");
    sc_trace(mVcdFile, grp_aes128_expand_key_hw_fu_244_expanded_key_we0, "grp_aes128_expand_key_hw_fu_244_expanded_key_we0");
    sc_trace(mVcdFile, grp_aes128_expand_key_hw_fu_244_expanded_key_d0, "grp_aes128_expand_key_hw_fu_244_expanded_key_d0");
    sc_trace(mVcdFile, grp_aes128_shift_rows_hw_fu_255_ap_start, "grp_aes128_shift_rows_hw_fu_255_ap_start");
    sc_trace(mVcdFile, grp_aes128_shift_rows_hw_fu_255_ap_done, "grp_aes128_shift_rows_hw_fu_255_ap_done");
    sc_trace(mVcdFile, grp_aes128_shift_rows_hw_fu_255_ap_idle, "grp_aes128_shift_rows_hw_fu_255_ap_idle");
    sc_trace(mVcdFile, grp_aes128_shift_rows_hw_fu_255_ap_ready, "grp_aes128_shift_rows_hw_fu_255_ap_ready");
    sc_trace(mVcdFile, grp_aes128_shift_rows_hw_fu_255_state_address0, "grp_aes128_shift_rows_hw_fu_255_state_address0");
    sc_trace(mVcdFile, grp_aes128_shift_rows_hw_fu_255_state_ce0, "grp_aes128_shift_rows_hw_fu_255_state_ce0");
    sc_trace(mVcdFile, grp_aes128_shift_rows_hw_fu_255_state_we0, "grp_aes128_shift_rows_hw_fu_255_state_we0");
    sc_trace(mVcdFile, grp_aes128_shift_rows_hw_fu_255_state_d0, "grp_aes128_shift_rows_hw_fu_255_state_d0");
    sc_trace(mVcdFile, grp_aes128_extract_round_fu_260_ap_start, "grp_aes128_extract_round_fu_260_ap_start");
    sc_trace(mVcdFile, grp_aes128_extract_round_fu_260_ap_done, "grp_aes128_extract_round_fu_260_ap_done");
    sc_trace(mVcdFile, grp_aes128_extract_round_fu_260_ap_idle, "grp_aes128_extract_round_fu_260_ap_idle");
    sc_trace(mVcdFile, grp_aes128_extract_round_fu_260_ap_ready, "grp_aes128_extract_round_fu_260_ap_ready");
    sc_trace(mVcdFile, grp_aes128_extract_round_fu_260_expanded_key_address0, "grp_aes128_extract_round_fu_260_expanded_key_address0");
    sc_trace(mVcdFile, grp_aes128_extract_round_fu_260_expanded_key_ce0, "grp_aes128_extract_round_fu_260_expanded_key_ce0");
    sc_trace(mVcdFile, grp_aes128_extract_round_fu_260_expanded_key_offset, "grp_aes128_extract_round_fu_260_expanded_key_offset");
    sc_trace(mVcdFile, grp_aes128_extract_round_fu_260_round_key_address0, "grp_aes128_extract_round_fu_260_round_key_address0");
    sc_trace(mVcdFile, grp_aes128_extract_round_fu_260_round_key_ce0, "grp_aes128_extract_round_fu_260_round_key_ce0");
    sc_trace(mVcdFile, grp_aes128_extract_round_fu_260_round_key_we0, "grp_aes128_extract_round_fu_260_round_key_we0");
    sc_trace(mVcdFile, grp_aes128_extract_round_fu_260_round_key_d0, "grp_aes128_extract_round_fu_260_round_key_d0");
    sc_trace(mVcdFile, grp_aes128_add_round_key_fu_269_ap_start, "grp_aes128_add_round_key_fu_269_ap_start");
    sc_trace(mVcdFile, grp_aes128_add_round_key_fu_269_ap_done, "grp_aes128_add_round_key_fu_269_ap_done");
    sc_trace(mVcdFile, grp_aes128_add_round_key_fu_269_ap_idle, "grp_aes128_add_round_key_fu_269_ap_idle");
    sc_trace(mVcdFile, grp_aes128_add_round_key_fu_269_ap_ready, "grp_aes128_add_round_key_fu_269_ap_ready");
    sc_trace(mVcdFile, grp_aes128_add_round_key_fu_269_state_address0, "grp_aes128_add_round_key_fu_269_state_address0");
    sc_trace(mVcdFile, grp_aes128_add_round_key_fu_269_state_ce0, "grp_aes128_add_round_key_fu_269_state_ce0");
    sc_trace(mVcdFile, grp_aes128_add_round_key_fu_269_state_we0, "grp_aes128_add_round_key_fu_269_state_we0");
    sc_trace(mVcdFile, grp_aes128_add_round_key_fu_269_state_d0, "grp_aes128_add_round_key_fu_269_state_d0");
    sc_trace(mVcdFile, grp_aes128_add_round_key_fu_269_round_key_address0, "grp_aes128_add_round_key_fu_269_round_key_address0");
    sc_trace(mVcdFile, grp_aes128_add_round_key_fu_269_round_key_ce0, "grp_aes128_add_round_key_fu_269_round_key_ce0");
    sc_trace(mVcdFile, i_reg_161, "i_reg_161");
    sc_trace(mVcdFile, j_reg_172, "j_reg_172");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_1_reg_183, "i_1_reg_183");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, i_i_reg_195, "i_i_reg_195");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, i_i6_reg_206, "i_i6_reg_206");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, i_2_reg_217, "i_2_reg_217");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, j_1_reg_228, "j_1_reg_228");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, grp_aes128_mix_columns_h_fu_239_ap_start_reg, "grp_aes128_mix_columns_h_fu_239_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, grp_aes128_expand_key_hw_fu_244_ap_start_reg, "grp_aes128_expand_key_hw_fu_244_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, grp_aes128_shift_rows_hw_fu_255_ap_start_reg, "grp_aes128_shift_rows_hw_fu_255_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, grp_aes128_extract_round_fu_260_ap_start_reg, "grp_aes128_extract_round_fu_260_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, grp_aes128_add_round_key_fu_269_ap_start_reg, "grp_aes128_add_round_key_fu_269_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, tmp_29_fu_324_p1, "tmp_29_fu_324_p1");
    sc_trace(mVcdFile, tmp_32_fu_346_p1, "tmp_32_fu_346_p1");
    sc_trace(mVcdFile, tmp_i_fu_381_p1, "tmp_i_fu_381_p1");
    sc_trace(mVcdFile, tmp_i_19_fu_392_p1, "tmp_i_19_fu_392_p1");
    sc_trace(mVcdFile, tmp_i8_fu_409_p1, "tmp_i8_fu_409_p1");
    sc_trace(mVcdFile, tmp_i1_fu_414_p1, "tmp_i1_fu_414_p1");
    sc_trace(mVcdFile, tmp_36_fu_480_p1, "tmp_36_fu_480_p1");
    sc_trace(mVcdFile, tmp_38_fu_490_p1, "tmp_38_fu_490_p1");
    sc_trace(mVcdFile, tmp_39_fu_291_p1, "tmp_39_fu_291_p1");
    sc_trace(mVcdFile, j_cast_fu_303_p1, "j_cast_fu_303_p1");
    sc_trace(mVcdFile, tmp_28_fu_319_p2, "tmp_28_fu_319_p2");
    sc_trace(mVcdFile, tmp_40_fu_329_p1, "tmp_40_fu_329_p1");
    sc_trace(mVcdFile, tmp_30_fu_333_p3, "tmp_30_fu_333_p3");
    sc_trace(mVcdFile, tmp_s_fu_356_p3, "tmp_s_fu_356_p3");
    sc_trace(mVcdFile, tmp_41_fu_435_p1, "tmp_41_fu_435_p1");
    sc_trace(mVcdFile, tmp_42_fu_463_p1, "tmp_42_fu_463_p1");
    sc_trace(mVcdFile, tmp_34_fu_467_p3, "tmp_34_fu_467_p3");
    sc_trace(mVcdFile, tmp_35_fu_475_p2, "tmp_35_fu_475_p2");
    sc_trace(mVcdFile, j_1_cast_fu_447_p1, "j_1_cast_fu_447_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_state23_on_subcall_done, "ap_block_state23_on_subcall_done");
#endif

    }
    mHdltvinHandle.open("aes128_encrypt_block_hw.hdltvin.dat");
    mHdltvoutHandle.open("aes128_encrypt_block_hw.hdltvout.dat");
}

aes128_encrypt_block_hw::~aes128_encrypt_block_hw() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete sbox_hw_U;
    delete state_U;
    delete round_key_U;
    delete expanded_key_U;
    delete grp_aes128_mix_columns_h_fu_239;
    delete grp_aes128_expand_key_hw_fu_244;
    delete grp_aes128_shift_rows_hw_fu_255;
    delete grp_aes128_extract_round_fu_260;
    delete grp_aes128_add_round_key_fu_269;
}

void aes128_encrypt_block_hw::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_aes128_add_round_key_fu_269_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
            grp_aes128_add_round_key_fu_269_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_aes128_add_round_key_fu_269_ap_ready.read())) {
            grp_aes128_add_round_key_fu_269_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_aes128_expand_key_hw_fu_244_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(exitcond4_fu_279_p2.read(), ap_const_lv1_1))) {
            grp_aes128_expand_key_hw_fu_244_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_aes128_expand_key_hw_fu_244_ap_ready.read())) {
            grp_aes128_expand_key_hw_fu_244_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_aes128_extract_round_fu_260_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_350_p2.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i7_fu_397_p2.read())) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
            grp_aes128_extract_round_fu_260_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_aes128_extract_round_fu_260_ap_ready.read())) {
            grp_aes128_extract_round_fu_260_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_aes128_mix_columns_h_fu_239_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
            grp_aes128_mix_columns_h_fu_239_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_aes128_mix_columns_h_fu_239_ap_ready.read())) {
            grp_aes128_mix_columns_h_fu_239_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_aes128_shift_rows_hw_fu_255_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
              esl_seteq<1,1,1>(exitcond_i_fu_369_p2.read(), ap_const_lv1_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i7_fu_397_p2.read())))) {
            grp_aes128_shift_rows_hw_fu_255_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_aes128_shift_rows_hw_fu_255_ap_ready.read())) {
            grp_aes128_shift_rows_hw_fu_255_ap_start_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(grp_aes128_add_round_key_fu_269_ap_done.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
            i_1_reg_183 = i_13_reg_551.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            i_1_reg_183 = ap_const_lv4_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_451_p2.read()))) {
        i_2_reg_217 = i_14_reg_587.read();
    } else if ((esl_seteq<1,1,1>(grp_aes128_add_round_key_fu_269_ap_done.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        i_2_reg_217 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_350_p2.read(), ap_const_lv1_1))) {
        i_i6_reg_206 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        i_i6_reg_206 = i_12_reg_564.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        i_i_reg_195 = i_3_reg_541.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
                esl_seteq<1,1,1>(grp_aes128_extract_round_fu_260_ap_done.read(), ap_const_logic_1))) {
        i_i_reg_195 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond3_fu_307_p2.read(), ap_const_lv1_1))) {
        i_reg_161 = i_11_reg_502.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_161 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_423_p2.read()))) {
        j_1_reg_228 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        j_1_reg_228 = j_7_reg_600.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond4_fu_279_p2.read(), ap_const_lv1_0))) {
        j_reg_172 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_reg_172 = j_6_reg_515.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_11_reg_502 = i_11_fu_285_p2.read();
        i_cast_reg_494 = i_cast_fu_275_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        i_12_reg_564 = i_12_fu_403_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(exitcond_i_fu_369_p2.read(), ap_const_lv1_1))) {
        i_13_reg_551 = i_13_fu_386_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        i_14_reg_587 = i_14_fu_429_p2.read();
        i_2_cast_reg_579 = i_2_cast_fu_419_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        i_3_reg_541 = i_3_fu_375_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_6_reg_515 = j_6_fu_313_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        j_7_reg_600 = j_7_fu_457_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i7_fu_397_p2.read()))) {
        state_addr_5_reg_569 =  (sc_lv<4>) (tmp_i8_fu_409_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_369_p2.read()))) {
        state_addr_6_reg_546 =  (sc_lv<4>) (tmp_i_fu_381_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_307_p2.read()))) {
        tmp_31_reg_525 = tmp_31_fu_341_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_423_p2.read()))) {
        tmp_33_reg_592 = tmp_33_fu_439_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_451_p2.read()))) {
        tmp_37_reg_610 = tmp_37_fu_485_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_350_p2.read()))) {
        tmp_41_cast_reg_533 = tmp_41_cast_fu_364_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond4_fu_279_p2.read(), ap_const_lv1_0))) {
        tmp_reg_507 = tmp_fu_295_p3.read();
    }
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void aes128_encrypt_block_hw::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void aes128_encrypt_block_hw::thread_ap_block_state23_on_subcall_done() {
    ap_block_state23_on_subcall_done = (esl_seteq<1,1,1>(ap_const_logic_0, grp_aes128_extract_round_fu_260_ap_done.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_aes128_shift_rows_hw_fu_255_ap_done.read()));
}

void aes128_encrypt_block_hw::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_423_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_423_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_exitcond1_fu_423_p2() {
    exitcond1_fu_423_p2 = (!i_2_reg_217.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_2_reg_217.read() == ap_const_lv3_4);
}

void aes128_encrypt_block_hw::thread_exitcond2_fu_350_p2() {
    exitcond2_fu_350_p2 = (!i_1_reg_183.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_183.read() == ap_const_lv4_A);
}

void aes128_encrypt_block_hw::thread_exitcond3_fu_307_p2() {
    exitcond3_fu_307_p2 = (!j_reg_172.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_172.read() == ap_const_lv3_4);
}

void aes128_encrypt_block_hw::thread_exitcond4_fu_279_p2() {
    exitcond4_fu_279_p2 = (!i_reg_161.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_161.read() == ap_const_lv3_4);
}

void aes128_encrypt_block_hw::thread_exitcond_fu_451_p2() {
    exitcond_fu_451_p2 = (!j_1_reg_228.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(j_1_reg_228.read() == ap_const_lv3_4);
}

void aes128_encrypt_block_hw::thread_exitcond_i7_fu_397_p2() {
    exitcond_i7_fu_397_p2 = (!i_i6_reg_206.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_i6_reg_206.read() == ap_const_lv5_10);
}

void aes128_encrypt_block_hw::thread_exitcond_i_fu_369_p2() {
    exitcond_i_fu_369_p2 = (!i_i_reg_195.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_i_reg_195.read() == ap_const_lv5_10);
}

void aes128_encrypt_block_hw::thread_expanded_key_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        expanded_key_address0 = grp_aes128_extract_round_fu_260_expanded_key_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        expanded_key_address0 = grp_aes128_expand_key_hw_fu_244_expanded_key_address0.read();
    } else {
        expanded_key_address0 = "XXXXXXXX";
    }
}

void aes128_encrypt_block_hw::thread_expanded_key_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        expanded_key_ce0 = grp_aes128_extract_round_fu_260_expanded_key_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        expanded_key_ce0 = grp_aes128_expand_key_hw_fu_244_expanded_key_ce0.read();
    } else {
        expanded_key_ce0 = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_expanded_key_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        expanded_key_we0 = grp_aes128_expand_key_hw_fu_244_expanded_key_we0.read();
    } else {
        expanded_key_we0 = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_grp_aes128_add_round_key_fu_269_ap_start() {
    grp_aes128_add_round_key_fu_269_ap_start = grp_aes128_add_round_key_fu_269_ap_start_reg.read();
}

void aes128_encrypt_block_hw::thread_grp_aes128_expand_key_hw_fu_244_ap_start() {
    grp_aes128_expand_key_hw_fu_244_ap_start = grp_aes128_expand_key_hw_fu_244_ap_start_reg.read();
}

void aes128_encrypt_block_hw::thread_grp_aes128_extract_round_fu_260_ap_start() {
    grp_aes128_extract_round_fu_260_ap_start = grp_aes128_extract_round_fu_260_ap_start_reg.read();
}

void aes128_encrypt_block_hw::thread_grp_aes128_extract_round_fu_260_expanded_key_offset() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        grp_aes128_extract_round_fu_260_expanded_key_offset = ap_const_lv10_A0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        grp_aes128_extract_round_fu_260_expanded_key_offset = tmp_41_cast_reg_533.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_aes128_extract_round_fu_260_expanded_key_offset = ap_const_lv10_0;
    } else {
        grp_aes128_extract_round_fu_260_expanded_key_offset =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void aes128_encrypt_block_hw::thread_grp_aes128_mix_columns_h_fu_239_ap_start() {
    grp_aes128_mix_columns_h_fu_239_ap_start = grp_aes128_mix_columns_h_fu_239_ap_start_reg.read();
}

void aes128_encrypt_block_hw::thread_grp_aes128_shift_rows_hw_fu_255_ap_start() {
    grp_aes128_shift_rows_hw_fu_255_ap_start = grp_aes128_shift_rows_hw_fu_255_ap_start_reg.read();
}

void aes128_encrypt_block_hw::thread_i_11_fu_285_p2() {
    i_11_fu_285_p2 = (!i_reg_161.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_reg_161.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aes128_encrypt_block_hw::thread_i_12_fu_403_p2() {
    i_12_fu_403_p2 = (!i_i6_reg_206.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_i6_reg_206.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void aes128_encrypt_block_hw::thread_i_13_fu_386_p2() {
    i_13_fu_386_p2 = (!i_1_reg_183.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_1_reg_183.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void aes128_encrypt_block_hw::thread_i_14_fu_429_p2() {
    i_14_fu_429_p2 = (!i_2_reg_217.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_2_reg_217.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aes128_encrypt_block_hw::thread_i_2_cast_fu_419_p1() {
    i_2_cast_fu_419_p1 = esl_zext<4,3>(i_2_reg_217.read());
}

void aes128_encrypt_block_hw::thread_i_3_fu_375_p2() {
    i_3_fu_375_p2 = (!i_i_reg_195.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_i_reg_195.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void aes128_encrypt_block_hw::thread_i_cast_fu_275_p1() {
    i_cast_fu_275_p1 = esl_zext<4,3>(i_reg_161.read());
}

void aes128_encrypt_block_hw::thread_in_r_address0() {
    in_r_address0 =  (sc_lv<4>) (tmp_29_fu_324_p1.read());
}

void aes128_encrypt_block_hw::thread_in_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        in_r_ce0 = ap_const_logic_1;
    } else {
        in_r_ce0 = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_j_1_cast_fu_447_p1() {
    j_1_cast_fu_447_p1 = esl_zext<4,3>(j_1_reg_228.read());
}

void aes128_encrypt_block_hw::thread_j_6_fu_313_p2() {
    j_6_fu_313_p2 = (!j_reg_172.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_reg_172.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aes128_encrypt_block_hw::thread_j_7_fu_457_p2() {
    j_7_fu_457_p2 = (!j_1_reg_228.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_1_reg_228.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aes128_encrypt_block_hw::thread_j_cast_fu_303_p1() {
    j_cast_fu_303_p1 = esl_zext<4,3>(j_reg_172.read());
}

void aes128_encrypt_block_hw::thread_key_address0() {
    key_address0 = grp_aes128_expand_key_hw_fu_244_key_address0.read();
}

void aes128_encrypt_block_hw::thread_key_ce0() {
    key_ce0 = grp_aes128_expand_key_hw_fu_244_key_ce0.read();
}

void aes128_encrypt_block_hw::thread_out_r_address0() {
    out_r_address0 =  (sc_lv<4>) (tmp_38_fu_490_p1.read());
}

void aes128_encrypt_block_hw::thread_out_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        out_r_ce0 = ap_const_logic_1;
    } else {
        out_r_ce0 = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_out_r_d0() {
    out_r_d0 = state_q0.read();
}

void aes128_encrypt_block_hw::thread_out_r_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        out_r_we0 = ap_const_logic_1;
    } else {
        out_r_we0 = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_round_key_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        round_key_address0 = grp_aes128_add_round_key_fu_269_round_key_address0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        round_key_address0 = grp_aes128_extract_round_fu_260_round_key_address0.read();
    } else {
        round_key_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void aes128_encrypt_block_hw::thread_round_key_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        round_key_ce0 = grp_aes128_add_round_key_fu_269_round_key_ce0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        round_key_ce0 = grp_aes128_extract_round_fu_260_round_key_ce0.read();
    } else {
        round_key_ce0 = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_round_key_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        round_key_we0 = grp_aes128_extract_round_fu_260_round_key_we0.read();
    } else {
        round_key_we0 = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_sbox_hw_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        sbox_hw_address0 =  (sc_lv<8>) (tmp_i1_fu_414_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        sbox_hw_address0 =  (sc_lv<8>) (tmp_i_19_fu_392_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sbox_hw_address0 = ap_const_lv8_0;
    } else {
        sbox_hw_address0 = "XXXXXXXX";
    }
}

void aes128_encrypt_block_hw::thread_sbox_hw_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        sbox_hw_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sbox_hw_ce0 = ap_const_logic_0;
    } else {
        sbox_hw_ce0 = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_state_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        state_address0 =  (sc_lv<4>) (tmp_36_fu_480_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        state_address0 = state_addr_5_reg_569.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i7_fu_397_p2.read()))) {
        state_address0 =  (sc_lv<4>) (tmp_i8_fu_409_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_address0 = state_addr_6_reg_546.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_369_p2.read()))) {
        state_address0 =  (sc_lv<4>) (tmp_i_fu_381_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_address0 =  (sc_lv<4>) (tmp_32_fu_346_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        state_address0 = grp_aes128_add_round_key_fu_269_state_address0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        state_address0 = grp_aes128_shift_rows_hw_fu_255_state_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        state_address0 = grp_aes128_mix_columns_h_fu_239_state_address0.read();
    } else {
        state_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void aes128_encrypt_block_hw::thread_state_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_369_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i7_fu_397_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        state_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        state_ce0 = grp_aes128_add_round_key_fu_269_state_ce0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        state_ce0 = grp_aes128_shift_rows_hw_fu_255_state_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        state_ce0 = grp_aes128_mix_columns_h_fu_239_state_ce0.read();
    } else {
        state_ce0 = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_state_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        state_d0 = sbox_hw_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_d0 = in_r_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        state_d0 = grp_aes128_add_round_key_fu_269_state_d0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        state_d0 = grp_aes128_shift_rows_hw_fu_255_state_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        state_d0 = grp_aes128_mix_columns_h_fu_239_state_d0.read();
    } else {
        state_d0 = "XXXXXXXX";
    }
}

void aes128_encrypt_block_hw::thread_state_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        state_we0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        state_we0 = grp_aes128_add_round_key_fu_269_state_we0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        state_we0 = grp_aes128_shift_rows_hw_fu_255_state_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        state_we0 = grp_aes128_mix_columns_h_fu_239_state_we0.read();
    } else {
        state_we0 = ap_const_logic_0;
    }
}

void aes128_encrypt_block_hw::thread_tmp_28_fu_319_p2() {
    tmp_28_fu_319_p2 = (!j_cast_fu_303_p1.read().is_01() || !tmp_reg_507.read().is_01())? sc_lv<4>(): (sc_biguint<4>(j_cast_fu_303_p1.read()) + sc_biguint<4>(tmp_reg_507.read()));
}

void aes128_encrypt_block_hw::thread_tmp_29_fu_324_p1() {
    tmp_29_fu_324_p1 = esl_zext<64,4>(tmp_28_fu_319_p2.read());
}

void aes128_encrypt_block_hw::thread_tmp_30_fu_333_p3() {
    tmp_30_fu_333_p3 = esl_concat<2,2>(tmp_40_fu_329_p1.read(), ap_const_lv2_0);
}

void aes128_encrypt_block_hw::thread_tmp_31_fu_341_p2() {
    tmp_31_fu_341_p2 = (!tmp_30_fu_333_p3.read().is_01() || !i_cast_reg_494.read().is_01())? sc_lv<4>(): (sc_biguint<4>(tmp_30_fu_333_p3.read()) + sc_biguint<4>(i_cast_reg_494.read()));
}

void aes128_encrypt_block_hw::thread_tmp_32_fu_346_p1() {
    tmp_32_fu_346_p1 = esl_zext<64,4>(tmp_31_reg_525.read());
}

void aes128_encrypt_block_hw::thread_tmp_33_fu_439_p3() {
    tmp_33_fu_439_p3 = esl_concat<2,2>(tmp_41_fu_435_p1.read(), ap_const_lv2_0);
}

void aes128_encrypt_block_hw::thread_tmp_34_fu_467_p3() {
    tmp_34_fu_467_p3 = esl_concat<2,2>(tmp_42_fu_463_p1.read(), ap_const_lv2_0);
}

void aes128_encrypt_block_hw::thread_tmp_35_fu_475_p2() {
    tmp_35_fu_475_p2 = (!tmp_34_fu_467_p3.read().is_01() || !i_2_cast_reg_579.read().is_01())? sc_lv<4>(): (sc_biguint<4>(tmp_34_fu_467_p3.read()) + sc_biguint<4>(i_2_cast_reg_579.read()));
}

void aes128_encrypt_block_hw::thread_tmp_36_fu_480_p1() {
    tmp_36_fu_480_p1 = esl_zext<64,4>(tmp_35_fu_475_p2.read());
}

void aes128_encrypt_block_hw::thread_tmp_37_fu_485_p2() {
    tmp_37_fu_485_p2 = (!j_1_cast_fu_447_p1.read().is_01() || !tmp_33_reg_592.read().is_01())? sc_lv<4>(): (sc_biguint<4>(j_1_cast_fu_447_p1.read()) + sc_biguint<4>(tmp_33_reg_592.read()));
}

void aes128_encrypt_block_hw::thread_tmp_38_fu_490_p1() {
    tmp_38_fu_490_p1 = esl_zext<64,4>(tmp_37_reg_610.read());
}

void aes128_encrypt_block_hw::thread_tmp_39_fu_291_p1() {
    tmp_39_fu_291_p1 = i_reg_161.read().range(2-1, 0);
}

void aes128_encrypt_block_hw::thread_tmp_40_fu_329_p1() {
    tmp_40_fu_329_p1 = j_reg_172.read().range(2-1, 0);
}

void aes128_encrypt_block_hw::thread_tmp_41_cast_fu_364_p1() {
    tmp_41_cast_fu_364_p1 = esl_zext<10,8>(tmp_s_fu_356_p3.read());
}

void aes128_encrypt_block_hw::thread_tmp_41_fu_435_p1() {
    tmp_41_fu_435_p1 = i_2_reg_217.read().range(2-1, 0);
}

void aes128_encrypt_block_hw::thread_tmp_42_fu_463_p1() {
    tmp_42_fu_463_p1 = j_1_reg_228.read().range(2-1, 0);
}

void aes128_encrypt_block_hw::thread_tmp_fu_295_p3() {
    tmp_fu_295_p3 = esl_concat<2,2>(tmp_39_fu_291_p1.read(), ap_const_lv2_0);
}

void aes128_encrypt_block_hw::thread_tmp_i1_fu_414_p1() {
    tmp_i1_fu_414_p1 = esl_zext<64,8>(state_q0.read());
}

void aes128_encrypt_block_hw::thread_tmp_i8_fu_409_p1() {
    tmp_i8_fu_409_p1 = esl_zext<64,5>(i_i6_reg_206.read());
}

void aes128_encrypt_block_hw::thread_tmp_i_19_fu_392_p1() {
    tmp_i_19_fu_392_p1 = esl_zext<64,8>(state_q0.read());
}

void aes128_encrypt_block_hw::thread_tmp_i_fu_381_p1() {
    tmp_i_fu_381_p1 = esl_zext<64,5>(i_i_reg_195.read());
}

void aes128_encrypt_block_hw::thread_tmp_s_fu_356_p3() {
    tmp_s_fu_356_p3 = esl_concat<4,4>(i_1_reg_183.read(), ap_const_lv4_0);
}

void aes128_encrypt_block_hw::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond4_fu_279_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond3_fu_307_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(grp_aes128_expand_key_hw_fu_244_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(grp_aes128_extract_round_fu_260_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(grp_aes128_add_round_key_fu_269_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(exitcond2_fu_350_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state20;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(grp_aes128_extract_round_fu_260_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(exitcond_i_fu_369_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(grp_aes128_shift_rows_hw_fu_255_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(grp_aes128_mix_columns_h_fu_239_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state18;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            if ((esl_seteq<1,1,1>(grp_aes128_add_round_key_fu_269_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state19;
            }
            break;
        case 524288 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i7_fu_397_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state23;
            } else {
                ap_NS_fsm = ap_ST_fsm_state21;
            }
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 4194304 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && esl_seteq<1,1,1>(ap_block_state23_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state24;
            } else {
                ap_NS_fsm = ap_ST_fsm_state23;
            }
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            if ((esl_seteq<1,1,1>(grp_aes128_add_round_key_fu_269_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
                ap_NS_fsm = ap_ST_fsm_state26;
            } else {
                ap_NS_fsm = ap_ST_fsm_state25;
            }
            break;
        case 33554432 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_423_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state27;
            }
            break;
        case 67108864 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_451_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state26;
            } else {
                ap_NS_fsm = ap_ST_fsm_state28;
            }
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<28>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void aes128_encrypt_block_hw::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_r_address0\" :  \"" << in_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_r_ce0\" :  \"" << in_r_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_q0\" :  \"" << in_r_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"key_address0\" :  \"" << key_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"key_ce0\" :  \"" << key_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"key_q0\" :  \"" << key_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_address0\" :  \"" << out_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_ce0\" :  \"" << out_r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_we0\" :  \"" << out_r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_d0\" :  \"" << out_r_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

