// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aes128_sub_bytes_hw.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aes128_sub_bytes_hw::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aes128_sub_bytes_hw::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<16> aes128_sub_bytes_hw::ap_ST_fsm_state1 = "1";
const sc_lv<16> aes128_sub_bytes_hw::ap_ST_fsm_state2 = "10";
const sc_lv<16> aes128_sub_bytes_hw::ap_ST_fsm_state3 = "100";
const sc_lv<16> aes128_sub_bytes_hw::ap_ST_fsm_state4 = "1000";
const sc_lv<16> aes128_sub_bytes_hw::ap_ST_fsm_state5 = "10000";
const sc_lv<16> aes128_sub_bytes_hw::ap_ST_fsm_state6 = "100000";
const sc_lv<16> aes128_sub_bytes_hw::ap_ST_fsm_state7 = "1000000";
const sc_lv<16> aes128_sub_bytes_hw::ap_ST_fsm_state8 = "10000000";
const sc_lv<16> aes128_sub_bytes_hw::ap_ST_fsm_state9 = "100000000";
const sc_lv<16> aes128_sub_bytes_hw::ap_ST_fsm_state10 = "1000000000";
const sc_lv<16> aes128_sub_bytes_hw::ap_ST_fsm_state11 = "10000000000";
const sc_lv<16> aes128_sub_bytes_hw::ap_ST_fsm_state12 = "100000000000";
const sc_lv<16> aes128_sub_bytes_hw::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<16> aes128_sub_bytes_hw::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<16> aes128_sub_bytes_hw::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<16> aes128_sub_bytes_hw::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<32> aes128_sub_bytes_hw::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> aes128_sub_bytes_hw::ap_const_lv32_1 = "1";
const sc_lv<32> aes128_sub_bytes_hw::ap_const_lv32_7 = "111";
const sc_lv<32> aes128_sub_bytes_hw::ap_const_lv32_2 = "10";
const sc_lv<32> aes128_sub_bytes_hw::ap_const_lv32_8 = "1000";
const sc_lv<32> aes128_sub_bytes_hw::ap_const_lv32_3 = "11";
const sc_lv<32> aes128_sub_bytes_hw::ap_const_lv32_4 = "100";
const sc_lv<32> aes128_sub_bytes_hw::ap_const_lv32_5 = "101";
const sc_lv<32> aes128_sub_bytes_hw::ap_const_lv32_6 = "110";
const sc_lv<32> aes128_sub_bytes_hw::ap_const_lv32_9 = "1001";
const sc_lv<32> aes128_sub_bytes_hw::ap_const_lv32_A = "1010";
const sc_lv<32> aes128_sub_bytes_hw::ap_const_lv32_B = "1011";
const sc_lv<32> aes128_sub_bytes_hw::ap_const_lv32_C = "1100";
const sc_lv<32> aes128_sub_bytes_hw::ap_const_lv32_D = "1101";
const sc_lv<32> aes128_sub_bytes_hw::ap_const_lv32_E = "1110";
const sc_lv<64> aes128_sub_bytes_hw::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> aes128_sub_bytes_hw::ap_const_lv64_1 = "1";
const sc_lv<64> aes128_sub_bytes_hw::ap_const_lv64_2 = "10";
const sc_lv<64> aes128_sub_bytes_hw::ap_const_lv64_3 = "11";
const sc_lv<64> aes128_sub_bytes_hw::ap_const_lv64_4 = "100";
const sc_lv<64> aes128_sub_bytes_hw::ap_const_lv64_5 = "101";
const sc_lv<64> aes128_sub_bytes_hw::ap_const_lv64_6 = "110";
const sc_lv<64> aes128_sub_bytes_hw::ap_const_lv64_7 = "111";
const sc_lv<64> aes128_sub_bytes_hw::ap_const_lv64_8 = "1000";
const sc_lv<64> aes128_sub_bytes_hw::ap_const_lv64_9 = "1001";
const sc_lv<64> aes128_sub_bytes_hw::ap_const_lv64_A = "1010";
const sc_lv<64> aes128_sub_bytes_hw::ap_const_lv64_B = "1011";
const sc_lv<64> aes128_sub_bytes_hw::ap_const_lv64_C = "1100";
const sc_lv<64> aes128_sub_bytes_hw::ap_const_lv64_D = "1101";
const sc_lv<64> aes128_sub_bytes_hw::ap_const_lv64_E = "1110";
const sc_lv<64> aes128_sub_bytes_hw::ap_const_lv64_F = "1111";
const sc_lv<32> aes128_sub_bytes_hw::ap_const_lv32_F = "1111";
const bool aes128_sub_bytes_hw::ap_const_boolean_1 = true;

aes128_sub_bytes_hw::aes128_sub_bytes_hw(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sbox_hw_U = new aes128_expand_keybkb("sbox_hw_U");
    sbox_hw_U->clk(ap_clk);
    sbox_hw_U->reset(ap_rst);
    sbox_hw_U->address0(sbox_hw_address0);
    sbox_hw_U->ce0(sbox_hw_ce0);
    sbox_hw_U->q0(sbox_hw_q0);
    sbox_hw_U->address1(sbox_hw_address1);
    sbox_hw_U->ce1(sbox_hw_ce1);
    sbox_hw_U->q1(sbox_hw_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_sbox_hw_address0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( tmp_s_fu_344_p1 );
    sensitive << ( tmp_2_fu_354_p1 );
    sensitive << ( tmp_4_fu_364_p1 );
    sensitive << ( tmp_6_fu_372_p1 );
    sensitive << ( tmp_8_fu_380_p1 );
    sensitive << ( tmp_s_3_fu_388_p1 );
    sensitive << ( tmp_11_fu_396_p1 );
    sensitive << ( tmp_13_fu_406_p1 );

    SC_METHOD(thread_sbox_hw_address1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( tmp_1_fu_349_p1 );
    sensitive << ( tmp_3_fu_359_p1 );
    sensitive << ( tmp_5_fu_368_p1 );
    sensitive << ( tmp_7_fu_376_p1 );
    sensitive << ( tmp_9_fu_384_p1 );
    sensitive << ( tmp_10_fu_392_p1 );
    sensitive << ( tmp_12_fu_401_p1 );
    sensitive << ( tmp_14_fu_411_p1 );

    SC_METHOD(thread_sbox_hw_ce0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_sbox_hw_ce1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_state_addr_10_reg_496);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_addr_11_reg_501);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_addr_12_reg_516);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_state_addr_13_reg_521);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_state_addr_14_reg_536);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_addr_15_reg_541);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_addr_1_reg_421);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_state_addr_2_reg_426);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_state_addr_3_reg_431);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_state_addr_4_reg_436);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_state_addr_5_reg_441);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_state_addr_6_reg_456);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_state_addr_7_reg_461);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_state_addr_8_reg_476);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_addr_9_reg_481);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_addr_reg_416);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_state_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( state_addr_reg_416 );
    sensitive << ( state_addr_2_reg_426 );
    sensitive << ( state_addr_4_reg_436 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( state_addr_6_reg_456 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( state_addr_8_reg_476 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( state_addr_10_reg_496 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( state_addr_12_reg_516 );
    sensitive << ( state_addr_14_reg_536 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( state_addr_1_reg_421 );
    sensitive << ( state_addr_3_reg_431 );
    sensitive << ( state_addr_5_reg_441 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( state_addr_7_reg_461 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( state_addr_9_reg_481 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( state_addr_11_reg_501 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( state_addr_13_reg_521 );
    sensitive << ( state_addr_15_reg_541 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_d0);
    sensitive << ( sbox_hw_q0 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_d1);
    sensitive << ( sbox_hw_q1 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_we0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_we1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_tmp_10_fu_392_p1);
    sensitive << ( state_load_11_reg_511 );

    SC_METHOD(thread_tmp_11_fu_396_p1);
    sensitive << ( reg_328 );

    SC_METHOD(thread_tmp_12_fu_401_p1);
    sensitive << ( reg_332 );

    SC_METHOD(thread_tmp_13_fu_406_p1);
    sensitive << ( reg_336 );

    SC_METHOD(thread_tmp_14_fu_411_p1);
    sensitive << ( reg_340 );

    SC_METHOD(thread_tmp_1_fu_349_p1);
    sensitive << ( reg_332 );

    SC_METHOD(thread_tmp_2_fu_354_p1);
    sensitive << ( reg_336 );

    SC_METHOD(thread_tmp_3_fu_359_p1);
    sensitive << ( reg_340 );

    SC_METHOD(thread_tmp_4_fu_364_p1);
    sensitive << ( state_load_4_reg_446 );

    SC_METHOD(thread_tmp_5_fu_368_p1);
    sensitive << ( state_load_5_reg_451 );

    SC_METHOD(thread_tmp_6_fu_372_p1);
    sensitive << ( state_load_6_reg_466 );

    SC_METHOD(thread_tmp_7_fu_376_p1);
    sensitive << ( state_load_7_reg_471 );

    SC_METHOD(thread_tmp_8_fu_380_p1);
    sensitive << ( state_load_8_reg_486 );

    SC_METHOD(thread_tmp_9_fu_384_p1);
    sensitive << ( state_load_9_reg_491 );

    SC_METHOD(thread_tmp_s_3_fu_388_p1);
    sensitive << ( state_load_10_reg_506 );

    SC_METHOD(thread_tmp_s_fu_344_p1);
    sensitive << ( reg_328 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "0000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aes128_sub_bytes_hw_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_address0, "(port)state_address0");
    sc_trace(mVcdFile, state_ce0, "(port)state_ce0");
    sc_trace(mVcdFile, state_we0, "(port)state_we0");
    sc_trace(mVcdFile, state_d0, "(port)state_d0");
    sc_trace(mVcdFile, state_q0, "(port)state_q0");
    sc_trace(mVcdFile, state_address1, "(port)state_address1");
    sc_trace(mVcdFile, state_ce1, "(port)state_ce1");
    sc_trace(mVcdFile, state_we1, "(port)state_we1");
    sc_trace(mVcdFile, state_d1, "(port)state_d1");
    sc_trace(mVcdFile, state_q1, "(port)state_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sbox_hw_address0, "sbox_hw_address0");
    sc_trace(mVcdFile, sbox_hw_ce0, "sbox_hw_ce0");
    sc_trace(mVcdFile, sbox_hw_q0, "sbox_hw_q0");
    sc_trace(mVcdFile, sbox_hw_address1, "sbox_hw_address1");
    sc_trace(mVcdFile, sbox_hw_ce1, "sbox_hw_ce1");
    sc_trace(mVcdFile, sbox_hw_q1, "sbox_hw_q1");
    sc_trace(mVcdFile, reg_328, "reg_328");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, reg_332, "reg_332");
    sc_trace(mVcdFile, reg_336, "reg_336");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, reg_340, "reg_340");
    sc_trace(mVcdFile, state_addr_reg_416, "state_addr_reg_416");
    sc_trace(mVcdFile, state_addr_1_reg_421, "state_addr_1_reg_421");
    sc_trace(mVcdFile, state_addr_2_reg_426, "state_addr_2_reg_426");
    sc_trace(mVcdFile, state_addr_3_reg_431, "state_addr_3_reg_431");
    sc_trace(mVcdFile, state_addr_4_reg_436, "state_addr_4_reg_436");
    sc_trace(mVcdFile, state_addr_5_reg_441, "state_addr_5_reg_441");
    sc_trace(mVcdFile, state_load_4_reg_446, "state_load_4_reg_446");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, state_load_5_reg_451, "state_load_5_reg_451");
    sc_trace(mVcdFile, state_addr_6_reg_456, "state_addr_6_reg_456");
    sc_trace(mVcdFile, state_addr_7_reg_461, "state_addr_7_reg_461");
    sc_trace(mVcdFile, state_load_6_reg_466, "state_load_6_reg_466");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, state_load_7_reg_471, "state_load_7_reg_471");
    sc_trace(mVcdFile, state_addr_8_reg_476, "state_addr_8_reg_476");
    sc_trace(mVcdFile, state_addr_9_reg_481, "state_addr_9_reg_481");
    sc_trace(mVcdFile, state_load_8_reg_486, "state_load_8_reg_486");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, state_load_9_reg_491, "state_load_9_reg_491");
    sc_trace(mVcdFile, state_addr_10_reg_496, "state_addr_10_reg_496");
    sc_trace(mVcdFile, state_addr_11_reg_501, "state_addr_11_reg_501");
    sc_trace(mVcdFile, state_load_10_reg_506, "state_load_10_reg_506");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, state_load_11_reg_511, "state_load_11_reg_511");
    sc_trace(mVcdFile, state_addr_12_reg_516, "state_addr_12_reg_516");
    sc_trace(mVcdFile, state_addr_13_reg_521, "state_addr_13_reg_521");
    sc_trace(mVcdFile, state_addr_14_reg_536, "state_addr_14_reg_536");
    sc_trace(mVcdFile, state_addr_15_reg_541, "state_addr_15_reg_541");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, tmp_s_fu_344_p1, "tmp_s_fu_344_p1");
    sc_trace(mVcdFile, tmp_1_fu_349_p1, "tmp_1_fu_349_p1");
    sc_trace(mVcdFile, tmp_2_fu_354_p1, "tmp_2_fu_354_p1");
    sc_trace(mVcdFile, tmp_3_fu_359_p1, "tmp_3_fu_359_p1");
    sc_trace(mVcdFile, tmp_4_fu_364_p1, "tmp_4_fu_364_p1");
    sc_trace(mVcdFile, tmp_5_fu_368_p1, "tmp_5_fu_368_p1");
    sc_trace(mVcdFile, tmp_6_fu_372_p1, "tmp_6_fu_372_p1");
    sc_trace(mVcdFile, tmp_7_fu_376_p1, "tmp_7_fu_376_p1");
    sc_trace(mVcdFile, tmp_8_fu_380_p1, "tmp_8_fu_380_p1");
    sc_trace(mVcdFile, tmp_9_fu_384_p1, "tmp_9_fu_384_p1");
    sc_trace(mVcdFile, tmp_s_3_fu_388_p1, "tmp_s_3_fu_388_p1");
    sc_trace(mVcdFile, tmp_10_fu_392_p1, "tmp_10_fu_392_p1");
    sc_trace(mVcdFile, tmp_11_fu_396_p1, "tmp_11_fu_396_p1");
    sc_trace(mVcdFile, tmp_12_fu_401_p1, "tmp_12_fu_401_p1");
    sc_trace(mVcdFile, tmp_13_fu_406_p1, "tmp_13_fu_406_p1");
    sc_trace(mVcdFile, tmp_14_fu_411_p1, "tmp_14_fu_411_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

aes128_sub_bytes_hw::~aes128_sub_bytes_hw() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete sbox_hw_U;
}

void aes128_sub_bytes_hw::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        reg_328 = state_q0.read();
        reg_332 = state_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        reg_336 = state_q0.read();
        reg_340 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_load_10_reg_506 = state_q0.read();
        state_load_11_reg_511 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_load_4_reg_446 = state_q0.read();
        state_load_5_reg_451 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_load_6_reg_466 = state_q0.read();
        state_load_7_reg_471 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_load_8_reg_486 = state_q0.read();
        state_load_9_reg_491 = state_q1.read();
    }
}

void aes128_sub_bytes_hw::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void aes128_sub_bytes_hw::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void aes128_sub_bytes_hw::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void aes128_sub_bytes_hw::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void aes128_sub_bytes_hw::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void aes128_sub_bytes_hw::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void aes128_sub_bytes_hw::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void aes128_sub_bytes_hw::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void aes128_sub_bytes_hw::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void aes128_sub_bytes_hw::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void aes128_sub_bytes_hw::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void aes128_sub_bytes_hw::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void aes128_sub_bytes_hw::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void aes128_sub_bytes_hw::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void aes128_sub_bytes_hw::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void aes128_sub_bytes_hw::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void aes128_sub_bytes_hw::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aes128_sub_bytes_hw::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aes128_sub_bytes_hw::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aes128_sub_bytes_hw::thread_sbox_hw_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        sbox_hw_address0 =  (sc_lv<8>) (tmp_13_fu_406_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sbox_hw_address0 =  (sc_lv<8>) (tmp_11_fu_396_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        sbox_hw_address0 =  (sc_lv<8>) (tmp_s_3_fu_388_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        sbox_hw_address0 =  (sc_lv<8>) (tmp_8_fu_380_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        sbox_hw_address0 =  (sc_lv<8>) (tmp_6_fu_372_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        sbox_hw_address0 =  (sc_lv<8>) (tmp_4_fu_364_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        sbox_hw_address0 =  (sc_lv<8>) (tmp_2_fu_354_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sbox_hw_address0 =  (sc_lv<8>) (tmp_s_fu_344_p1.read());
    } else {
        sbox_hw_address0 = "XXXXXXXX";
    }
}

void aes128_sub_bytes_hw::thread_sbox_hw_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        sbox_hw_address1 =  (sc_lv<8>) (tmp_14_fu_411_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sbox_hw_address1 =  (sc_lv<8>) (tmp_12_fu_401_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        sbox_hw_address1 =  (sc_lv<8>) (tmp_10_fu_392_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        sbox_hw_address1 =  (sc_lv<8>) (tmp_9_fu_384_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        sbox_hw_address1 =  (sc_lv<8>) (tmp_7_fu_376_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        sbox_hw_address1 =  (sc_lv<8>) (tmp_5_fu_368_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        sbox_hw_address1 =  (sc_lv<8>) (tmp_3_fu_359_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sbox_hw_address1 =  (sc_lv<8>) (tmp_1_fu_349_p1.read());
    } else {
        sbox_hw_address1 = "XXXXXXXX";
    }
}

void aes128_sub_bytes_hw::thread_sbox_hw_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        sbox_hw_ce0 = ap_const_logic_1;
    } else {
        sbox_hw_ce0 = ap_const_logic_0;
    }
}

void aes128_sub_bytes_hw::thread_sbox_hw_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        sbox_hw_ce1 = ap_const_logic_1;
    } else {
        sbox_hw_ce1 = ap_const_logic_0;
    }
}

void aes128_sub_bytes_hw::thread_state_addr_10_reg_496() {
    state_addr_10_reg_496 =  (sc_lv<4>) (ap_const_lv64_A);
}

void aes128_sub_bytes_hw::thread_state_addr_11_reg_501() {
    state_addr_11_reg_501 =  (sc_lv<4>) (ap_const_lv64_B);
}

void aes128_sub_bytes_hw::thread_state_addr_12_reg_516() {
    state_addr_12_reg_516 =  (sc_lv<4>) (ap_const_lv64_C);
}

void aes128_sub_bytes_hw::thread_state_addr_13_reg_521() {
    state_addr_13_reg_521 =  (sc_lv<4>) (ap_const_lv64_D);
}

void aes128_sub_bytes_hw::thread_state_addr_14_reg_536() {
    state_addr_14_reg_536 =  (sc_lv<4>) (ap_const_lv64_E);
}

void aes128_sub_bytes_hw::thread_state_addr_15_reg_541() {
    state_addr_15_reg_541 =  (sc_lv<4>) (ap_const_lv64_F);
}

void aes128_sub_bytes_hw::thread_state_addr_1_reg_421() {
    state_addr_1_reg_421 =  (sc_lv<4>) (ap_const_lv64_1);
}

void aes128_sub_bytes_hw::thread_state_addr_2_reg_426() {
    state_addr_2_reg_426 =  (sc_lv<4>) (ap_const_lv64_2);
}

void aes128_sub_bytes_hw::thread_state_addr_3_reg_431() {
    state_addr_3_reg_431 =  (sc_lv<4>) (ap_const_lv64_3);
}

void aes128_sub_bytes_hw::thread_state_addr_4_reg_436() {
    state_addr_4_reg_436 =  (sc_lv<4>) (ap_const_lv64_4);
}

void aes128_sub_bytes_hw::thread_state_addr_5_reg_441() {
    state_addr_5_reg_441 =  (sc_lv<4>) (ap_const_lv64_5);
}

void aes128_sub_bytes_hw::thread_state_addr_6_reg_456() {
    state_addr_6_reg_456 =  (sc_lv<4>) (ap_const_lv64_6);
}

void aes128_sub_bytes_hw::thread_state_addr_7_reg_461() {
    state_addr_7_reg_461 =  (sc_lv<4>) (ap_const_lv64_7);
}

void aes128_sub_bytes_hw::thread_state_addr_8_reg_476() {
    state_addr_8_reg_476 =  (sc_lv<4>) (ap_const_lv64_8);
}

void aes128_sub_bytes_hw::thread_state_addr_9_reg_481() {
    state_addr_9_reg_481 =  (sc_lv<4>) (ap_const_lv64_9);
}

void aes128_sub_bytes_hw::thread_state_addr_reg_416() {
    state_addr_reg_416 =  (sc_lv<4>) (ap_const_lv64_0);
}

void aes128_sub_bytes_hw::thread_state_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        state_address0 = state_addr_14_reg_536.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_address0 = state_addr_12_reg_516.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_address0 = state_addr_10_reg_496.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        state_address0 = state_addr_8_reg_476.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        state_address0 = state_addr_6_reg_456.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_address0 = state_addr_4_reg_436.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_address0 = state_addr_2_reg_426.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_address0 = state_addr_reg_416.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        state_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void aes128_sub_bytes_hw::thread_state_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        state_address1 = state_addr_15_reg_541.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_address1 = state_addr_13_reg_521.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_address1 = state_addr_11_reg_501.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        state_address1 = state_addr_9_reg_481.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        state_address1 = state_addr_7_reg_461.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_address1 = state_addr_5_reg_441.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_address1 = state_addr_3_reg_431.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_address1 = state_addr_1_reg_421.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_1);
    } else {
        state_address1 =  (sc_lv<4>) ("XXXX");
    }
}

void aes128_sub_bytes_hw::thread_state_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        state_ce0 = ap_const_logic_1;
    } else {
        state_ce0 = ap_const_logic_0;
    }
}

void aes128_sub_bytes_hw::thread_state_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        state_ce1 = ap_const_logic_1;
    } else {
        state_ce1 = ap_const_logic_0;
    }
}

void aes128_sub_bytes_hw::thread_state_d0() {
    state_d0 = sbox_hw_q0.read();
}

void aes128_sub_bytes_hw::thread_state_d1() {
    state_d1 = sbox_hw_q1.read();
}

void aes128_sub_bytes_hw::thread_state_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        state_we0 = ap_const_logic_1;
    } else {
        state_we0 = ap_const_logic_0;
    }
}

void aes128_sub_bytes_hw::thread_state_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        state_we1 = ap_const_logic_1;
    } else {
        state_we1 = ap_const_logic_0;
    }
}

void aes128_sub_bytes_hw::thread_tmp_10_fu_392_p1() {
    tmp_10_fu_392_p1 = esl_zext<64,8>(state_load_11_reg_511.read());
}

void aes128_sub_bytes_hw::thread_tmp_11_fu_396_p1() {
    tmp_11_fu_396_p1 = esl_zext<64,8>(reg_328.read());
}

void aes128_sub_bytes_hw::thread_tmp_12_fu_401_p1() {
    tmp_12_fu_401_p1 = esl_zext<64,8>(reg_332.read());
}

void aes128_sub_bytes_hw::thread_tmp_13_fu_406_p1() {
    tmp_13_fu_406_p1 = esl_zext<64,8>(reg_336.read());
}

void aes128_sub_bytes_hw::thread_tmp_14_fu_411_p1() {
    tmp_14_fu_411_p1 = esl_zext<64,8>(reg_340.read());
}

void aes128_sub_bytes_hw::thread_tmp_1_fu_349_p1() {
    tmp_1_fu_349_p1 = esl_zext<64,8>(reg_332.read());
}

void aes128_sub_bytes_hw::thread_tmp_2_fu_354_p1() {
    tmp_2_fu_354_p1 = esl_zext<64,8>(reg_336.read());
}

void aes128_sub_bytes_hw::thread_tmp_3_fu_359_p1() {
    tmp_3_fu_359_p1 = esl_zext<64,8>(reg_340.read());
}

void aes128_sub_bytes_hw::thread_tmp_4_fu_364_p1() {
    tmp_4_fu_364_p1 = esl_zext<64,8>(state_load_4_reg_446.read());
}

void aes128_sub_bytes_hw::thread_tmp_5_fu_368_p1() {
    tmp_5_fu_368_p1 = esl_zext<64,8>(state_load_5_reg_451.read());
}

void aes128_sub_bytes_hw::thread_tmp_6_fu_372_p1() {
    tmp_6_fu_372_p1 = esl_zext<64,8>(state_load_6_reg_466.read());
}

void aes128_sub_bytes_hw::thread_tmp_7_fu_376_p1() {
    tmp_7_fu_376_p1 = esl_zext<64,8>(state_load_7_reg_471.read());
}

void aes128_sub_bytes_hw::thread_tmp_8_fu_380_p1() {
    tmp_8_fu_380_p1 = esl_zext<64,8>(state_load_8_reg_486.read());
}

void aes128_sub_bytes_hw::thread_tmp_9_fu_384_p1() {
    tmp_9_fu_384_p1 = esl_zext<64,8>(state_load_9_reg_491.read());
}

void aes128_sub_bytes_hw::thread_tmp_s_3_fu_388_p1() {
    tmp_s_3_fu_388_p1 = esl_zext<64,8>(state_load_10_reg_506.read());
}

void aes128_sub_bytes_hw::thread_tmp_s_fu_344_p1() {
    tmp_s_fu_344_p1 = esl_zext<64,8>(reg_328.read());
}

void aes128_sub_bytes_hw::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
            break;
    }
}

}

