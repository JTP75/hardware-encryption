// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _aes128_extract_round_HH_
#define _aes128_extract_round_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct aes128_extract_round : public sc_module {
    // Port declarations 21
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > expanded_key_address0;
    sc_out< sc_logic > expanded_key_ce0;
    sc_in< sc_lv<8> > expanded_key_q0;
    sc_out< sc_lv<8> > expanded_key_address1;
    sc_out< sc_logic > expanded_key_ce1;
    sc_in< sc_lv<8> > expanded_key_q1;
    sc_in< sc_lv<10> > expanded_key_offset;
    sc_out< sc_lv<4> > round_key_address0;
    sc_out< sc_logic > round_key_ce0;
    sc_out< sc_logic > round_key_we0;
    sc_out< sc_lv<8> > round_key_d0;
    sc_out< sc_lv<4> > round_key_address1;
    sc_out< sc_logic > round_key_ce1;
    sc_out< sc_logic > round_key_we1;
    sc_out< sc_lv<8> > round_key_d1;


    // Module declarations
    aes128_extract_round(sc_module_name name);
    SC_HAS_PROCESS(aes128_extract_round);

    ~aes128_extract_round();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > tmp_fu_373_p1;
    sc_signal< sc_lv<8> > tmp_reg_533;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<64> > expanded_key_offset_s_fu_368_p1;
    sc_signal< sc_lv<64> > sum_0_1_cast_fu_383_p1;
    sc_signal< sc_lv<64> > sum_0_2_cast_fu_393_p1;
    sc_signal< sc_lv<64> > sum_0_3_cast_fu_403_p1;
    sc_signal< sc_lv<64> > sum_1_cast_fu_413_p1;
    sc_signal< sc_lv<64> > sum_1_1_cast_fu_423_p1;
    sc_signal< sc_lv<64> > sum_1_2_cast_fu_433_p1;
    sc_signal< sc_lv<64> > sum_1_3_cast_fu_443_p1;
    sc_signal< sc_lv<64> > sum_2_cast_fu_453_p1;
    sc_signal< sc_lv<64> > sum_2_1_cast_fu_463_p1;
    sc_signal< sc_lv<64> > sum_2_2_cast_fu_473_p1;
    sc_signal< sc_lv<64> > sum_2_3_cast_fu_483_p1;
    sc_signal< sc_lv<64> > sum_3_cast_fu_493_p1;
    sc_signal< sc_lv<64> > sum_3_1_cast_fu_503_p1;
    sc_signal< sc_lv<64> > sum_3_2_cast_fu_513_p1;
    sc_signal< sc_lv<64> > sum_3_3_cast_fu_523_p1;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<8> > sum_0_1_fu_377_p2;
    sc_signal< sc_lv<8> > sum_0_2_fu_388_p2;
    sc_signal< sc_lv<8> > sum_0_3_fu_398_p2;
    sc_signal< sc_lv<8> > sum_1_fu_408_p2;
    sc_signal< sc_lv<8> > sum_1_1_fu_418_p2;
    sc_signal< sc_lv<8> > sum_1_2_fu_428_p2;
    sc_signal< sc_lv<8> > sum_1_3_fu_438_p2;
    sc_signal< sc_lv<8> > sum_2_fu_448_p2;
    sc_signal< sc_lv<8> > sum_2_1_fu_458_p2;
    sc_signal< sc_lv<8> > sum_2_2_fu_468_p2;
    sc_signal< sc_lv<8> > sum_2_3_fu_478_p2;
    sc_signal< sc_lv<8> > sum_3_fu_488_p2;
    sc_signal< sc_lv<8> > sum_3_1_fu_498_p2;
    sc_signal< sc_lv<8> > sum_3_2_fu_508_p2;
    sc_signal< sc_lv<8> > sum_3_3_fu_518_p2;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_fsm_state1;
    static const sc_lv<9> ap_ST_fsm_state2;
    static const sc_lv<9> ap_ST_fsm_state3;
    static const sc_lv<9> ap_ST_fsm_state4;
    static const sc_lv<9> ap_ST_fsm_state5;
    static const sc_lv<9> ap_ST_fsm_state6;
    static const sc_lv<9> ap_ST_fsm_state7;
    static const sc_lv<9> ap_ST_fsm_state8;
    static const sc_lv<9> ap_ST_fsm_state9;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_4;
    static const sc_lv<64> ap_const_lv64_8;
    static const sc_lv<64> ap_const_lv64_C;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<64> ap_const_lv64_5;
    static const sc_lv<64> ap_const_lv64_9;
    static const sc_lv<64> ap_const_lv64_D;
    static const sc_lv<64> ap_const_lv64_2;
    static const sc_lv<64> ap_const_lv64_6;
    static const sc_lv<64> ap_const_lv64_A;
    static const sc_lv<64> ap_const_lv64_E;
    static const sc_lv<64> ap_const_lv64_3;
    static const sc_lv<64> ap_const_lv64_7;
    static const sc_lv<64> ap_const_lv64_B;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<64> ap_const_lv64_F;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<8> ap_const_lv8_2;
    static const sc_lv<8> ap_const_lv8_3;
    static const sc_lv<8> ap_const_lv8_4;
    static const sc_lv<8> ap_const_lv8_5;
    static const sc_lv<8> ap_const_lv8_6;
    static const sc_lv<8> ap_const_lv8_7;
    static const sc_lv<8> ap_const_lv8_8;
    static const sc_lv<8> ap_const_lv8_9;
    static const sc_lv<8> ap_const_lv8_A;
    static const sc_lv<8> ap_const_lv8_B;
    static const sc_lv<8> ap_const_lv8_C;
    static const sc_lv<8> ap_const_lv8_D;
    static const sc_lv<8> ap_const_lv8_E;
    static const sc_lv<8> ap_const_lv8_F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_expanded_key_address0();
    void thread_expanded_key_address1();
    void thread_expanded_key_ce0();
    void thread_expanded_key_ce1();
    void thread_expanded_key_offset_s_fu_368_p1();
    void thread_round_key_address0();
    void thread_round_key_address1();
    void thread_round_key_ce0();
    void thread_round_key_ce1();
    void thread_round_key_d0();
    void thread_round_key_d1();
    void thread_round_key_we0();
    void thread_round_key_we1();
    void thread_sum_0_1_cast_fu_383_p1();
    void thread_sum_0_1_fu_377_p2();
    void thread_sum_0_2_cast_fu_393_p1();
    void thread_sum_0_2_fu_388_p2();
    void thread_sum_0_3_cast_fu_403_p1();
    void thread_sum_0_3_fu_398_p2();
    void thread_sum_1_1_cast_fu_423_p1();
    void thread_sum_1_1_fu_418_p2();
    void thread_sum_1_2_cast_fu_433_p1();
    void thread_sum_1_2_fu_428_p2();
    void thread_sum_1_3_cast_fu_443_p1();
    void thread_sum_1_3_fu_438_p2();
    void thread_sum_1_cast_fu_413_p1();
    void thread_sum_1_fu_408_p2();
    void thread_sum_2_1_cast_fu_463_p1();
    void thread_sum_2_1_fu_458_p2();
    void thread_sum_2_2_cast_fu_473_p1();
    void thread_sum_2_2_fu_468_p2();
    void thread_sum_2_3_cast_fu_483_p1();
    void thread_sum_2_3_fu_478_p2();
    void thread_sum_2_cast_fu_453_p1();
    void thread_sum_2_fu_448_p2();
    void thread_sum_3_1_cast_fu_503_p1();
    void thread_sum_3_1_fu_498_p2();
    void thread_sum_3_2_cast_fu_513_p1();
    void thread_sum_3_2_fu_508_p2();
    void thread_sum_3_3_cast_fu_523_p1();
    void thread_sum_3_3_fu_518_p2();
    void thread_sum_3_cast_fu_493_p1();
    void thread_sum_3_fu_488_p2();
    void thread_tmp_fu_373_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
