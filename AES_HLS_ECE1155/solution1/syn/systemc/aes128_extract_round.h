// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _aes128_extract_round_HH_
#define _aes128_extract_round_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct aes128_extract_round : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > expanded_key_address0;
    sc_out< sc_logic > expanded_key_ce0;
    sc_in< sc_lv<8> > expanded_key_q0;
    sc_in< sc_lv<10> > expanded_key_offset;
    sc_out< sc_lv<4> > round_key_address0;
    sc_out< sc_logic > round_key_ce0;
    sc_out< sc_logic > round_key_we0;
    sc_out< sc_lv<8> > round_key_d0;


    // Module declarations
    aes128_extract_round(sc_module_name name);
    SC_HAS_PROCESS(aes128_extract_round);

    ~aes128_extract_round();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > tmp_14_fu_79_p1;
    sc_signal< sc_lv<8> > tmp_14_reg_167;
    sc_signal< sc_lv<4> > i_cast_fu_83_p1;
    sc_signal< sc_lv<4> > i_cast_reg_172;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<3> > i_6_fu_93_p2;
    sc_signal< sc_lv<3> > i_6_reg_180;
    sc_signal< sc_lv<4> > tmp_fu_103_p3;
    sc_signal< sc_lv<4> > tmp_reg_185;
    sc_signal< sc_lv<1> > exitcond1_fu_87_p2;
    sc_signal< sc_lv<3> > j_4_fu_121_p2;
    sc_signal< sc_lv<3> > j_4_reg_193;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > exitcond_fu_115_p2;
    sc_signal< sc_lv<4> > tmp_12_fu_158_p2;
    sc_signal< sc_lv<4> > tmp_12_reg_203;
    sc_signal< sc_lv<3> > i_reg_57;
    sc_signal< sc_lv<3> > j_reg_68;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > sum_cast_fu_141_p1;
    sc_signal< sc_lv<64> > tmp_13_fu_163_p1;
    sc_signal< sc_lv<2> > tmp_15_fu_99_p1;
    sc_signal< sc_lv<4> > j_cast_fu_111_p1;
    sc_signal< sc_lv<4> > tmp_s_fu_127_p2;
    sc_signal< sc_lv<8> > tmp_23_cast_fu_132_p1;
    sc_signal< sc_lv<8> > sum_fu_136_p2;
    sc_signal< sc_lv<2> > tmp_16_fu_146_p1;
    sc_signal< sc_lv<4> > tmp_11_fu_150_p3;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond1_fu_87_p2();
    void thread_exitcond_fu_115_p2();
    void thread_expanded_key_address0();
    void thread_expanded_key_ce0();
    void thread_i_6_fu_93_p2();
    void thread_i_cast_fu_83_p1();
    void thread_j_4_fu_121_p2();
    void thread_j_cast_fu_111_p1();
    void thread_round_key_address0();
    void thread_round_key_ce0();
    void thread_round_key_d0();
    void thread_round_key_we0();
    void thread_sum_cast_fu_141_p1();
    void thread_sum_fu_136_p2();
    void thread_tmp_11_fu_150_p3();
    void thread_tmp_12_fu_158_p2();
    void thread_tmp_13_fu_163_p1();
    void thread_tmp_14_fu_79_p1();
    void thread_tmp_15_fu_99_p1();
    void thread_tmp_16_fu_146_p1();
    void thread_tmp_23_cast_fu_132_p1();
    void thread_tmp_fu_103_p3();
    void thread_tmp_s_fu_127_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
