-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes128_expand_key_hw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    key_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    key_ce0 : OUT STD_LOGIC;
    key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    expanded_key_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expanded_key_ce0 : OUT STD_LOGIC;
    expanded_key_we0 : OUT STD_LOGIC;
    expanded_key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expanded_key_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of aes128_expand_key_hw is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_B0 : STD_LOGIC_VECTOR (7 downto 0) := "10110000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_F0 : STD_LOGIC_VECTOR (7 downto 0) := "11110000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sbox_hw_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_hw_ce0 : STD_LOGIC;
    signal sbox_hw_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rcon_hw_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rcon_hw_ce0 : STD_LOGIC;
    signal rcon_hw_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_614_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_reg_896 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond3_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_7_fu_646_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_reg_920 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond2_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_673_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_30_reg_930 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_17_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_8_fu_693_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_8_reg_955 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal write_flag_be_i_fu_699_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag_be_i_reg_960 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_0_4_fu_713_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal word12_be_i_fu_721_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal word2_be_i_fu_735_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_9_fu_774_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_983 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_31_fu_780_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_31_reg_988 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond1_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal size_3_fu_829_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal size_3_reg_1010 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_10_fu_841_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_10_reg_1018 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal exitcond_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_862_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_reg_1028 : STD_LOGIC_VECTOR (7 downto 0);
    signal size_4_fu_887_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal size_reg_149 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_3_5_reg_532 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_160 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_5_reg_545 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_172 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_5_reg_558 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_184 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_0_1_reg_571 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_0_reg_196 : STD_LOGIC_VECTOR (7 downto 0);
    signal size_1_reg_208 : STD_LOGIC_VECTOR (7 downto 0);
    signal word_3_read_assign_reg_220 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_16_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal word_2_read_assign_reg_231 : STD_LOGIC_VECTOR (7 downto 0);
    signal word_1_read_assign_reg_242 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_reg_253 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_264 : STD_LOGIC_VECTOR (2 downto 0);
    signal word_3_read_assign_s_reg_275 : STD_LOGIC_VECTOR (7 downto 0);
    signal word_2_read_assign_s_reg_293 : STD_LOGIC_VECTOR (7 downto 0);
    signal word_1_read_assign_s_reg_311 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_be_reg_329 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag_i_reg_347 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_2_reg_358 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_2_reg_369 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_i_i_phi_fu_384_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_i_reg_380 : STD_LOGIC_VECTOR (1 downto 0);
    signal word_i_13_reg_392 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_3_reg_406 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_2_3_reg_417 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_3_reg_428 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_0_s_reg_439 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_reg_449 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_3_be_reg_460 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_3_be_reg_478 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_3_be_reg_496 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_0_be_reg_514 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_0_3_fu_822_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_2_reg_583 : STD_LOGIC_VECTOR (2 downto 0);
    signal size_2_reg_594 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_668_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_798_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_812_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_853_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_882_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_5_fu_806_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal word_i_fu_68 : STD_LOGIC_VECTOR (7 downto 0);
    signal word_be_i_fu_749_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_876_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_652_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_cast_cast_fu_658_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_662_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_677_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_21_fu_784_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_21_fu_784_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_5_fu_806_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_812_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_847_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_862_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component aes128_encrypt_bldEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component aes128_encrypt_bleOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes128_expand_keybkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes128_expand_keycud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sbox_hw_U : component aes128_expand_keybkb
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sbox_hw_address0,
        ce0 => sbox_hw_ce0,
        q0 => sbox_hw_q0);

    rcon_hw_U : component aes128_expand_keycud
    generic map (
        DataWidth => 8,
        AddressRange => 255,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rcon_hw_address0,
        ce0 => rcon_hw_ce0,
        q0 => rcon_hw_q0);

    aes128_encrypt_bldEe_U1 : component aes128_encrypt_bldEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag_i_reg_347,
        din2 => write_flag_i_reg_347,
        din3 => write_flag_i_reg_347,
        din4 => i_i_reg_380,
        dout => write_flag_be_i_fu_699_p6);

    aes128_encrypt_bleOg_U2 : component aes128_encrypt_bleOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_1_2_reg_369,
        din1 => word_i_13_reg_392,
        din2 => tmp_1_2_reg_369,
        din3 => tmp_1_2_reg_369,
        din4 => i_i_reg_380,
        dout => word12_be_i_fu_721_p6);

    aes128_encrypt_bleOg_U3 : component aes128_encrypt_bleOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_2_2_reg_358,
        din1 => tmp_2_2_reg_358,
        din2 => word_i_13_reg_392,
        din3 => word_i_13_reg_392,
        din4 => i_i_reg_380,
        dout => word2_be_i_fu_735_p6);

    aes128_encrypt_bleOg_U4 : component aes128_encrypt_bleOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => word_i_13_reg_392,
        din1 => word_i_fu_68,
        din2 => word_i_fu_68,
        din3 => word_i_fu_68,
        din4 => i_i_reg_380,
        dout => word_be_i_fu_749_p6);

    aes128_encrypt_bleOg_U5 : component aes128_encrypt_bleOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_0_s_reg_439,
        din1 => tmp_1_3_reg_428,
        din2 => tmp_2_3_reg_417,
        din3 => tmp_3_3_reg_406,
        din4 => tmp_21_fu_784_p5,
        dout => tmp_21_fu_784_p6);

    aes128_encrypt_bleOg_U6 : component aes128_encrypt_bleOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_0_1_reg_571,
        din1 => tmp_1_5_reg_558,
        din2 => tmp_2_5_reg_545,
        din3 => tmp_3_5_reg_532,
        din4 => tmp_25_fu_862_p5,
        dout => tmp_25_fu_862_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_449_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_1_reg_449 <= i_9_reg_983;
            elsif (((exitcond_i_fu_687_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_1_reg_449 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_2_reg_583_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_2_reg_583 <= i_10_reg_1018;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_2_reg_583 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_i_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_17_fu_681_p2 = ap_const_lv1_1) and (exitcond2_fu_640_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_i_reg_380 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_i_reg_380 <= i_8_reg_955;
            end if; 
        end if;
    end process;

    i_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_reg_264 <= i_7_reg_920;
            elsif (((tmp_16_fu_634_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_reg_264 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_768_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                j_fu_64 <= j_5_fu_806_p2;
            elsif (((exitcond3_fu_608_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_fu_64 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    size_1_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_835_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                size_1_reg_208 <= size_3_reg_1010;
            elsif (((exitcond3_fu_608_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                size_1_reg_208 <= ap_const_lv8_10;
            end if; 
        end if;
    end process;

    size_2_reg_594_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                size_2_reg_594 <= size_4_fu_887_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                size_2_reg_594 <= size_1_reg_208;
            end if; 
        end if;
    end process;

    size_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                size_reg_149 <= tmp_s_reg_896;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                size_reg_149 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    tmp_0_1_reg_571_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_640_p2 = ap_const_lv1_1) and (tmp_17_fu_681_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                tmp_0_1_reg_571 <= tmp_33_reg_253;
            elsif (((tmp_17_reg_934 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                tmp_0_1_reg_571 <= tmp_0_3_fu_822_p2;
            end if; 
        end if;
    end process;

    tmp_0_be_reg_514_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_31_reg_988 = ap_const_lv2_0))) then 
                tmp_0_be_reg_514 <= sbox_hw_q0;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_31_reg_988 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_31_reg_988 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_31_reg_988 = ap_const_lv2_3)))) then 
                tmp_0_be_reg_514 <= tmp_0_s_reg_439;
            end if; 
        end if;
    end process;

    tmp_0_s_reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                tmp_0_s_reg_439 <= tmp_0_be_reg_514;
            elsif (((exitcond_i_fu_687_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                tmp_0_s_reg_439 <= tmp_0_4_fu_713_p3;
            end if; 
        end if;
    end process;

    tmp_1_2_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_17_fu_681_p2 = ap_const_lv1_1) and (exitcond2_fu_640_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                tmp_1_2_reg_369 <= word_1_read_assign_reg_242;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                tmp_1_2_reg_369 <= word12_be_i_fu_721_p6;
            end if; 
        end if;
    end process;

    tmp_1_3_be_reg_496_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_31_reg_988 = ap_const_lv2_1))) then 
                tmp_1_3_be_reg_496 <= sbox_hw_q0;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_31_reg_988 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_31_reg_988 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_31_reg_988 = ap_const_lv2_3)))) then 
                tmp_1_3_be_reg_496 <= tmp_1_3_reg_428;
            end if; 
        end if;
    end process;

    tmp_1_3_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                tmp_1_3_reg_428 <= tmp_1_3_be_reg_496;
            elsif (((exitcond_i_fu_687_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                tmp_1_3_reg_428 <= tmp_1_2_reg_369;
            end if; 
        end if;
    end process;

    tmp_1_5_reg_558_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_640_p2 = ap_const_lv1_1) and (tmp_17_fu_681_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                tmp_1_5_reg_558 <= word_1_read_assign_reg_242;
            elsif (((tmp_17_reg_934 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                tmp_1_5_reg_558 <= tmp_1_3_reg_428;
            end if; 
        end if;
    end process;

    tmp_29_be_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_30_reg_930 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                tmp_29_be_reg_329 <= expanded_key_q0;
            elsif ((((tmp_30_reg_930 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((tmp_30_reg_930 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((tmp_30_reg_930 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
                tmp_29_be_reg_329 <= tmp_33_reg_253;
            end if; 
        end if;
    end process;

    tmp_2_2_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_17_fu_681_p2 = ap_const_lv1_1) and (exitcond2_fu_640_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                tmp_2_2_reg_358 <= word_2_read_assign_reg_231;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                tmp_2_2_reg_358 <= word2_be_i_fu_735_p6;
            end if; 
        end if;
    end process;

    tmp_2_3_be_reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_31_reg_988 = ap_const_lv2_2))) then 
                tmp_2_3_be_reg_478 <= sbox_hw_q0;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_31_reg_988 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_31_reg_988 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_31_reg_988 = ap_const_lv2_3)))) then 
                tmp_2_3_be_reg_478 <= tmp_2_3_reg_417;
            end if; 
        end if;
    end process;

    tmp_2_3_reg_417_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                tmp_2_3_reg_417 <= tmp_2_3_be_reg_478;
            elsif (((exitcond_i_fu_687_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                tmp_2_3_reg_417 <= tmp_2_2_reg_358;
            end if; 
        end if;
    end process;

    tmp_2_5_reg_545_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_640_p2 = ap_const_lv1_1) and (tmp_17_fu_681_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                tmp_2_5_reg_545 <= word_2_read_assign_reg_231;
            elsif (((tmp_17_reg_934 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                tmp_2_5_reg_545 <= tmp_2_3_reg_417;
            end if; 
        end if;
    end process;

    tmp_33_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                tmp_33_reg_253 <= tmp_29_be_reg_329;
            elsif (((tmp_16_fu_634_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                tmp_33_reg_253 <= tmp_0_reg_196;
            end if; 
        end if;
    end process;

    tmp_3_3_be_reg_460_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_31_reg_988 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_31_reg_988 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_31_reg_988 = ap_const_lv2_2)))) then 
                tmp_3_3_be_reg_460 <= tmp_3_3_reg_406;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_31_reg_988 = ap_const_lv2_3))) then 
                tmp_3_3_be_reg_460 <= sbox_hw_q0;
            end if; 
        end if;
    end process;

    tmp_3_3_reg_406_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                tmp_3_3_reg_406 <= tmp_3_3_be_reg_460;
            elsif (((exitcond_i_fu_687_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                tmp_3_3_reg_406 <= tmp_33_reg_253;
            end if; 
        end if;
    end process;

    tmp_3_5_reg_532_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_640_p2 = ap_const_lv1_1) and (tmp_17_fu_681_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                tmp_3_5_reg_532 <= word_3_read_assign_reg_220;
            elsif (((tmp_17_reg_934 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                tmp_3_5_reg_532 <= tmp_3_3_reg_406;
            end if; 
        end if;
    end process;

    word_1_read_assign_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                word_1_read_assign_reg_242 <= word_1_read_assign_s_reg_311;
            elsif (((tmp_16_fu_634_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                word_1_read_assign_reg_242 <= tmp_1_reg_184;
            end if; 
        end if;
    end process;

    word_1_read_assign_s_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_30_reg_930 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                word_1_read_assign_s_reg_311 <= expanded_key_q0;
            elsif ((((tmp_30_reg_930 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((tmp_30_reg_930 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((tmp_30_reg_930 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
                word_1_read_assign_s_reg_311 <= word_1_read_assign_reg_242;
            end if; 
        end if;
    end process;

    word_2_read_assign_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                word_2_read_assign_reg_231 <= word_2_read_assign_s_reg_293;
            elsif (((tmp_16_fu_634_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                word_2_read_assign_reg_231 <= tmp_2_reg_172;
            end if; 
        end if;
    end process;

    word_2_read_assign_s_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_30_reg_930 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                word_2_read_assign_s_reg_293 <= expanded_key_q0;
            elsif ((((tmp_30_reg_930 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((tmp_30_reg_930 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((tmp_30_reg_930 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
                word_2_read_assign_s_reg_293 <= word_2_read_assign_reg_231;
            end if; 
        end if;
    end process;

    word_3_read_assign_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                word_3_read_assign_reg_220 <= word_3_read_assign_s_reg_275;
            elsif (((tmp_16_fu_634_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                word_3_read_assign_reg_220 <= tmp_3_reg_160;
            end if; 
        end if;
    end process;

    word_3_read_assign_s_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_30_reg_930 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((tmp_30_reg_930 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((tmp_30_reg_930 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
                word_3_read_assign_s_reg_275 <= word_3_read_assign_reg_220;
            elsif (((tmp_30_reg_930 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                word_3_read_assign_s_reg_275 <= expanded_key_q0;
            end if; 
        end if;
    end process;

    word_i_13_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_687_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                if ((ap_phi_mux_i_i_phi_fu_384_p4 = ap_const_lv2_0)) then 
                    word_i_13_reg_392 <= tmp_1_2_reg_369;
                elsif ((not((ap_phi_mux_i_i_phi_fu_384_p4 = ap_const_lv2_0)) and not((ap_phi_mux_i_i_phi_fu_384_p4 = ap_const_lv2_1)))) then 
                    word_i_13_reg_392 <= word_3_read_assign_reg_220;
                elsif ((ap_phi_mux_i_i_phi_fu_384_p4 = ap_const_lv2_1)) then 
                    word_i_13_reg_392 <= tmp_2_2_reg_358;
                end if;
            end if; 
        end if;
    end process;

    write_flag_i_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_17_fu_681_p2 = ap_const_lv1_1) and (exitcond2_fu_640_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                write_flag_i_reg_347 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                write_flag_i_reg_347 <= write_flag_be_i_reg_960;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_10_reg_1018 <= i_10_fu_841_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_7_reg_920 <= i_7_fu_646_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_8_reg_955 <= i_8_fu_693_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_9_reg_983 <= i_9_fu_774_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                size_3_reg_1010 <= size_3_fu_829_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_835_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                tmp_0_reg_196 <= tmp_0_1_reg_571;
                tmp_1_reg_184 <= tmp_1_5_reg_558;
                tmp_2_reg_172 <= tmp_2_5_reg_545;
                tmp_3_reg_160 <= tmp_3_5_reg_532;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_640_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_17_reg_934 <= tmp_17_fu_681_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_835_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                tmp_25_reg_1028 <= tmp_25_fu_862_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_640_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_30_reg_930 <= tmp_30_fu_673_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_768_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                tmp_31_reg_988 <= tmp_31_fu_780_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_s_reg_896 <= tmp_s_fu_614_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                word_i_fu_68 <= word_be_i_fu_749_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_687_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                write_flag_be_i_reg_960 <= write_flag_be_i_fu_699_p6;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_608_p2, ap_CS_fsm_state5, exitcond2_fu_640_p2, tmp_17_fu_681_p2, ap_CS_fsm_state8, exitcond_i_fu_687_p2, ap_CS_fsm_state10, exitcond1_fu_768_p2, ap_CS_fsm_state14, exitcond_fu_835_p2, ap_CS_fsm_state4, tmp_16_fu_634_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond3_fu_608_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((tmp_16_fu_634_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((tmp_17_fu_681_p2 = ap_const_lv1_1) and (exitcond2_fu_640_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((exitcond2_fu_640_p2 = ap_const_lv1_1) and (tmp_17_fu_681_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state8 => 
                if (((exitcond_i_fu_687_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                if (((exitcond1_fu_768_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((exitcond_fu_835_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, tmp_16_fu_634_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_16_fu_634_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_i_phi_fu_384_p4 <= i_i_reg_380;

    ap_ready_assign_proc : process(ap_CS_fsm_state4, tmp_16_fu_634_p2)
    begin
        if (((tmp_16_fu_634_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_768_p2 <= "1" when (i_1_reg_449 = ap_const_lv3_4) else "0";
    exitcond2_fu_640_p2 <= "1" when (i_reg_264 = ap_const_lv3_4) else "0";
    exitcond3_fu_608_p2 <= "1" when (size_reg_149 = ap_const_lv5_10) else "0";
    exitcond_fu_835_p2 <= "1" when (i_2_reg_583 = ap_const_lv3_4) else "0";
    exitcond_i_fu_687_p2 <= "1" when (i_i_reg_380 = ap_const_lv2_3) else "0";

    expanded_key_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state3, tmp_15_fu_630_p1, tmp_19_fu_668_p1, tmp_24_fu_853_p1, tmp_27_fu_882_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            expanded_key_address0 <= tmp_27_fu_882_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            expanded_key_address0 <= tmp_24_fu_853_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            expanded_key_address0 <= tmp_19_fu_668_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            expanded_key_address0 <= tmp_15_fu_630_p1(8 - 1 downto 0);
        else 
            expanded_key_address0 <= "XXXXXXXX";
        end if; 
    end process;


    expanded_key_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            expanded_key_ce0 <= ap_const_logic_1;
        else 
            expanded_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expanded_key_d0_assign_proc : process(key_q0, ap_CS_fsm_state15, ap_CS_fsm_state3, tmp_26_fu_876_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            expanded_key_d0 <= tmp_26_fu_876_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            expanded_key_d0 <= key_q0;
        else 
            expanded_key_d0 <= "XXXXXXXX";
        end if; 
    end process;


    expanded_key_we0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            expanded_key_we0 <= ap_const_logic_1;
        else 
            expanded_key_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_10_fu_841_p2 <= std_logic_vector(unsigned(i_2_reg_583) + unsigned(ap_const_lv3_1));
    i_7_fu_646_p2 <= std_logic_vector(unsigned(i_reg_264) + unsigned(ap_const_lv3_1));
    i_8_fu_693_p2 <= std_logic_vector(unsigned(i_i_reg_380) + unsigned(ap_const_lv2_1));
    i_9_fu_774_p2 <= std_logic_vector(unsigned(i_1_reg_449) + unsigned(ap_const_lv3_1));
    j_5_fu_806_p0 <= j_fu_64;
    j_5_fu_806_p2 <= std_logic_vector(signed(j_5_fu_806_p0) + signed(ap_const_lv32_1));
    key_address0 <= tmp_14_fu_620_p1(4 - 1 downto 0);

    key_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            key_ce0 <= ap_const_logic_1;
        else 
            key_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rcon_hw_address0 <= tmp_20_fu_812_p1(8 - 1 downto 0);

    rcon_hw_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            rcon_hw_ce0 <= ap_const_logic_1;
        else 
            rcon_hw_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sbox_hw_address0 <= tmp_22_fu_798_p1(8 - 1 downto 0);

    sbox_hw_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sbox_hw_ce0 <= ap_const_logic_1;
        else 
            sbox_hw_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    size_3_fu_829_p2 <= std_logic_vector(unsigned(size_1_reg_208) + unsigned(ap_const_lv8_4));
    size_4_fu_887_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(size_2_reg_594));
    tmp_0_3_fu_822_p2 <= (tmp_0_s_reg_439 xor rcon_hw_q0);
    tmp_0_4_fu_713_p3 <= 
        word_i_fu_68 when (write_flag_i_reg_347(0) = '1') else 
        tmp_33_reg_253;
    tmp_14_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(size_reg_149),64));
    tmp_15_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_896),64));
    tmp_16_fu_634_p2 <= "1" when (unsigned(size_1_reg_208) < unsigned(ap_const_lv8_B0)) else "0";
    tmp_17_fu_681_p2 <= "1" when (tmp_29_fu_677_p1 = ap_const_lv4_0) else "0";
    tmp_18_fu_662_p2 <= std_logic_vector(unsigned(size_1_reg_208) + unsigned(tmp_cast_cast_fu_658_p1));
    tmp_19_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_662_p2),64));
    tmp_20_fu_812_p0 <= j_fu_64;
        tmp_20_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_fu_812_p0),64));

    tmp_21_fu_784_p5 <= i_1_reg_449(2 - 1 downto 0);
    tmp_22_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_784_p6),64));
    tmp_23_fu_847_p2 <= std_logic_vector(signed(ap_const_lv8_F0) + signed(size_2_reg_594));
    tmp_24_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_847_p2),64));
    tmp_25_fu_862_p5 <= i_2_reg_583(2 - 1 downto 0);
    tmp_26_fu_876_p2 <= (tmp_25_reg_1028 xor expanded_key_q0);
    tmp_27_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(size_2_reg_594),64));
    tmp_29_fu_677_p1 <= size_1_reg_208(4 - 1 downto 0);
    tmp_30_fu_673_p1 <= i_reg_264(2 - 1 downto 0);
    tmp_31_fu_780_p1 <= i_1_reg_449(2 - 1 downto 0);
        tmp_cast_cast_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_652_p2),8));

    tmp_fu_652_p2 <= (i_reg_264 xor ap_const_lv3_4);
    tmp_s_fu_614_p2 <= std_logic_vector(unsigned(size_reg_149) + unsigned(ap_const_lv5_1));
end behav;
