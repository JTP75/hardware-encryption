-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes128_extract_round is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    expanded_key_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expanded_key_ce0 : OUT STD_LOGIC;
    expanded_key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    expanded_key_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expanded_key_ce1 : OUT STD_LOGIC;
    expanded_key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    expanded_key_offset : IN STD_LOGIC_VECTOR (9 downto 0);
    round_key_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    round_key_ce0 : OUT STD_LOGIC;
    round_key_we0 : OUT STD_LOGIC;
    round_key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    round_key_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    round_key_ce1 : OUT STD_LOGIC;
    round_key_we1 : OUT STD_LOGIC;
    round_key_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of aes128_extract_round is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_fu_373_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_533 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal expanded_key_offset_s_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_0_1_cast_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_0_2_cast_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_0_3_cast_fu_403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_1_cast_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_1_1_cast_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_1_2_cast_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_1_3_cast_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_2_cast_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_2_1_cast_fu_463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_2_2_cast_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_2_3_cast_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_3_cast_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_3_1_cast_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_3_2_cast_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_3_3_cast_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal sum_0_1_fu_377_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_0_2_fu_388_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_0_3_fu_398_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_1_fu_408_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_1_1_fu_418_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_1_2_fu_428_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_1_3_fu_438_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_2_fu_448_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_2_1_fu_458_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_2_2_fu_468_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_2_3_fu_478_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_3_fu_488_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_3_1_fu_498_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_3_2_fu_508_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_3_3_fu_518_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_reg_533 <= tmp_fu_373_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    expanded_key_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, expanded_key_offset_s_fu_368_p1, sum_0_2_cast_fu_393_p1, sum_1_cast_fu_413_p1, sum_1_2_cast_fu_433_p1, sum_2_cast_fu_453_p1, sum_2_2_cast_fu_473_p1, sum_3_cast_fu_493_p1, sum_3_2_cast_fu_513_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            expanded_key_address0 <= sum_3_2_cast_fu_513_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            expanded_key_address0 <= sum_3_cast_fu_493_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expanded_key_address0 <= sum_2_2_cast_fu_473_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            expanded_key_address0 <= sum_2_cast_fu_453_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expanded_key_address0 <= sum_1_2_cast_fu_433_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            expanded_key_address0 <= sum_1_cast_fu_413_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            expanded_key_address0 <= sum_0_2_cast_fu_393_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            expanded_key_address0 <= expanded_key_offset_s_fu_368_p1(8 - 1 downto 0);
        else 
            expanded_key_address0 <= "XXXXXXXX";
        end if; 
    end process;


    expanded_key_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, sum_0_1_cast_fu_383_p1, sum_0_3_cast_fu_403_p1, sum_1_1_cast_fu_423_p1, sum_1_3_cast_fu_443_p1, sum_2_1_cast_fu_463_p1, sum_2_3_cast_fu_483_p1, sum_3_1_cast_fu_503_p1, sum_3_3_cast_fu_523_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            expanded_key_address1 <= sum_3_3_cast_fu_523_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            expanded_key_address1 <= sum_3_1_cast_fu_503_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expanded_key_address1 <= sum_2_3_cast_fu_483_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            expanded_key_address1 <= sum_2_1_cast_fu_463_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expanded_key_address1 <= sum_1_3_cast_fu_443_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            expanded_key_address1 <= sum_1_1_cast_fu_423_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            expanded_key_address1 <= sum_0_3_cast_fu_403_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            expanded_key_address1 <= sum_0_1_cast_fu_383_p1(8 - 1 downto 0);
        else 
            expanded_key_address1 <= "XXXXXXXX";
        end if; 
    end process;


    expanded_key_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            expanded_key_ce0 <= ap_const_logic_1;
        else 
            expanded_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expanded_key_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            expanded_key_ce1 <= ap_const_logic_1;
        else 
            expanded_key_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    expanded_key_offset_s_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(expanded_key_offset),64));

    round_key_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            round_key_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            round_key_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            round_key_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            round_key_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            round_key_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            round_key_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            round_key_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            round_key_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            round_key_address0 <= "XXXX";
        end if; 
    end process;


    round_key_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            round_key_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            round_key_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            round_key_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            round_key_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            round_key_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            round_key_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            round_key_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            round_key_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        else 
            round_key_address1 <= "XXXX";
        end if; 
    end process;


    round_key_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            round_key_ce0 <= ap_const_logic_1;
        else 
            round_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    round_key_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            round_key_ce1 <= ap_const_logic_1;
        else 
            round_key_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    round_key_d0 <= expanded_key_q0;
    round_key_d1 <= expanded_key_q1;

    round_key_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            round_key_we0 <= ap_const_logic_1;
        else 
            round_key_we0 <= ap_const_logic_0;
        end if; 
    end process;


    round_key_we1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            round_key_we1 <= ap_const_logic_1;
        else 
            round_key_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sum_0_1_cast_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_0_1_fu_377_p2),64));
    sum_0_1_fu_377_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(tmp_fu_373_p1));
    sum_0_2_cast_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_0_2_fu_388_p2),64));
    sum_0_2_fu_388_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) + unsigned(tmp_reg_533));
    sum_0_3_cast_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_0_3_fu_398_p2),64));
    sum_0_3_fu_398_p2 <= std_logic_vector(unsigned(ap_const_lv8_3) + unsigned(tmp_reg_533));
    sum_1_1_cast_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_1_1_fu_418_p2),64));
    sum_1_1_fu_418_p2 <= std_logic_vector(unsigned(ap_const_lv8_5) + unsigned(tmp_reg_533));
    sum_1_2_cast_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_1_2_fu_428_p2),64));
    sum_1_2_fu_428_p2 <= std_logic_vector(unsigned(ap_const_lv8_6) + unsigned(tmp_reg_533));
    sum_1_3_cast_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_1_3_fu_438_p2),64));
    sum_1_3_fu_438_p2 <= std_logic_vector(unsigned(ap_const_lv8_7) + unsigned(tmp_reg_533));
    sum_1_cast_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_1_fu_408_p2),64));
    sum_1_fu_408_p2 <= std_logic_vector(unsigned(ap_const_lv8_4) + unsigned(tmp_reg_533));
    sum_2_1_cast_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_2_1_fu_458_p2),64));
    sum_2_1_fu_458_p2 <= std_logic_vector(unsigned(ap_const_lv8_9) + unsigned(tmp_reg_533));
    sum_2_2_cast_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_2_2_fu_468_p2),64));
    sum_2_2_fu_468_p2 <= std_logic_vector(unsigned(ap_const_lv8_A) + unsigned(tmp_reg_533));
    sum_2_3_cast_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_2_3_fu_478_p2),64));
    sum_2_3_fu_478_p2 <= std_logic_vector(unsigned(ap_const_lv8_B) + unsigned(tmp_reg_533));
    sum_2_cast_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_2_fu_448_p2),64));
    sum_2_fu_448_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) + unsigned(tmp_reg_533));
    sum_3_1_cast_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_3_1_fu_498_p2),64));
    sum_3_1_fu_498_p2 <= std_logic_vector(unsigned(ap_const_lv8_D) + unsigned(tmp_reg_533));
    sum_3_2_cast_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_3_2_fu_508_p2),64));
    sum_3_2_fu_508_p2 <= std_logic_vector(unsigned(ap_const_lv8_E) + unsigned(tmp_reg_533));
    sum_3_3_cast_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_3_3_fu_518_p2),64));
    sum_3_3_fu_518_p2 <= std_logic_vector(unsigned(ap_const_lv8_F) + unsigned(tmp_reg_533));
    sum_3_cast_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_3_fu_488_p2),64));
    sum_3_fu_488_p2 <= std_logic_vector(unsigned(ap_const_lv8_C) + unsigned(tmp_reg_533));
    tmp_fu_373_p1 <= expanded_key_offset(8 - 1 downto 0);
end behav;
