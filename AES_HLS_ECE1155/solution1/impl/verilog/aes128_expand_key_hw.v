// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes128_expand_key_hw (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        key_address0,
        key_ce0,
        key_q0,
        expanded_key_address0,
        expanded_key_ce0,
        expanded_key_we0,
        expanded_key_d0,
        expanded_key_q0
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] key_address0;
output   key_ce0;
input  [7:0] key_q0;
output  [7:0] expanded_key_address0;
output   expanded_key_ce0;
output   expanded_key_we0;
output  [7:0] expanded_key_d0;
input  [7:0] expanded_key_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg key_ce0;
reg[7:0] expanded_key_address0;
reg expanded_key_ce0;
reg expanded_key_we0;
reg[7:0] expanded_key_d0;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] sbox_hw_address0;
reg    sbox_hw_ce0;
wire   [7:0] sbox_hw_q0;
wire   [7:0] rcon_hw_address0;
reg    rcon_hw_ce0;
wire   [7:0] rcon_hw_q0;
wire   [4:0] tmp_s_fu_614_p2;
reg   [4:0] tmp_s_reg_896;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond3_fu_608_p2;
wire   [2:0] i_7_fu_646_p2;
reg   [2:0] i_7_reg_920;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond2_fu_640_p2;
wire   [1:0] tmp_30_fu_673_p1;
reg   [1:0] tmp_30_reg_930;
wire   [0:0] tmp_17_fu_681_p2;
reg   [0:0] tmp_17_reg_934;
wire    ap_CS_fsm_state6;
wire   [1:0] i_8_fu_693_p2;
reg   [1:0] i_8_reg_955;
wire    ap_CS_fsm_state8;
wire   [0:0] write_flag_be_i_fu_699_p6;
reg   [0:0] write_flag_be_i_reg_960;
wire   [0:0] exitcond_i_fu_687_p2;
wire   [7:0] tmp_0_4_fu_713_p3;
wire   [7:0] word12_be_i_fu_721_p6;
wire    ap_CS_fsm_state9;
wire   [7:0] word2_be_i_fu_735_p6;
wire   [2:0] i_9_fu_774_p2;
reg   [2:0] i_9_reg_983;
wire    ap_CS_fsm_state10;
wire   [1:0] tmp_31_fu_780_p1;
reg   [1:0] tmp_31_reg_988;
wire   [0:0] exitcond1_fu_768_p2;
wire    ap_CS_fsm_state11;
wire   [7:0] size_3_fu_829_p2;
reg   [7:0] size_3_reg_1010;
wire    ap_CS_fsm_state13;
wire   [2:0] i_10_fu_841_p2;
reg   [2:0] i_10_reg_1018;
wire    ap_CS_fsm_state14;
wire   [0:0] exitcond_fu_835_p2;
wire   [7:0] tmp_25_fu_862_p6;
reg   [7:0] tmp_25_reg_1028;
wire   [7:0] size_4_fu_887_p2;
wire    ap_CS_fsm_state15;
reg   [4:0] size_reg_149;
wire    ap_CS_fsm_state3;
reg   [7:0] tmp_3_5_reg_532;
reg   [7:0] tmp_3_reg_160;
reg   [7:0] tmp_2_5_reg_545;
reg   [7:0] tmp_2_reg_172;
reg   [7:0] tmp_1_5_reg_558;
reg   [7:0] tmp_1_reg_184;
reg   [7:0] tmp_0_1_reg_571;
reg   [7:0] tmp_0_reg_196;
reg   [7:0] size_1_reg_208;
reg   [7:0] word_3_read_assign_reg_220;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_16_fu_634_p2;
wire    ap_CS_fsm_state7;
reg   [7:0] word_2_read_assign_reg_231;
reg   [7:0] word_1_read_assign_reg_242;
reg   [7:0] tmp_33_reg_253;
reg   [2:0] i_reg_264;
reg   [7:0] word_3_read_assign_s_reg_275;
reg   [7:0] word_2_read_assign_s_reg_293;
reg   [7:0] word_1_read_assign_s_reg_311;
reg   [7:0] tmp_29_be_reg_329;
reg   [0:0] write_flag_i_reg_347;
reg   [7:0] tmp_2_2_reg_358;
reg   [7:0] tmp_1_2_reg_369;
wire   [1:0] ap_phi_mux_i_i_phi_fu_384_p4;
reg   [1:0] i_i_reg_380;
reg   [7:0] word_i_13_reg_392;
reg   [7:0] tmp_3_3_reg_406;
wire    ap_CS_fsm_state12;
reg   [7:0] tmp_2_3_reg_417;
reg   [7:0] tmp_1_3_reg_428;
reg   [7:0] tmp_0_s_reg_439;
reg   [2:0] i_1_reg_449;
reg   [7:0] tmp_3_3_be_reg_460;
reg   [7:0] tmp_2_3_be_reg_478;
reg   [7:0] tmp_1_3_be_reg_496;
reg   [7:0] tmp_0_be_reg_514;
wire   [7:0] tmp_0_3_fu_822_p2;
reg   [2:0] i_2_reg_583;
reg   [7:0] size_2_reg_594;
wire   [63:0] tmp_14_fu_620_p1;
wire   [63:0] tmp_15_fu_630_p1;
wire   [63:0] tmp_19_fu_668_p1;
wire   [63:0] tmp_22_fu_798_p1;
wire  signed [63:0] tmp_20_fu_812_p1;
wire   [63:0] tmp_24_fu_853_p1;
wire   [63:0] tmp_27_fu_882_p1;
reg   [31:0] j_fu_64;
wire   [31:0] j_5_fu_806_p2;
reg   [7:0] word_i_fu_68;
wire   [7:0] word_be_i_fu_749_p6;
wire   [7:0] tmp_26_fu_876_p2;
wire   [2:0] tmp_fu_652_p2;
wire  signed [7:0] tmp_cast_cast_fu_658_p1;
wire   [7:0] tmp_18_fu_662_p2;
wire   [3:0] tmp_29_fu_677_p1;
wire   [1:0] tmp_21_fu_784_p5;
wire   [7:0] tmp_21_fu_784_p6;
wire  signed [31:0] j_5_fu_806_p0;
wire  signed [31:0] tmp_20_fu_812_p0;
wire   [7:0] tmp_23_fu_847_p2;
wire   [1:0] tmp_25_fu_862_p5;
reg   [14:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
end

aes128_expand_keybkb #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_hw_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_hw_address0),
    .ce0(sbox_hw_ce0),
    .q0(sbox_hw_q0)
);

aes128_expand_keycud #(
    .DataWidth( 8 ),
    .AddressRange( 255 ),
    .AddressWidth( 8 ))
rcon_hw_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rcon_hw_address0),
    .ce0(rcon_hw_ce0),
    .q0(rcon_hw_q0)
);

aes128_encrypt_bldEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
aes128_encrypt_bldEe_U1(
    .din0(1'd1),
    .din1(write_flag_i_reg_347),
    .din2(write_flag_i_reg_347),
    .din3(write_flag_i_reg_347),
    .din4(i_i_reg_380),
    .dout(write_flag_be_i_fu_699_p6)
);

aes128_encrypt_bleOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
aes128_encrypt_bleOg_U2(
    .din0(tmp_1_2_reg_369),
    .din1(word_i_13_reg_392),
    .din2(tmp_1_2_reg_369),
    .din3(tmp_1_2_reg_369),
    .din4(i_i_reg_380),
    .dout(word12_be_i_fu_721_p6)
);

aes128_encrypt_bleOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
aes128_encrypt_bleOg_U3(
    .din0(tmp_2_2_reg_358),
    .din1(tmp_2_2_reg_358),
    .din2(word_i_13_reg_392),
    .din3(word_i_13_reg_392),
    .din4(i_i_reg_380),
    .dout(word2_be_i_fu_735_p6)
);

aes128_encrypt_bleOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
aes128_encrypt_bleOg_U4(
    .din0(word_i_13_reg_392),
    .din1(word_i_fu_68),
    .din2(word_i_fu_68),
    .din3(word_i_fu_68),
    .din4(i_i_reg_380),
    .dout(word_be_i_fu_749_p6)
);

aes128_encrypt_bleOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
aes128_encrypt_bleOg_U5(
    .din0(tmp_0_s_reg_439),
    .din1(tmp_1_3_reg_428),
    .din2(tmp_2_3_reg_417),
    .din3(tmp_3_3_reg_406),
    .din4(tmp_21_fu_784_p5),
    .dout(tmp_21_fu_784_p6)
);

aes128_encrypt_bleOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
aes128_encrypt_bleOg_U6(
    .din0(tmp_0_1_reg_571),
    .din1(tmp_1_5_reg_558),
    .din2(tmp_2_5_reg_545),
    .din3(tmp_3_5_reg_532),
    .din4(tmp_25_fu_862_p5),
    .dout(tmp_25_fu_862_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_1_reg_449 <= i_9_reg_983;
    end else if (((exitcond_i_fu_687_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        i_1_reg_449 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_2_reg_583 <= i_10_reg_1018;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        i_2_reg_583 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_17_fu_681_p2 == 1'd1) & (exitcond2_fu_640_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_i_reg_380 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_i_reg_380 <= i_8_reg_955;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_264 <= i_7_reg_920;
    end else if (((tmp_16_fu_634_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_reg_264 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_768_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        j_fu_64 <= j_5_fu_806_p2;
    end else if (((exitcond3_fu_608_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_fu_64 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_835_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        size_1_reg_208 <= size_3_reg_1010;
    end else if (((exitcond3_fu_608_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        size_1_reg_208 <= 8'd16;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        size_2_reg_594 <= size_4_fu_887_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        size_2_reg_594 <= size_1_reg_208;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        size_reg_149 <= tmp_s_reg_896;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        size_reg_149 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_640_p2 == 1'd1) & (tmp_17_fu_681_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_0_1_reg_571 <= tmp_33_reg_253;
    end else if (((tmp_17_reg_934 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        tmp_0_1_reg_571 <= tmp_0_3_fu_822_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (tmp_31_reg_988 == 2'd0))) begin
        tmp_0_be_reg_514 <= sbox_hw_q0;
    end else if ((((1'b1 == ap_CS_fsm_state11) & (tmp_31_reg_988 == 2'd1)) | ((1'b1 == ap_CS_fsm_state11) & (tmp_31_reg_988 == 2'd2)) | ((1'b1 == ap_CS_fsm_state11) & (tmp_31_reg_988 == 2'd3)))) begin
        tmp_0_be_reg_514 <= tmp_0_s_reg_439;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_0_s_reg_439 <= tmp_0_be_reg_514;
    end else if (((exitcond_i_fu_687_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_0_s_reg_439 <= tmp_0_4_fu_713_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_17_fu_681_p2 == 1'd1) & (exitcond2_fu_640_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_1_2_reg_369 <= word_1_read_assign_reg_242;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_1_2_reg_369 <= word12_be_i_fu_721_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (tmp_31_reg_988 == 2'd1))) begin
        tmp_1_3_be_reg_496 <= sbox_hw_q0;
    end else if ((((1'b1 == ap_CS_fsm_state11) & (tmp_31_reg_988 == 2'd0)) | ((1'b1 == ap_CS_fsm_state11) & (tmp_31_reg_988 == 2'd2)) | ((1'b1 == ap_CS_fsm_state11) & (tmp_31_reg_988 == 2'd3)))) begin
        tmp_1_3_be_reg_496 <= tmp_1_3_reg_428;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_1_3_reg_428 <= tmp_1_3_be_reg_496;
    end else if (((exitcond_i_fu_687_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_1_3_reg_428 <= tmp_1_2_reg_369;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_640_p2 == 1'd1) & (tmp_17_fu_681_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_1_5_reg_558 <= word_1_read_assign_reg_242;
    end else if (((tmp_17_reg_934 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        tmp_1_5_reg_558 <= tmp_1_3_reg_428;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_30_reg_930 == 2'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_29_be_reg_329 <= expanded_key_q0;
    end else if ((((tmp_30_reg_930 == 2'd1) & (1'b1 == ap_CS_fsm_state6)) | ((tmp_30_reg_930 == 2'd2) & (1'b1 == ap_CS_fsm_state6)) | ((tmp_30_reg_930 == 2'd3) & (1'b1 == ap_CS_fsm_state6)))) begin
        tmp_29_be_reg_329 <= tmp_33_reg_253;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_17_fu_681_p2 == 1'd1) & (exitcond2_fu_640_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_2_2_reg_358 <= word_2_read_assign_reg_231;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_2_2_reg_358 <= word2_be_i_fu_735_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (tmp_31_reg_988 == 2'd2))) begin
        tmp_2_3_be_reg_478 <= sbox_hw_q0;
    end else if ((((1'b1 == ap_CS_fsm_state11) & (tmp_31_reg_988 == 2'd0)) | ((1'b1 == ap_CS_fsm_state11) & (tmp_31_reg_988 == 2'd1)) | ((1'b1 == ap_CS_fsm_state11) & (tmp_31_reg_988 == 2'd3)))) begin
        tmp_2_3_be_reg_478 <= tmp_2_3_reg_417;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_2_3_reg_417 <= tmp_2_3_be_reg_478;
    end else if (((exitcond_i_fu_687_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_2_3_reg_417 <= tmp_2_2_reg_358;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_640_p2 == 1'd1) & (tmp_17_fu_681_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_2_5_reg_545 <= word_2_read_assign_reg_231;
    end else if (((tmp_17_reg_934 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        tmp_2_5_reg_545 <= tmp_2_3_reg_417;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_33_reg_253 <= tmp_29_be_reg_329;
    end else if (((tmp_16_fu_634_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_33_reg_253 <= tmp_0_reg_196;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state11) & (tmp_31_reg_988 == 2'd0)) | ((1'b1 == ap_CS_fsm_state11) & (tmp_31_reg_988 == 2'd1)) | ((1'b1 == ap_CS_fsm_state11) & (tmp_31_reg_988 == 2'd2)))) begin
        tmp_3_3_be_reg_460 <= tmp_3_3_reg_406;
    end else if (((1'b1 == ap_CS_fsm_state11) & (tmp_31_reg_988 == 2'd3))) begin
        tmp_3_3_be_reg_460 <= sbox_hw_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_3_3_reg_406 <= tmp_3_3_be_reg_460;
    end else if (((exitcond_i_fu_687_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_3_3_reg_406 <= tmp_33_reg_253;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_640_p2 == 1'd1) & (tmp_17_fu_681_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_3_5_reg_532 <= word_3_read_assign_reg_220;
    end else if (((tmp_17_reg_934 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        tmp_3_5_reg_532 <= tmp_3_3_reg_406;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        word_1_read_assign_reg_242 <= word_1_read_assign_s_reg_311;
    end else if (((tmp_16_fu_634_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        word_1_read_assign_reg_242 <= tmp_1_reg_184;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_30_reg_930 == 2'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        word_1_read_assign_s_reg_311 <= expanded_key_q0;
    end else if ((((tmp_30_reg_930 == 2'd0) & (1'b1 == ap_CS_fsm_state6)) | ((tmp_30_reg_930 == 2'd2) & (1'b1 == ap_CS_fsm_state6)) | ((tmp_30_reg_930 == 2'd3) & (1'b1 == ap_CS_fsm_state6)))) begin
        word_1_read_assign_s_reg_311 <= word_1_read_assign_reg_242;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        word_2_read_assign_reg_231 <= word_2_read_assign_s_reg_293;
    end else if (((tmp_16_fu_634_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        word_2_read_assign_reg_231 <= tmp_2_reg_172;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_30_reg_930 == 2'd2) & (1'b1 == ap_CS_fsm_state6))) begin
        word_2_read_assign_s_reg_293 <= expanded_key_q0;
    end else if ((((tmp_30_reg_930 == 2'd0) & (1'b1 == ap_CS_fsm_state6)) | ((tmp_30_reg_930 == 2'd1) & (1'b1 == ap_CS_fsm_state6)) | ((tmp_30_reg_930 == 2'd3) & (1'b1 == ap_CS_fsm_state6)))) begin
        word_2_read_assign_s_reg_293 <= word_2_read_assign_reg_231;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        word_3_read_assign_reg_220 <= word_3_read_assign_s_reg_275;
    end else if (((tmp_16_fu_634_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        word_3_read_assign_reg_220 <= tmp_3_reg_160;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_30_reg_930 == 2'd0) & (1'b1 == ap_CS_fsm_state6)) | ((tmp_30_reg_930 == 2'd1) & (1'b1 == ap_CS_fsm_state6)) | ((tmp_30_reg_930 == 2'd2) & (1'b1 == ap_CS_fsm_state6)))) begin
        word_3_read_assign_s_reg_275 <= word_3_read_assign_reg_220;
    end else if (((tmp_30_reg_930 == 2'd3) & (1'b1 == ap_CS_fsm_state6))) begin
        word_3_read_assign_s_reg_275 <= expanded_key_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_687_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        if ((ap_phi_mux_i_i_phi_fu_384_p4 == 2'd0)) begin
            word_i_13_reg_392 <= tmp_1_2_reg_369;
        end else if ((~(ap_phi_mux_i_i_phi_fu_384_p4 == 2'd0) & ~(ap_phi_mux_i_i_phi_fu_384_p4 == 2'd1))) begin
            word_i_13_reg_392 <= word_3_read_assign_reg_220;
        end else if ((ap_phi_mux_i_i_phi_fu_384_p4 == 2'd1)) begin
            word_i_13_reg_392 <= tmp_2_2_reg_358;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_17_fu_681_p2 == 1'd1) & (exitcond2_fu_640_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        write_flag_i_reg_347 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        write_flag_i_reg_347 <= write_flag_be_i_reg_960;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_10_reg_1018 <= i_10_fu_841_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_7_reg_920 <= i_7_fu_646_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_8_reg_955 <= i_8_fu_693_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_9_reg_983 <= i_9_fu_774_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        size_3_reg_1010 <= size_3_fu_829_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_835_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        tmp_0_reg_196 <= tmp_0_1_reg_571;
        tmp_1_reg_184 <= tmp_1_5_reg_558;
        tmp_2_reg_172 <= tmp_2_5_reg_545;
        tmp_3_reg_160 <= tmp_3_5_reg_532;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_640_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_17_reg_934 <= tmp_17_fu_681_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_835_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        tmp_25_reg_1028 <= tmp_25_fu_862_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_640_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_30_reg_930 <= tmp_30_fu_673_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_768_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        tmp_31_reg_988 <= tmp_31_fu_780_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_s_reg_896 <= tmp_s_fu_614_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        word_i_fu_68 <= word_be_i_fu_749_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_687_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        write_flag_be_i_reg_960 <= write_flag_be_i_fu_699_p6;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_16_fu_634_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_16_fu_634_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        expanded_key_address0 = tmp_27_fu_882_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        expanded_key_address0 = tmp_24_fu_853_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        expanded_key_address0 = tmp_19_fu_668_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        expanded_key_address0 = tmp_15_fu_630_p1;
    end else begin
        expanded_key_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        expanded_key_ce0 = 1'b1;
    end else begin
        expanded_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        expanded_key_d0 = tmp_26_fu_876_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        expanded_key_d0 = key_q0;
    end else begin
        expanded_key_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state15))) begin
        expanded_key_we0 = 1'b1;
    end else begin
        expanded_key_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        key_ce0 = 1'b1;
    end else begin
        key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        rcon_hw_ce0 = 1'b1;
    end else begin
        rcon_hw_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sbox_hw_ce0 = 1'b1;
    end else begin
        sbox_hw_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3_fu_608_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_16_fu_634_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_17_fu_681_p2 == 1'd1) & (exitcond2_fu_640_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if (((exitcond2_fu_640_p2 == 1'd1) & (tmp_17_fu_681_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state8 : begin
            if (((exitcond_i_fu_687_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state10 : begin
            if (((exitcond1_fu_768_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((exitcond_fu_835_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_phi_mux_i_i_phi_fu_384_p4 = i_i_reg_380;

assign exitcond1_fu_768_p2 = ((i_1_reg_449 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond2_fu_640_p2 = ((i_reg_264 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond3_fu_608_p2 = ((size_reg_149 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond_fu_835_p2 = ((i_2_reg_583 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_i_fu_687_p2 = ((i_i_reg_380 == 2'd3) ? 1'b1 : 1'b0);

assign i_10_fu_841_p2 = (i_2_reg_583 + 3'd1);

assign i_7_fu_646_p2 = (i_reg_264 + 3'd1);

assign i_8_fu_693_p2 = (i_i_reg_380 + 2'd1);

assign i_9_fu_774_p2 = (i_1_reg_449 + 3'd1);

assign j_5_fu_806_p0 = j_fu_64;

assign j_5_fu_806_p2 = ($signed(j_5_fu_806_p0) + $signed(32'd1));

assign key_address0 = tmp_14_fu_620_p1;

assign rcon_hw_address0 = tmp_20_fu_812_p1;

assign sbox_hw_address0 = tmp_22_fu_798_p1;

assign size_3_fu_829_p2 = (size_1_reg_208 + 8'd4);

assign size_4_fu_887_p2 = (8'd1 + size_2_reg_594);

assign tmp_0_3_fu_822_p2 = (tmp_0_s_reg_439 ^ rcon_hw_q0);

assign tmp_0_4_fu_713_p3 = ((write_flag_i_reg_347[0:0] === 1'b1) ? word_i_fu_68 : tmp_33_reg_253);

assign tmp_14_fu_620_p1 = size_reg_149;

assign tmp_15_fu_630_p1 = tmp_s_reg_896;

assign tmp_16_fu_634_p2 = ((size_1_reg_208 < 8'd176) ? 1'b1 : 1'b0);

assign tmp_17_fu_681_p2 = ((tmp_29_fu_677_p1 == 4'd0) ? 1'b1 : 1'b0);

assign tmp_18_fu_662_p2 = ($signed(size_1_reg_208) + $signed(tmp_cast_cast_fu_658_p1));

assign tmp_19_fu_668_p1 = tmp_18_fu_662_p2;

assign tmp_20_fu_812_p0 = j_fu_64;

assign tmp_20_fu_812_p1 = tmp_20_fu_812_p0;

assign tmp_21_fu_784_p5 = i_1_reg_449[1:0];

assign tmp_22_fu_798_p1 = tmp_21_fu_784_p6;

assign tmp_23_fu_847_p2 = ($signed(8'd240) + $signed(size_2_reg_594));

assign tmp_24_fu_853_p1 = tmp_23_fu_847_p2;

assign tmp_25_fu_862_p5 = i_2_reg_583[1:0];

assign tmp_26_fu_876_p2 = (tmp_25_reg_1028 ^ expanded_key_q0);

assign tmp_27_fu_882_p1 = size_2_reg_594;

assign tmp_29_fu_677_p1 = size_1_reg_208[3:0];

assign tmp_30_fu_673_p1 = i_reg_264[1:0];

assign tmp_31_fu_780_p1 = i_1_reg_449[1:0];

assign tmp_cast_cast_fu_658_p1 = $signed(tmp_fu_652_p2);

assign tmp_fu_652_p2 = (i_reg_264 ^ 3'd4);

assign tmp_s_fu_614_p2 = (size_reg_149 + 5'd1);

endmodule //aes128_expand_key_hw
