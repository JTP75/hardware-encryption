// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="aes128_encrypt_block_hw,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.498000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1239,HLS_SYN_LUT=3686,HLS_VERSION=2018_3}" *)

module aes128_encrypt_block_hw (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        key_address0,
        key_ce0,
        key_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_state9 = 28'd256;
parameter    ap_ST_fsm_state10 = 28'd512;
parameter    ap_ST_fsm_state11 = 28'd1024;
parameter    ap_ST_fsm_state12 = 28'd2048;
parameter    ap_ST_fsm_state13 = 28'd4096;
parameter    ap_ST_fsm_state14 = 28'd8192;
parameter    ap_ST_fsm_state15 = 28'd16384;
parameter    ap_ST_fsm_state16 = 28'd32768;
parameter    ap_ST_fsm_state17 = 28'd65536;
parameter    ap_ST_fsm_state18 = 28'd131072;
parameter    ap_ST_fsm_state19 = 28'd262144;
parameter    ap_ST_fsm_state20 = 28'd524288;
parameter    ap_ST_fsm_state21 = 28'd1048576;
parameter    ap_ST_fsm_state22 = 28'd2097152;
parameter    ap_ST_fsm_state23 = 28'd4194304;
parameter    ap_ST_fsm_state24 = 28'd8388608;
parameter    ap_ST_fsm_state25 = 28'd16777216;
parameter    ap_ST_fsm_state26 = 28'd33554432;
parameter    ap_ST_fsm_state27 = 28'd67108864;
parameter    ap_ST_fsm_state28 = 28'd134217728;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] in_r_address0;
output   in_r_ce0;
input  [7:0] in_r_q0;
output  [3:0] key_address0;
output   key_ce0;
input  [7:0] key_q0;
output  [3:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [7:0] out_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_r_ce0;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] sbox_hw_address0;
reg    sbox_hw_ce0;
wire   [7:0] sbox_hw_q0;
wire   [3:0] i_cast_fu_275_p1;
reg   [3:0] i_cast_reg_494;
wire    ap_CS_fsm_state2;
wire   [2:0] i_11_fu_285_p2;
reg   [2:0] i_11_reg_502;
wire   [3:0] tmp_fu_295_p3;
reg   [3:0] tmp_reg_507;
wire   [0:0] exitcond4_fu_279_p2;
wire   [2:0] j_6_fu_313_p2;
reg   [2:0] j_6_reg_515;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond3_fu_307_p2;
wire   [3:0] tmp_31_fu_341_p2;
reg   [3:0] tmp_31_reg_525;
wire   [9:0] tmp_41_cast_fu_364_p1;
reg   [9:0] tmp_41_cast_reg_533;
wire    ap_CS_fsm_state10;
wire   [0:0] exitcond2_fu_350_p2;
wire   [4:0] i_3_fu_375_p2;
reg   [4:0] i_3_reg_541;
wire    ap_CS_fsm_state12;
reg   [3:0] state_addr_6_reg_546;
wire   [0:0] exitcond_i_fu_369_p2;
wire   [3:0] i_13_fu_386_p2;
reg   [3:0] i_13_reg_551;
wire    ap_CS_fsm_state13;
wire   [4:0] i_12_fu_403_p2;
reg   [4:0] i_12_reg_564;
wire    ap_CS_fsm_state20;
reg   [3:0] state_addr_5_reg_569;
wire   [0:0] exitcond_i7_fu_397_p2;
wire    ap_CS_fsm_state21;
wire   [3:0] i_2_cast_fu_419_p1;
reg   [3:0] i_2_cast_reg_579;
wire    ap_CS_fsm_state26;
wire   [2:0] i_14_fu_429_p2;
reg   [2:0] i_14_reg_587;
wire   [3:0] tmp_33_fu_439_p3;
reg   [3:0] tmp_33_reg_592;
wire   [0:0] exitcond1_fu_423_p2;
wire   [2:0] j_7_fu_457_p2;
reg   [2:0] j_7_reg_600;
wire    ap_CS_fsm_state27;
wire   [0:0] exitcond_fu_451_p2;
wire   [3:0] tmp_37_fu_485_p2;
reg   [3:0] tmp_37_reg_610;
reg   [3:0] state_address0;
reg    state_ce0;
reg    state_we0;
reg   [7:0] state_d0;
wire   [7:0] state_q0;
reg   [3:0] round_key_address0;
reg    round_key_ce0;
reg    round_key_we0;
wire   [7:0] round_key_q0;
reg   [7:0] expanded_key_address0;
reg    expanded_key_ce0;
reg    expanded_key_we0;
wire   [7:0] expanded_key_q0;
wire    grp_aes128_mix_columns_h_fu_239_ap_start;
wire    grp_aes128_mix_columns_h_fu_239_ap_done;
wire    grp_aes128_mix_columns_h_fu_239_ap_idle;
wire    grp_aes128_mix_columns_h_fu_239_ap_ready;
wire   [3:0] grp_aes128_mix_columns_h_fu_239_state_address0;
wire    grp_aes128_mix_columns_h_fu_239_state_ce0;
wire    grp_aes128_mix_columns_h_fu_239_state_we0;
wire   [7:0] grp_aes128_mix_columns_h_fu_239_state_d0;
wire    grp_aes128_expand_key_hw_fu_244_ap_start;
wire    grp_aes128_expand_key_hw_fu_244_ap_done;
wire    grp_aes128_expand_key_hw_fu_244_ap_idle;
wire    grp_aes128_expand_key_hw_fu_244_ap_ready;
wire   [3:0] grp_aes128_expand_key_hw_fu_244_key_address0;
wire    grp_aes128_expand_key_hw_fu_244_key_ce0;
wire   [7:0] grp_aes128_expand_key_hw_fu_244_expanded_key_address0;
wire    grp_aes128_expand_key_hw_fu_244_expanded_key_ce0;
wire    grp_aes128_expand_key_hw_fu_244_expanded_key_we0;
wire   [7:0] grp_aes128_expand_key_hw_fu_244_expanded_key_d0;
wire    grp_aes128_shift_rows_hw_fu_255_ap_start;
wire    grp_aes128_shift_rows_hw_fu_255_ap_done;
wire    grp_aes128_shift_rows_hw_fu_255_ap_idle;
wire    grp_aes128_shift_rows_hw_fu_255_ap_ready;
wire   [3:0] grp_aes128_shift_rows_hw_fu_255_state_address0;
wire    grp_aes128_shift_rows_hw_fu_255_state_ce0;
wire    grp_aes128_shift_rows_hw_fu_255_state_we0;
wire   [7:0] grp_aes128_shift_rows_hw_fu_255_state_d0;
wire    grp_aes128_extract_round_fu_260_ap_start;
wire    grp_aes128_extract_round_fu_260_ap_done;
wire    grp_aes128_extract_round_fu_260_ap_idle;
wire    grp_aes128_extract_round_fu_260_ap_ready;
wire   [7:0] grp_aes128_extract_round_fu_260_expanded_key_address0;
wire    grp_aes128_extract_round_fu_260_expanded_key_ce0;
reg   [9:0] grp_aes128_extract_round_fu_260_expanded_key_offset;
wire   [3:0] grp_aes128_extract_round_fu_260_round_key_address0;
wire    grp_aes128_extract_round_fu_260_round_key_ce0;
wire    grp_aes128_extract_round_fu_260_round_key_we0;
wire   [7:0] grp_aes128_extract_round_fu_260_round_key_d0;
wire    grp_aes128_add_round_key_fu_269_ap_start;
wire    grp_aes128_add_round_key_fu_269_ap_done;
wire    grp_aes128_add_round_key_fu_269_ap_idle;
wire    grp_aes128_add_round_key_fu_269_ap_ready;
wire   [3:0] grp_aes128_add_round_key_fu_269_state_address0;
wire    grp_aes128_add_round_key_fu_269_state_ce0;
wire    grp_aes128_add_round_key_fu_269_state_we0;
wire   [7:0] grp_aes128_add_round_key_fu_269_state_d0;
wire   [3:0] grp_aes128_add_round_key_fu_269_round_key_address0;
wire    grp_aes128_add_round_key_fu_269_round_key_ce0;
reg   [2:0] i_reg_161;
reg   [2:0] j_reg_172;
wire    ap_CS_fsm_state4;
reg   [3:0] i_1_reg_183;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state19;
reg   [4:0] i_i_reg_195;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state14;
reg   [4:0] i_i6_reg_206;
wire    ap_CS_fsm_state22;
reg   [2:0] i_2_reg_217;
wire    ap_CS_fsm_state25;
reg   [2:0] j_1_reg_228;
wire    ap_CS_fsm_state28;
reg    grp_aes128_mix_columns_h_fu_239_ap_start_reg;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
reg    grp_aes128_expand_key_hw_fu_244_ap_start_reg;
wire    ap_CS_fsm_state5;
reg    grp_aes128_shift_rows_hw_fu_255_ap_start_reg;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state23;
reg    grp_aes128_extract_round_fu_260_ap_start_reg;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg    grp_aes128_add_round_key_fu_269_ap_start_reg;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state24;
wire   [63:0] tmp_29_fu_324_p1;
wire   [63:0] tmp_32_fu_346_p1;
wire   [63:0] tmp_i_fu_381_p1;
wire   [63:0] tmp_i_19_fu_392_p1;
wire   [63:0] tmp_i8_fu_409_p1;
wire   [63:0] tmp_i1_fu_414_p1;
wire   [63:0] tmp_36_fu_480_p1;
wire   [63:0] tmp_38_fu_490_p1;
wire   [1:0] tmp_39_fu_291_p1;
wire   [3:0] j_cast_fu_303_p1;
wire   [3:0] tmp_28_fu_319_p2;
wire   [1:0] tmp_40_fu_329_p1;
wire   [3:0] tmp_30_fu_333_p3;
wire   [7:0] tmp_s_fu_356_p3;
wire   [1:0] tmp_41_fu_435_p1;
wire   [1:0] tmp_42_fu_463_p1;
wire   [3:0] tmp_34_fu_467_p3;
wire   [3:0] tmp_35_fu_475_p2;
wire   [3:0] j_1_cast_fu_447_p1;
reg   [27:0] ap_NS_fsm;
reg    ap_block_state23_on_subcall_done;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
#0 grp_aes128_mix_columns_h_fu_239_ap_start_reg = 1'b0;
#0 grp_aes128_expand_key_hw_fu_244_ap_start_reg = 1'b0;
#0 grp_aes128_shift_rows_hw_fu_255_ap_start_reg = 1'b0;
#0 grp_aes128_extract_round_fu_260_ap_start_reg = 1'b0;
#0 grp_aes128_add_round_key_fu_269_ap_start_reg = 1'b0;
end

aes128_expand_keybkb #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_hw_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_hw_address0),
    .ce0(sbox_hw_ce0),
    .q0(sbox_hw_q0)
);

aes128_encrypt_blg8j #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
state_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(state_address0),
    .ce0(state_ce0),
    .we0(state_we0),
    .d0(state_d0),
    .q0(state_q0)
);

aes128_encrypt_blg8j #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
round_key_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(round_key_address0),
    .ce0(round_key_ce0),
    .we0(round_key_we0),
    .d0(grp_aes128_extract_round_fu_260_round_key_d0),
    .q0(round_key_q0)
);

aes128_encrypt_blibs #(
    .DataWidth( 8 ),
    .AddressRange( 176 ),
    .AddressWidth( 8 ))
expanded_key_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(expanded_key_address0),
    .ce0(expanded_key_ce0),
    .we0(expanded_key_we0),
    .d0(grp_aes128_expand_key_hw_fu_244_expanded_key_d0),
    .q0(expanded_key_q0)
);

aes128_mix_columns_h grp_aes128_mix_columns_h_fu_239(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes128_mix_columns_h_fu_239_ap_start),
    .ap_done(grp_aes128_mix_columns_h_fu_239_ap_done),
    .ap_idle(grp_aes128_mix_columns_h_fu_239_ap_idle),
    .ap_ready(grp_aes128_mix_columns_h_fu_239_ap_ready),
    .state_address0(grp_aes128_mix_columns_h_fu_239_state_address0),
    .state_ce0(grp_aes128_mix_columns_h_fu_239_state_ce0),
    .state_we0(grp_aes128_mix_columns_h_fu_239_state_we0),
    .state_d0(grp_aes128_mix_columns_h_fu_239_state_d0),
    .state_q0(state_q0)
);

aes128_expand_key_hw grp_aes128_expand_key_hw_fu_244(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes128_expand_key_hw_fu_244_ap_start),
    .ap_done(grp_aes128_expand_key_hw_fu_244_ap_done),
    .ap_idle(grp_aes128_expand_key_hw_fu_244_ap_idle),
    .ap_ready(grp_aes128_expand_key_hw_fu_244_ap_ready),
    .key_address0(grp_aes128_expand_key_hw_fu_244_key_address0),
    .key_ce0(grp_aes128_expand_key_hw_fu_244_key_ce0),
    .key_q0(key_q0),
    .expanded_key_address0(grp_aes128_expand_key_hw_fu_244_expanded_key_address0),
    .expanded_key_ce0(grp_aes128_expand_key_hw_fu_244_expanded_key_ce0),
    .expanded_key_we0(grp_aes128_expand_key_hw_fu_244_expanded_key_we0),
    .expanded_key_d0(grp_aes128_expand_key_hw_fu_244_expanded_key_d0),
    .expanded_key_q0(expanded_key_q0)
);

aes128_shift_rows_hw grp_aes128_shift_rows_hw_fu_255(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes128_shift_rows_hw_fu_255_ap_start),
    .ap_done(grp_aes128_shift_rows_hw_fu_255_ap_done),
    .ap_idle(grp_aes128_shift_rows_hw_fu_255_ap_idle),
    .ap_ready(grp_aes128_shift_rows_hw_fu_255_ap_ready),
    .state_address0(grp_aes128_shift_rows_hw_fu_255_state_address0),
    .state_ce0(grp_aes128_shift_rows_hw_fu_255_state_ce0),
    .state_we0(grp_aes128_shift_rows_hw_fu_255_state_we0),
    .state_d0(grp_aes128_shift_rows_hw_fu_255_state_d0),
    .state_q0(state_q0)
);

aes128_extract_round grp_aes128_extract_round_fu_260(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes128_extract_round_fu_260_ap_start),
    .ap_done(grp_aes128_extract_round_fu_260_ap_done),
    .ap_idle(grp_aes128_extract_round_fu_260_ap_idle),
    .ap_ready(grp_aes128_extract_round_fu_260_ap_ready),
    .expanded_key_address0(grp_aes128_extract_round_fu_260_expanded_key_address0),
    .expanded_key_ce0(grp_aes128_extract_round_fu_260_expanded_key_ce0),
    .expanded_key_q0(expanded_key_q0),
    .expanded_key_offset(grp_aes128_extract_round_fu_260_expanded_key_offset),
    .round_key_address0(grp_aes128_extract_round_fu_260_round_key_address0),
    .round_key_ce0(grp_aes128_extract_round_fu_260_round_key_ce0),
    .round_key_we0(grp_aes128_extract_round_fu_260_round_key_we0),
    .round_key_d0(grp_aes128_extract_round_fu_260_round_key_d0)
);

aes128_add_round_key grp_aes128_add_round_key_fu_269(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes128_add_round_key_fu_269_ap_start),
    .ap_done(grp_aes128_add_round_key_fu_269_ap_done),
    .ap_idle(grp_aes128_add_round_key_fu_269_ap_idle),
    .ap_ready(grp_aes128_add_round_key_fu_269_ap_ready),
    .state_address0(grp_aes128_add_round_key_fu_269_state_address0),
    .state_ce0(grp_aes128_add_round_key_fu_269_state_ce0),
    .state_we0(grp_aes128_add_round_key_fu_269_state_we0),
    .state_d0(grp_aes128_add_round_key_fu_269_state_d0),
    .state_q0(state_q0),
    .round_key_address0(grp_aes128_add_round_key_fu_269_round_key_address0),
    .round_key_ce0(grp_aes128_add_round_key_fu_269_round_key_ce0),
    .round_key_q0(round_key_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_aes128_add_round_key_fu_269_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state8))) begin
            grp_aes128_add_round_key_fu_269_ap_start_reg <= 1'b1;
        end else if ((grp_aes128_add_round_key_fu_269_ap_ready == 1'b1)) begin
            grp_aes128_add_round_key_fu_269_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_aes128_expand_key_hw_fu_244_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond4_fu_279_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_aes128_expand_key_hw_fu_244_ap_start_reg <= 1'b1;
        end else if ((grp_aes128_expand_key_hw_fu_244_ap_ready == 1'b1)) begin
            grp_aes128_expand_key_hw_fu_244_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_aes128_extract_round_fu_260_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state20) & (exitcond_i7_fu_397_p2 == 1'd1)) | ((exitcond2_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
            grp_aes128_extract_round_fu_260_ap_start_reg <= 1'b1;
        end else if ((grp_aes128_extract_round_fu_260_ap_ready == 1'b1)) begin
            grp_aes128_extract_round_fu_260_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_aes128_mix_columns_h_fu_239_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state16)) begin
            grp_aes128_mix_columns_h_fu_239_ap_start_reg <= 1'b1;
        end else if ((grp_aes128_mix_columns_h_fu_239_ap_ready == 1'b1)) begin
            grp_aes128_mix_columns_h_fu_239_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_aes128_shift_rows_hw_fu_255_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state20) & (exitcond_i7_fu_397_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_i_fu_369_p2 == 1'd1)))) begin
            grp_aes128_shift_rows_hw_fu_255_ap_start_reg <= 1'b1;
        end else if ((grp_aes128_shift_rows_hw_fu_255_ap_ready == 1'b1)) begin
            grp_aes128_shift_rows_hw_fu_255_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((grp_aes128_add_round_key_fu_269_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state19)) begin
            i_1_reg_183 <= i_13_reg_551;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            i_1_reg_183 <= 4'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & (exitcond_fu_451_p2 == 1'd1))) begin
        i_2_reg_217 <= i_14_reg_587;
    end else if (((grp_aes128_add_round_key_fu_269_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        i_2_reg_217 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond2_fu_350_p2 == 1'd1))) begin
        i_i6_reg_206 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        i_i6_reg_206 <= i_12_reg_564;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_i_reg_195 <= i_3_reg_541;
    end else if (((grp_aes128_extract_round_fu_260_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        i_i_reg_195 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_307_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_161 <= i_11_reg_502;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_161 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_423_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        j_1_reg_228 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        j_1_reg_228 <= j_7_reg_600;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_172 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_172 <= j_6_reg_515;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_11_reg_502 <= i_11_fu_285_p2;
        i_cast_reg_494[2 : 0] <= i_cast_fu_275_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i_12_reg_564 <= i_12_fu_403_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (exitcond_i_fu_369_p2 == 1'd1))) begin
        i_13_reg_551 <= i_13_fu_386_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        i_14_reg_587 <= i_14_fu_429_p2;
        i_2_cast_reg_579[2 : 0] <= i_2_cast_fu_419_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_3_reg_541 <= i_3_fu_375_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_6_reg_515 <= j_6_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        j_7_reg_600 <= j_7_fu_457_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i7_fu_397_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        state_addr_5_reg_569 <= tmp_i8_fu_409_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_369_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        state_addr_6_reg_546 <= tmp_i_fu_381_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_307_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_31_reg_525 <= tmp_31_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_423_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        tmp_33_reg_592[3 : 2] <= tmp_33_fu_439_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_451_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state27))) begin
        tmp_37_reg_610 <= tmp_37_fu_485_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        tmp_41_cast_reg_533[7 : 4] <= tmp_41_cast_fu_364_p1[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_507[3 : 2] <= tmp_fu_295_p3[3 : 2];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) & (exitcond1_fu_423_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) & (exitcond1_fu_423_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state11))) begin
        expanded_key_address0 = grp_aes128_extract_round_fu_260_expanded_key_address0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        expanded_key_address0 = grp_aes128_expand_key_hw_fu_244_expanded_key_address0;
    end else begin
        expanded_key_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state11))) begin
        expanded_key_ce0 = grp_aes128_extract_round_fu_260_expanded_key_ce0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        expanded_key_ce0 = grp_aes128_expand_key_hw_fu_244_expanded_key_ce0;
    end else begin
        expanded_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        expanded_key_we0 = grp_aes128_expand_key_hw_fu_244_expanded_key_we0;
    end else begin
        expanded_key_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_aes128_extract_round_fu_260_expanded_key_offset = 10'd160;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_aes128_extract_round_fu_260_expanded_key_offset = tmp_41_cast_reg_533;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_aes128_extract_round_fu_260_expanded_key_offset = 10'd0;
    end else begin
        grp_aes128_extract_round_fu_260_expanded_key_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state9))) begin
        round_key_address0 = grp_aes128_add_round_key_fu_269_round_key_address0;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state11))) begin
        round_key_address0 = grp_aes128_extract_round_fu_260_round_key_address0;
    end else begin
        round_key_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state9))) begin
        round_key_ce0 = grp_aes128_add_round_key_fu_269_round_key_ce0;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state11))) begin
        round_key_ce0 = grp_aes128_extract_round_fu_260_round_key_ce0;
    end else begin
        round_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state11))) begin
        round_key_we0 = grp_aes128_extract_round_fu_260_round_key_we0;
    end else begin
        round_key_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        sbox_hw_address0 = tmp_i1_fu_414_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        sbox_hw_address0 = tmp_i_19_fu_392_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sbox_hw_address0 = 8'd0;
    end else begin
        sbox_hw_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state13))) begin
        sbox_hw_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sbox_hw_ce0 = 1'b0;
    end else begin
        sbox_hw_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        state_address0 = tmp_36_fu_480_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        state_address0 = state_addr_5_reg_569;
    end else if (((exitcond_i7_fu_397_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        state_address0 = tmp_i8_fu_409_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_address0 = state_addr_6_reg_546;
    end else if (((exitcond_i_fu_369_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        state_address0 = tmp_i_fu_381_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address0 = tmp_32_fu_346_p1;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state9))) begin
        state_address0 = grp_aes128_add_round_key_fu_269_state_address0;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state15))) begin
        state_address0 = grp_aes128_shift_rows_hw_fu_255_state_address0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        state_address0 = grp_aes128_mix_columns_h_fu_239_state_address0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state27) | ((exitcond_i7_fu_397_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20)) | ((exitcond_i_fu_369_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12)))) begin
        state_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state9))) begin
        state_ce0 = grp_aes128_add_round_key_fu_269_state_ce0;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state15))) begin
        state_ce0 = grp_aes128_shift_rows_hw_fu_255_state_ce0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        state_ce0 = grp_aes128_mix_columns_h_fu_239_state_ce0;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14))) begin
        state_d0 = sbox_hw_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_d0 = in_r_q0;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state9))) begin
        state_d0 = grp_aes128_add_round_key_fu_269_state_d0;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state15))) begin
        state_d0 = grp_aes128_shift_rows_hw_fu_255_state_d0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        state_d0 = grp_aes128_mix_columns_h_fu_239_state_d0;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state4))) begin
        state_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state9))) begin
        state_we0 = grp_aes128_add_round_key_fu_269_state_we0;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state15))) begin
        state_we0 = grp_aes128_shift_rows_hw_fu_255_state_we0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        state_we0 = grp_aes128_mix_columns_h_fu_239_state_we0;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond4_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond3_fu_307_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_aes128_expand_key_hw_fu_244_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((grp_aes128_extract_round_fu_260_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((grp_aes128_add_round_key_fu_269_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (exitcond2_fu_350_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((grp_aes128_extract_round_fu_260_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (exitcond_i_fu_369_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state15 : begin
            if (((grp_aes128_shift_rows_hw_fu_255_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((grp_aes128_mix_columns_h_fu_239_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((grp_aes128_add_round_key_fu_269_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (exitcond_i7_fu_397_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state23 : begin
            if (((1'b0 == ap_block_state23_on_subcall_done) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((grp_aes128_add_round_key_fu_269_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (exitcond1_fu_423_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (exitcond_fu_451_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state23_on_subcall_done = ((grp_aes128_extract_round_fu_260_ap_done == 1'b0) | (grp_aes128_shift_rows_hw_fu_255_ap_done == 1'b0));
end

assign exitcond1_fu_423_p2 = ((i_2_reg_217 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond2_fu_350_p2 = ((i_1_reg_183 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond3_fu_307_p2 = ((j_reg_172 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond4_fu_279_p2 = ((i_reg_161 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_451_p2 = ((j_1_reg_228 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_i7_fu_397_p2 = ((i_i6_reg_206 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond_i_fu_369_p2 = ((i_i_reg_195 == 5'd16) ? 1'b1 : 1'b0);

assign grp_aes128_add_round_key_fu_269_ap_start = grp_aes128_add_round_key_fu_269_ap_start_reg;

assign grp_aes128_expand_key_hw_fu_244_ap_start = grp_aes128_expand_key_hw_fu_244_ap_start_reg;

assign grp_aes128_extract_round_fu_260_ap_start = grp_aes128_extract_round_fu_260_ap_start_reg;

assign grp_aes128_mix_columns_h_fu_239_ap_start = grp_aes128_mix_columns_h_fu_239_ap_start_reg;

assign grp_aes128_shift_rows_hw_fu_255_ap_start = grp_aes128_shift_rows_hw_fu_255_ap_start_reg;

assign i_11_fu_285_p2 = (i_reg_161 + 3'd1);

assign i_12_fu_403_p2 = (i_i6_reg_206 + 5'd1);

assign i_13_fu_386_p2 = (i_1_reg_183 + 4'd1);

assign i_14_fu_429_p2 = (i_2_reg_217 + 3'd1);

assign i_2_cast_fu_419_p1 = i_2_reg_217;

assign i_3_fu_375_p2 = (i_i_reg_195 + 5'd1);

assign i_cast_fu_275_p1 = i_reg_161;

assign in_r_address0 = tmp_29_fu_324_p1;

assign j_1_cast_fu_447_p1 = j_1_reg_228;

assign j_6_fu_313_p2 = (j_reg_172 + 3'd1);

assign j_7_fu_457_p2 = (j_1_reg_228 + 3'd1);

assign j_cast_fu_303_p1 = j_reg_172;

assign key_address0 = grp_aes128_expand_key_hw_fu_244_key_address0;

assign key_ce0 = grp_aes128_expand_key_hw_fu_244_key_ce0;

assign out_r_address0 = tmp_38_fu_490_p1;

assign out_r_d0 = state_q0;

assign tmp_28_fu_319_p2 = (j_cast_fu_303_p1 + tmp_reg_507);

assign tmp_29_fu_324_p1 = tmp_28_fu_319_p2;

assign tmp_30_fu_333_p3 = {{tmp_40_fu_329_p1}, {2'd0}};

assign tmp_31_fu_341_p2 = (tmp_30_fu_333_p3 + i_cast_reg_494);

assign tmp_32_fu_346_p1 = tmp_31_reg_525;

assign tmp_33_fu_439_p3 = {{tmp_41_fu_435_p1}, {2'd0}};

assign tmp_34_fu_467_p3 = {{tmp_42_fu_463_p1}, {2'd0}};

assign tmp_35_fu_475_p2 = (tmp_34_fu_467_p3 + i_2_cast_reg_579);

assign tmp_36_fu_480_p1 = tmp_35_fu_475_p2;

assign tmp_37_fu_485_p2 = (j_1_cast_fu_447_p1 + tmp_33_reg_592);

assign tmp_38_fu_490_p1 = tmp_37_reg_610;

assign tmp_39_fu_291_p1 = i_reg_161[1:0];

assign tmp_40_fu_329_p1 = j_reg_172[1:0];

assign tmp_41_cast_fu_364_p1 = tmp_s_fu_356_p3;

assign tmp_41_fu_435_p1 = i_2_reg_217[1:0];

assign tmp_42_fu_463_p1 = j_1_reg_228[1:0];

assign tmp_fu_295_p3 = {{tmp_39_fu_291_p1}, {2'd0}};

assign tmp_i1_fu_414_p1 = state_q0;

assign tmp_i8_fu_409_p1 = i_i6_reg_206;

assign tmp_i_19_fu_392_p1 = state_q0;

assign tmp_i_fu_381_p1 = i_i_reg_195;

assign tmp_s_fu_356_p3 = {{i_1_reg_183}, {4'd0}};

always @ (posedge ap_clk) begin
    i_cast_reg_494[3] <= 1'b0;
    tmp_reg_507[1:0] <= 2'b00;
    tmp_41_cast_reg_533[3:0] <= 4'b0000;
    tmp_41_cast_reg_533[9:8] <= 2'b00;
    i_2_cast_reg_579[3] <= 1'b0;
    tmp_33_reg_592[1:0] <= 2'b00;
end

endmodule //aes128_encrypt_block_hw
