-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes128_encrypt_block_hw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    key_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    key_ce0 : OUT STD_LOGIC;
    key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of aes128_encrypt_block_hw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "aes128_encrypt_block_hw,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.498000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1239,HLS_SYN_LUT=3686,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_A0 : STD_LOGIC_VECTOR (9 downto 0) := "0010100000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sbox_hw_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_hw_ce0 : STD_LOGIC;
    signal sbox_hw_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_cast_fu_275_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_cast_reg_494 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_11_fu_285_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_11_reg_502 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_295_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_507 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond4_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_6_fu_313_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_6_reg_515 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond3_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_341_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_31_reg_525 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_41_cast_fu_364_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_41_cast_reg_533 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond2_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_375_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_541 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal state_addr_6_reg_546 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_i_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_13_fu_386_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_13_reg_551 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_12_fu_403_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_12_reg_564 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal state_addr_5_reg_569 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_i7_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal i_2_cast_fu_419_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_cast_reg_579 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal i_14_fu_429_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_14_reg_587 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_33_fu_439_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_33_reg_592 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_7_fu_457_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_7_reg_600 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal exitcond_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_485_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_37_reg_610 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_ce0 : STD_LOGIC;
    signal state_we0 : STD_LOGIC;
    signal state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal round_key_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal round_key_ce0 : STD_LOGIC;
    signal round_key_we0 : STD_LOGIC;
    signal round_key_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal expanded_key_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal expanded_key_ce0 : STD_LOGIC;
    signal expanded_key_we0 : STD_LOGIC;
    signal expanded_key_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_mix_columns_h_fu_239_ap_start : STD_LOGIC;
    signal grp_aes128_mix_columns_h_fu_239_ap_done : STD_LOGIC;
    signal grp_aes128_mix_columns_h_fu_239_ap_idle : STD_LOGIC;
    signal grp_aes128_mix_columns_h_fu_239_ap_ready : STD_LOGIC;
    signal grp_aes128_mix_columns_h_fu_239_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes128_mix_columns_h_fu_239_state_ce0 : STD_LOGIC;
    signal grp_aes128_mix_columns_h_fu_239_state_we0 : STD_LOGIC;
    signal grp_aes128_mix_columns_h_fu_239_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_expand_key_hw_fu_244_ap_start : STD_LOGIC;
    signal grp_aes128_expand_key_hw_fu_244_ap_done : STD_LOGIC;
    signal grp_aes128_expand_key_hw_fu_244_ap_idle : STD_LOGIC;
    signal grp_aes128_expand_key_hw_fu_244_ap_ready : STD_LOGIC;
    signal grp_aes128_expand_key_hw_fu_244_key_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes128_expand_key_hw_fu_244_key_ce0 : STD_LOGIC;
    signal grp_aes128_expand_key_hw_fu_244_expanded_key_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_expand_key_hw_fu_244_expanded_key_ce0 : STD_LOGIC;
    signal grp_aes128_expand_key_hw_fu_244_expanded_key_we0 : STD_LOGIC;
    signal grp_aes128_expand_key_hw_fu_244_expanded_key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_shift_rows_hw_fu_255_ap_start : STD_LOGIC;
    signal grp_aes128_shift_rows_hw_fu_255_ap_done : STD_LOGIC;
    signal grp_aes128_shift_rows_hw_fu_255_ap_idle : STD_LOGIC;
    signal grp_aes128_shift_rows_hw_fu_255_ap_ready : STD_LOGIC;
    signal grp_aes128_shift_rows_hw_fu_255_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes128_shift_rows_hw_fu_255_state_ce0 : STD_LOGIC;
    signal grp_aes128_shift_rows_hw_fu_255_state_we0 : STD_LOGIC;
    signal grp_aes128_shift_rows_hw_fu_255_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_extract_round_fu_260_ap_start : STD_LOGIC;
    signal grp_aes128_extract_round_fu_260_ap_done : STD_LOGIC;
    signal grp_aes128_extract_round_fu_260_ap_idle : STD_LOGIC;
    signal grp_aes128_extract_round_fu_260_ap_ready : STD_LOGIC;
    signal grp_aes128_extract_round_fu_260_expanded_key_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_extract_round_fu_260_expanded_key_ce0 : STD_LOGIC;
    signal grp_aes128_extract_round_fu_260_expanded_key_offset : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aes128_extract_round_fu_260_round_key_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes128_extract_round_fu_260_round_key_ce0 : STD_LOGIC;
    signal grp_aes128_extract_round_fu_260_round_key_we0 : STD_LOGIC;
    signal grp_aes128_extract_round_fu_260_round_key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_add_round_key_fu_269_ap_start : STD_LOGIC;
    signal grp_aes128_add_round_key_fu_269_ap_done : STD_LOGIC;
    signal grp_aes128_add_round_key_fu_269_ap_idle : STD_LOGIC;
    signal grp_aes128_add_round_key_fu_269_ap_ready : STD_LOGIC;
    signal grp_aes128_add_round_key_fu_269_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes128_add_round_key_fu_269_state_ce0 : STD_LOGIC;
    signal grp_aes128_add_round_key_fu_269_state_we0 : STD_LOGIC;
    signal grp_aes128_add_round_key_fu_269_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_add_round_key_fu_269_round_key_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes128_add_round_key_fu_269_round_key_ce0 : STD_LOGIC;
    signal i_reg_161 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_172 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_1_reg_183 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal i_i_reg_195 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_i6_reg_206 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal i_2_reg_217 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal j_1_reg_228 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_aes128_mix_columns_h_fu_239_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_aes128_expand_key_hw_fu_244_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_aes128_shift_rows_hw_fu_255_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_aes128_extract_round_fu_260_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_aes128_add_round_key_fu_269_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_29_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_19_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i8_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_fu_291_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_cast_fu_303_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_28_fu_319_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_40_fu_329_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_30_fu_333_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_356_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_41_fu_435_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_42_fu_463_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_34_fu_467_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_35_fu_475_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_cast_fu_447_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_block_state23_on_subcall_done : BOOLEAN;

    component aes128_mix_columns_h IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes128_expand_key_hw IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        key_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        key_ce0 : OUT STD_LOGIC;
        key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        expanded_key_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expanded_key_ce0 : OUT STD_LOGIC;
        expanded_key_we0 : OUT STD_LOGIC;
        expanded_key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expanded_key_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes128_shift_rows_hw IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes128_extract_round IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        expanded_key_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expanded_key_ce0 : OUT STD_LOGIC;
        expanded_key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        expanded_key_offset : IN STD_LOGIC_VECTOR (9 downto 0);
        round_key_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        round_key_ce0 : OUT STD_LOGIC;
        round_key_we0 : OUT STD_LOGIC;
        round_key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes128_add_round_key IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        round_key_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        round_key_ce0 : OUT STD_LOGIC;
        round_key_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes128_expand_keybkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes128_encrypt_blg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes128_encrypt_blibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sbox_hw_U : component aes128_expand_keybkb
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sbox_hw_address0,
        ce0 => sbox_hw_ce0,
        q0 => sbox_hw_q0);

    state_U : component aes128_encrypt_blg8j
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_address0,
        ce0 => state_ce0,
        we0 => state_we0,
        d0 => state_d0,
        q0 => state_q0);

    round_key_U : component aes128_encrypt_blg8j
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => round_key_address0,
        ce0 => round_key_ce0,
        we0 => round_key_we0,
        d0 => grp_aes128_extract_round_fu_260_round_key_d0,
        q0 => round_key_q0);

    expanded_key_U : component aes128_encrypt_blibs
    generic map (
        DataWidth => 8,
        AddressRange => 176,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => expanded_key_address0,
        ce0 => expanded_key_ce0,
        we0 => expanded_key_we0,
        d0 => grp_aes128_expand_key_hw_fu_244_expanded_key_d0,
        q0 => expanded_key_q0);

    grp_aes128_mix_columns_h_fu_239 : component aes128_mix_columns_h
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes128_mix_columns_h_fu_239_ap_start,
        ap_done => grp_aes128_mix_columns_h_fu_239_ap_done,
        ap_idle => grp_aes128_mix_columns_h_fu_239_ap_idle,
        ap_ready => grp_aes128_mix_columns_h_fu_239_ap_ready,
        state_address0 => grp_aes128_mix_columns_h_fu_239_state_address0,
        state_ce0 => grp_aes128_mix_columns_h_fu_239_state_ce0,
        state_we0 => grp_aes128_mix_columns_h_fu_239_state_we0,
        state_d0 => grp_aes128_mix_columns_h_fu_239_state_d0,
        state_q0 => state_q0);

    grp_aes128_expand_key_hw_fu_244 : component aes128_expand_key_hw
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes128_expand_key_hw_fu_244_ap_start,
        ap_done => grp_aes128_expand_key_hw_fu_244_ap_done,
        ap_idle => grp_aes128_expand_key_hw_fu_244_ap_idle,
        ap_ready => grp_aes128_expand_key_hw_fu_244_ap_ready,
        key_address0 => grp_aes128_expand_key_hw_fu_244_key_address0,
        key_ce0 => grp_aes128_expand_key_hw_fu_244_key_ce0,
        key_q0 => key_q0,
        expanded_key_address0 => grp_aes128_expand_key_hw_fu_244_expanded_key_address0,
        expanded_key_ce0 => grp_aes128_expand_key_hw_fu_244_expanded_key_ce0,
        expanded_key_we0 => grp_aes128_expand_key_hw_fu_244_expanded_key_we0,
        expanded_key_d0 => grp_aes128_expand_key_hw_fu_244_expanded_key_d0,
        expanded_key_q0 => expanded_key_q0);

    grp_aes128_shift_rows_hw_fu_255 : component aes128_shift_rows_hw
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes128_shift_rows_hw_fu_255_ap_start,
        ap_done => grp_aes128_shift_rows_hw_fu_255_ap_done,
        ap_idle => grp_aes128_shift_rows_hw_fu_255_ap_idle,
        ap_ready => grp_aes128_shift_rows_hw_fu_255_ap_ready,
        state_address0 => grp_aes128_shift_rows_hw_fu_255_state_address0,
        state_ce0 => grp_aes128_shift_rows_hw_fu_255_state_ce0,
        state_we0 => grp_aes128_shift_rows_hw_fu_255_state_we0,
        state_d0 => grp_aes128_shift_rows_hw_fu_255_state_d0,
        state_q0 => state_q0);

    grp_aes128_extract_round_fu_260 : component aes128_extract_round
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes128_extract_round_fu_260_ap_start,
        ap_done => grp_aes128_extract_round_fu_260_ap_done,
        ap_idle => grp_aes128_extract_round_fu_260_ap_idle,
        ap_ready => grp_aes128_extract_round_fu_260_ap_ready,
        expanded_key_address0 => grp_aes128_extract_round_fu_260_expanded_key_address0,
        expanded_key_ce0 => grp_aes128_extract_round_fu_260_expanded_key_ce0,
        expanded_key_q0 => expanded_key_q0,
        expanded_key_offset => grp_aes128_extract_round_fu_260_expanded_key_offset,
        round_key_address0 => grp_aes128_extract_round_fu_260_round_key_address0,
        round_key_ce0 => grp_aes128_extract_round_fu_260_round_key_ce0,
        round_key_we0 => grp_aes128_extract_round_fu_260_round_key_we0,
        round_key_d0 => grp_aes128_extract_round_fu_260_round_key_d0);

    grp_aes128_add_round_key_fu_269 : component aes128_add_round_key
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes128_add_round_key_fu_269_ap_start,
        ap_done => grp_aes128_add_round_key_fu_269_ap_done,
        ap_idle => grp_aes128_add_round_key_fu_269_ap_idle,
        ap_ready => grp_aes128_add_round_key_fu_269_ap_ready,
        state_address0 => grp_aes128_add_round_key_fu_269_state_address0,
        state_ce0 => grp_aes128_add_round_key_fu_269_state_ce0,
        state_we0 => grp_aes128_add_round_key_fu_269_state_we0,
        state_d0 => grp_aes128_add_round_key_fu_269_state_d0,
        state_q0 => state_q0,
        round_key_address0 => grp_aes128_add_round_key_fu_269_round_key_address0,
        round_key_ce0 => grp_aes128_add_round_key_fu_269_round_key_ce0,
        round_key_q0 => round_key_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_aes128_add_round_key_fu_269_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes128_add_round_key_fu_269_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    grp_aes128_add_round_key_fu_269_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes128_add_round_key_fu_269_ap_ready = ap_const_logic_1)) then 
                    grp_aes128_add_round_key_fu_269_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes128_expand_key_hw_fu_244_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes128_expand_key_hw_fu_244_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond4_fu_279_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_aes128_expand_key_hw_fu_244_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes128_expand_key_hw_fu_244_ap_ready = ap_const_logic_1)) then 
                    grp_aes128_expand_key_hw_fu_244_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes128_extract_round_fu_260_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes128_extract_round_fu_260_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond_i7_fu_397_p2 = ap_const_lv1_1)) or ((exitcond2_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
                    grp_aes128_extract_round_fu_260_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes128_extract_round_fu_260_ap_ready = ap_const_logic_1)) then 
                    grp_aes128_extract_round_fu_260_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes128_mix_columns_h_fu_239_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes128_mix_columns_h_fu_239_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    grp_aes128_mix_columns_h_fu_239_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes128_mix_columns_h_fu_239_ap_ready = ap_const_logic_1)) then 
                    grp_aes128_mix_columns_h_fu_239_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes128_shift_rows_hw_fu_255_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes128_shift_rows_hw_fu_255_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond_i7_fu_397_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_i_fu_369_p2 = ap_const_lv1_1)))) then 
                    grp_aes128_shift_rows_hw_fu_255_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes128_shift_rows_hw_fu_255_ap_ready = ap_const_logic_1)) then 
                    grp_aes128_shift_rows_hw_fu_255_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_aes128_add_round_key_fu_269_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    i_1_reg_183 <= i_13_reg_551;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    i_1_reg_183 <= ap_const_lv4_1;
                end if;
            end if; 
        end if;
    end process;

    i_2_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (exitcond_fu_451_p2 = ap_const_lv1_1))) then 
                i_2_reg_217 <= i_14_reg_587;
            elsif (((grp_aes128_add_round_key_fu_269_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                i_2_reg_217 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_i6_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond2_fu_350_p2 = ap_const_lv1_1))) then 
                i_i6_reg_206 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                i_i6_reg_206 <= i_12_reg_564;
            end if; 
        end if;
    end process;

    i_i_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_i_reg_195 <= i_3_reg_541;
            elsif (((grp_aes128_extract_round_fu_260_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_i_reg_195 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_161 <= i_11_reg_502;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_161 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_1_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_423_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                j_1_reg_228 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                j_1_reg_228 <= j_7_reg_600;
            end if; 
        end if;
    end process;

    j_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_279_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_172 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_172 <= j_6_reg_515;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_11_reg_502 <= i_11_fu_285_p2;
                    i_cast_reg_494(2 downto 0) <= i_cast_fu_275_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                i_12_reg_564 <= i_12_fu_403_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_i_fu_369_p2 = ap_const_lv1_1))) then
                i_13_reg_551 <= i_13_fu_386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                i_14_reg_587 <= i_14_fu_429_p2;
                    i_2_cast_reg_579(2 downto 0) <= i_2_cast_fu_419_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_3_reg_541 <= i_3_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_6_reg_515 <= j_6_fu_313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                j_7_reg_600 <= j_7_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i7_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                state_addr_5_reg_569 <= tmp_i8_fu_409_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                state_addr_6_reg_546 <= tmp_i_fu_381_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_307_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_31_reg_525 <= tmp_31_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_423_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    tmp_33_reg_592(3 downto 2) <= tmp_33_fu_439_p3(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_451_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                tmp_37_reg_610 <= tmp_37_fu_485_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    tmp_41_cast_reg_533(7 downto 4) <= tmp_41_cast_fu_364_p1(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_279_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_reg_507(3 downto 2) <= tmp_fu_295_p3(3 downto 2);
            end if;
        end if;
    end process;
    i_cast_reg_494(3) <= '0';
    tmp_reg_507(1 downto 0) <= "00";
    tmp_41_cast_reg_533(3 downto 0) <= "0000";
    tmp_41_cast_reg_533(9 downto 8) <= "00";
    i_2_cast_reg_579(3) <= '0';
    tmp_33_reg_592(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_279_p2, ap_CS_fsm_state3, exitcond3_fu_307_p2, ap_CS_fsm_state10, exitcond2_fu_350_p2, ap_CS_fsm_state12, exitcond_i_fu_369_p2, ap_CS_fsm_state20, exitcond_i7_fu_397_p2, ap_CS_fsm_state26, exitcond1_fu_423_p2, ap_CS_fsm_state27, exitcond_fu_451_p2, grp_aes128_mix_columns_h_fu_239_ap_done, grp_aes128_expand_key_hw_fu_244_ap_done, grp_aes128_shift_rows_hw_fu_255_ap_done, grp_aes128_extract_round_fu_260_ap_done, grp_aes128_add_round_key_fu_269_ap_done, ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state11, ap_CS_fsm_state25, ap_CS_fsm_state17, ap_CS_fsm_state5, ap_CS_fsm_state15, ap_CS_fsm_state23, ap_CS_fsm_state7, ap_block_state23_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond4_fu_279_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((grp_aes128_expand_key_hw_fu_244_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_aes128_extract_round_fu_260_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((grp_aes128_add_round_key_fu_269_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond2_fu_350_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((grp_aes128_extract_round_fu_260_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_i_fu_369_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state15 => 
                if (((grp_aes128_shift_rows_hw_fu_255_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((grp_aes128_mix_columns_h_fu_239_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((grp_aes128_add_round_key_fu_269_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond_i7_fu_397_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state23 => 
                if (((ap_const_boolean_0 = ap_block_state23_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((grp_aes128_add_round_key_fu_269_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond1_fu_423_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (exitcond_fu_451_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state23_on_subcall_done_assign_proc : process(grp_aes128_shift_rows_hw_fu_255_ap_done, grp_aes128_extract_round_fu_260_ap_done)
    begin
                ap_block_state23_on_subcall_done <= ((grp_aes128_extract_round_fu_260_ap_done = ap_const_logic_0) or (grp_aes128_shift_rows_hw_fu_255_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state26, exitcond1_fu_423_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond1_fu_423_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state26, exitcond1_fu_423_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond1_fu_423_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_423_p2 <= "1" when (i_2_reg_217 = ap_const_lv3_4) else "0";
    exitcond2_fu_350_p2 <= "1" when (i_1_reg_183 = ap_const_lv4_A) else "0";
    exitcond3_fu_307_p2 <= "1" when (j_reg_172 = ap_const_lv3_4) else "0";
    exitcond4_fu_279_p2 <= "1" when (i_reg_161 = ap_const_lv3_4) else "0";
    exitcond_fu_451_p2 <= "1" when (j_1_reg_228 = ap_const_lv3_4) else "0";
    exitcond_i7_fu_397_p2 <= "1" when (i_i6_reg_206 = ap_const_lv5_10) else "0";
    exitcond_i_fu_369_p2 <= "1" when (i_i_reg_195 = ap_const_lv5_10) else "0";

    expanded_key_address0_assign_proc : process(grp_aes128_expand_key_hw_fu_244_expanded_key_address0, grp_aes128_extract_round_fu_260_expanded_key_address0, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state23, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            expanded_key_address0 <= grp_aes128_extract_round_fu_260_expanded_key_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            expanded_key_address0 <= grp_aes128_expand_key_hw_fu_244_expanded_key_address0;
        else 
            expanded_key_address0 <= "XXXXXXXX";
        end if; 
    end process;


    expanded_key_ce0_assign_proc : process(grp_aes128_expand_key_hw_fu_244_expanded_key_ce0, grp_aes128_extract_round_fu_260_expanded_key_ce0, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state23, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            expanded_key_ce0 <= grp_aes128_extract_round_fu_260_expanded_key_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            expanded_key_ce0 <= grp_aes128_expand_key_hw_fu_244_expanded_key_ce0;
        else 
            expanded_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expanded_key_we0_assign_proc : process(grp_aes128_expand_key_hw_fu_244_expanded_key_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            expanded_key_we0 <= grp_aes128_expand_key_hw_fu_244_expanded_key_we0;
        else 
            expanded_key_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_aes128_add_round_key_fu_269_ap_start <= grp_aes128_add_round_key_fu_269_ap_start_reg;
    grp_aes128_expand_key_hw_fu_244_ap_start <= grp_aes128_expand_key_hw_fu_244_ap_start_reg;
    grp_aes128_extract_round_fu_260_ap_start <= grp_aes128_extract_round_fu_260_ap_start_reg;

    grp_aes128_extract_round_fu_260_expanded_key_offset_assign_proc : process(tmp_41_cast_reg_533, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_aes128_extract_round_fu_260_expanded_key_offset <= ap_const_lv10_A0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_aes128_extract_round_fu_260_expanded_key_offset <= tmp_41_cast_reg_533;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_aes128_extract_round_fu_260_expanded_key_offset <= ap_const_lv10_0;
        else 
            grp_aes128_extract_round_fu_260_expanded_key_offset <= "XXXXXXXXXX";
        end if; 
    end process;

    grp_aes128_mix_columns_h_fu_239_ap_start <= grp_aes128_mix_columns_h_fu_239_ap_start_reg;
    grp_aes128_shift_rows_hw_fu_255_ap_start <= grp_aes128_shift_rows_hw_fu_255_ap_start_reg;
    i_11_fu_285_p2 <= std_logic_vector(unsigned(i_reg_161) + unsigned(ap_const_lv3_1));
    i_12_fu_403_p2 <= std_logic_vector(unsigned(i_i6_reg_206) + unsigned(ap_const_lv5_1));
    i_13_fu_386_p2 <= std_logic_vector(unsigned(i_1_reg_183) + unsigned(ap_const_lv4_1));
    i_14_fu_429_p2 <= std_logic_vector(unsigned(i_2_reg_217) + unsigned(ap_const_lv3_1));
    i_2_cast_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_217),4));
    i_3_fu_375_p2 <= std_logic_vector(unsigned(i_i_reg_195) + unsigned(ap_const_lv5_1));
    i_cast_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_161),4));
    in_r_address0 <= tmp_29_fu_324_p1(4 - 1 downto 0);

    in_r_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_cast_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_228),4));
    j_6_fu_313_p2 <= std_logic_vector(unsigned(j_reg_172) + unsigned(ap_const_lv3_1));
    j_7_fu_457_p2 <= std_logic_vector(unsigned(j_1_reg_228) + unsigned(ap_const_lv3_1));
    j_cast_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_172),4));
    key_address0 <= grp_aes128_expand_key_hw_fu_244_key_address0;
    key_ce0 <= grp_aes128_expand_key_hw_fu_244_key_ce0;
    out_r_address0 <= tmp_38_fu_490_p1(4 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= state_q0;

    out_r_we0_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    round_key_address0_assign_proc : process(grp_aes128_extract_round_fu_260_round_key_address0, grp_aes128_add_round_key_fu_269_round_key_address0, ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state11, ap_CS_fsm_state25, ap_CS_fsm_state23, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            round_key_address0 <= grp_aes128_add_round_key_fu_269_round_key_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            round_key_address0 <= grp_aes128_extract_round_fu_260_round_key_address0;
        else 
            round_key_address0 <= "XXXX";
        end if; 
    end process;


    round_key_ce0_assign_proc : process(grp_aes128_extract_round_fu_260_round_key_ce0, grp_aes128_add_round_key_fu_269_round_key_ce0, ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state11, ap_CS_fsm_state25, ap_CS_fsm_state23, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            round_key_ce0 <= grp_aes128_add_round_key_fu_269_round_key_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            round_key_ce0 <= grp_aes128_extract_round_fu_260_round_key_ce0;
        else 
            round_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    round_key_we0_assign_proc : process(grp_aes128_extract_round_fu_260_round_key_we0, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            round_key_we0 <= grp_aes128_extract_round_fu_260_round_key_we0;
        else 
            round_key_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_hw_address0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state5, tmp_i_19_fu_392_p1, tmp_i1_fu_414_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            sbox_hw_address0 <= tmp_i1_fu_414_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sbox_hw_address0 <= tmp_i_19_fu_392_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sbox_hw_address0 <= ap_const_lv8_0;
        else 
            sbox_hw_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_hw_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            sbox_hw_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sbox_hw_ce0 <= ap_const_logic_0;
        else 
            sbox_hw_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_address0_assign_proc : process(ap_CS_fsm_state12, state_addr_6_reg_546, exitcond_i_fu_369_p2, ap_CS_fsm_state20, state_addr_5_reg_569, exitcond_i7_fu_397_p2, ap_CS_fsm_state27, grp_aes128_mix_columns_h_fu_239_state_address0, grp_aes128_shift_rows_hw_fu_255_state_address0, grp_aes128_add_round_key_fu_269_state_address0, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state14, ap_CS_fsm_state22, ap_CS_fsm_state25, ap_CS_fsm_state17, ap_CS_fsm_state15, ap_CS_fsm_state23, tmp_32_fu_346_p1, tmp_i_fu_381_p1, tmp_i8_fu_409_p1, tmp_36_fu_480_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            state_address0 <= tmp_36_fu_480_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            state_address0 <= state_addr_5_reg_569;
        elsif (((exitcond_i7_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            state_address0 <= tmp_i8_fu_409_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_address0 <= state_addr_6_reg_546;
        elsif (((exitcond_i_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_address0 <= tmp_i_fu_381_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address0 <= tmp_32_fu_346_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            state_address0 <= grp_aes128_add_round_key_fu_269_state_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            state_address0 <= grp_aes128_shift_rows_hw_fu_255_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_address0 <= grp_aes128_mix_columns_h_fu_239_state_address0;
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_CS_fsm_state12, exitcond_i_fu_369_p2, ap_CS_fsm_state20, exitcond_i7_fu_397_p2, ap_CS_fsm_state27, grp_aes128_mix_columns_h_fu_239_state_ce0, grp_aes128_shift_rows_hw_fu_255_state_ce0, grp_aes128_add_round_key_fu_269_state_ce0, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state14, ap_CS_fsm_state22, ap_CS_fsm_state25, ap_CS_fsm_state17, ap_CS_fsm_state15, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((exitcond_i7_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((exitcond_i_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            state_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            state_ce0 <= grp_aes128_add_round_key_fu_269_state_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            state_ce0 <= grp_aes128_shift_rows_hw_fu_255_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_ce0 <= grp_aes128_mix_columns_h_fu_239_state_ce0;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(in_r_q0, sbox_hw_q0, grp_aes128_mix_columns_h_fu_239_state_d0, grp_aes128_shift_rows_hw_fu_255_state_d0, grp_aes128_add_round_key_fu_269_state_d0, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state14, ap_CS_fsm_state22, ap_CS_fsm_state25, ap_CS_fsm_state17, ap_CS_fsm_state15, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            state_d0 <= sbox_hw_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_d0 <= in_r_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            state_d0 <= grp_aes128_add_round_key_fu_269_state_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            state_d0 <= grp_aes128_shift_rows_hw_fu_255_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_d0 <= grp_aes128_mix_columns_h_fu_239_state_d0;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(grp_aes128_mix_columns_h_fu_239_state_we0, grp_aes128_shift_rows_hw_fu_255_state_we0, grp_aes128_add_round_key_fu_269_state_we0, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state14, ap_CS_fsm_state22, ap_CS_fsm_state25, ap_CS_fsm_state17, ap_CS_fsm_state15, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            state_we0 <= grp_aes128_add_round_key_fu_269_state_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            state_we0 <= grp_aes128_shift_rows_hw_fu_255_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_we0 <= grp_aes128_mix_columns_h_fu_239_state_we0;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_28_fu_319_p2 <= std_logic_vector(unsigned(j_cast_fu_303_p1) + unsigned(tmp_reg_507));
    tmp_29_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_319_p2),64));
    tmp_30_fu_333_p3 <= (tmp_40_fu_329_p1 & ap_const_lv2_0);
    tmp_31_fu_341_p2 <= std_logic_vector(unsigned(tmp_30_fu_333_p3) + unsigned(i_cast_reg_494));
    tmp_32_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_reg_525),64));
    tmp_33_fu_439_p3 <= (tmp_41_fu_435_p1 & ap_const_lv2_0);
    tmp_34_fu_467_p3 <= (tmp_42_fu_463_p1 & ap_const_lv2_0);
    tmp_35_fu_475_p2 <= std_logic_vector(unsigned(tmp_34_fu_467_p3) + unsigned(i_2_cast_reg_579));
    tmp_36_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_475_p2),64));
    tmp_37_fu_485_p2 <= std_logic_vector(unsigned(j_1_cast_fu_447_p1) + unsigned(tmp_33_reg_592));
    tmp_38_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_reg_610),64));
    tmp_39_fu_291_p1 <= i_reg_161(2 - 1 downto 0);
    tmp_40_fu_329_p1 <= j_reg_172(2 - 1 downto 0);
    tmp_41_cast_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_356_p3),10));
    tmp_41_fu_435_p1 <= i_2_reg_217(2 - 1 downto 0);
    tmp_42_fu_463_p1 <= j_1_reg_228(2 - 1 downto 0);
    tmp_fu_295_p3 <= (tmp_39_fu_291_p1 & ap_const_lv2_0);
    tmp_i1_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q0),64));
    tmp_i8_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i6_reg_206),64));
    tmp_i_19_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q0),64));
    tmp_i_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_195),64));
    tmp_s_fu_356_p3 <= (i_1_reg_183 & ap_const_lv4_0);
end behav;
