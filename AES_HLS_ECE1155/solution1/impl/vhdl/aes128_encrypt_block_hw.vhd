-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes128_encrypt_block_hw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    in_r_ce1 : OUT STD_LOGIC;
    in_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    key_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    key_ce0 : OUT STD_LOGIC;
    key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    key_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    key_ce1 : OUT STD_LOGIC;
    key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_r_ce1 : OUT STD_LOGIC;
    out_r_we1 : OUT STD_LOGIC;
    out_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of aes128_encrypt_block_hw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "aes128_encrypt_block_hw,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.498000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=1465,HLS_SYN_LUT=6424,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (58 downto 0) := "00000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (58 downto 0) := "00000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (58 downto 0) := "00000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (58 downto 0) := "00000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (58 downto 0) := "00000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (58 downto 0) := "00000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (58 downto 0) := "00001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (58 downto 0) := "00010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (58 downto 0) := "00100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (58 downto 0) := "01000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (58 downto 0) := "10000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_A0 : STD_LOGIC_VECTOR (9 downto 0) := "0010100000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal state_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_626 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal state_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_632 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_638 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal reg_643 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_reg_683 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal state_addr_19_reg_688 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_20_reg_703 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal state_addr_21_reg_708 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_22_reg_723 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal state_addr_23_reg_728 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_24_reg_743 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal state_addr_25_reg_748 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_26_reg_763 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal state_addr_27_reg_768 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_28_reg_783 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_aes128_expand_key_hw_fu_554_ap_ready : STD_LOGIC;
    signal grp_aes128_expand_key_hw_fu_554_ap_done : STD_LOGIC;
    signal state_addr_29_reg_788 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_30_reg_803 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal state_addr_31_reg_808 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_32_reg_823 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_aes128_extract_round_fu_563_ap_ready : STD_LOGIC;
    signal grp_aes128_extract_round_fu_563_ap_done : STD_LOGIC;
    signal state_addr_33_reg_828 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_19_cast_fu_662_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_19_cast_reg_836 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal exitcond2_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_667_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_841 : STD_LOGIC_VECTOR (3 downto 0);
    signal column_2_reg_846 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal column_3_reg_851 : STD_LOGIC_VECTOR (7 downto 0);
    signal column_0_2_reg_856 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal column_1_2_reg_861 : STD_LOGIC_VECTOR (7 downto 0);
    signal column_2_2_reg_866 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal column_3_2_reg_871 : STD_LOGIC_VECTOR (7 downto 0);
    signal column_0_4_reg_876 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal column_1_4_reg_881 : STD_LOGIC_VECTOR (7 downto 0);
    signal column_2_4_reg_886 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal column_3_4_reg_891 : STD_LOGIC_VECTOR (7 downto 0);
    signal column_0_6_reg_896 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal column_1_6_reg_901 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_ce0 : STD_LOGIC;
    signal state_we0 : STD_LOGIC;
    signal state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_ce1 : STD_LOGIC;
    signal state_we1 : STD_LOGIC;
    signal state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal round_key_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal round_key_ce0 : STD_LOGIC;
    signal round_key_we0 : STD_LOGIC;
    signal round_key_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal round_key_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal round_key_ce1 : STD_LOGIC;
    signal round_key_we1 : STD_LOGIC;
    signal round_key_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal expanded_key_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal expanded_key_ce0 : STD_LOGIC;
    signal expanded_key_we0 : STD_LOGIC;
    signal expanded_key_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal expanded_key_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal expanded_key_ce1 : STD_LOGIC;
    signal expanded_key_we1 : STD_LOGIC;
    signal expanded_key_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_expand_key_hw_fu_554_ap_start : STD_LOGIC;
    signal grp_aes128_expand_key_hw_fu_554_ap_idle : STD_LOGIC;
    signal grp_aes128_expand_key_hw_fu_554_key_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes128_expand_key_hw_fu_554_key_ce0 : STD_LOGIC;
    signal grp_aes128_expand_key_hw_fu_554_key_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes128_expand_key_hw_fu_554_key_ce1 : STD_LOGIC;
    signal grp_aes128_expand_key_hw_fu_554_expanded_key_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_expand_key_hw_fu_554_expanded_key_ce0 : STD_LOGIC;
    signal grp_aes128_expand_key_hw_fu_554_expanded_key_we0 : STD_LOGIC;
    signal grp_aes128_expand_key_hw_fu_554_expanded_key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_expand_key_hw_fu_554_expanded_key_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_expand_key_hw_fu_554_expanded_key_ce1 : STD_LOGIC;
    signal grp_aes128_expand_key_hw_fu_554_expanded_key_we1 : STD_LOGIC;
    signal grp_aes128_expand_key_hw_fu_554_expanded_key_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_extract_round_fu_563_ap_start : STD_LOGIC;
    signal grp_aes128_extract_round_fu_563_ap_idle : STD_LOGIC;
    signal grp_aes128_extract_round_fu_563_expanded_key_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_extract_round_fu_563_expanded_key_ce0 : STD_LOGIC;
    signal grp_aes128_extract_round_fu_563_expanded_key_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_extract_round_fu_563_expanded_key_ce1 : STD_LOGIC;
    signal grp_aes128_extract_round_fu_563_expanded_key_offset : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aes128_extract_round_fu_563_round_key_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes128_extract_round_fu_563_round_key_ce0 : STD_LOGIC;
    signal grp_aes128_extract_round_fu_563_round_key_we0 : STD_LOGIC;
    signal grp_aes128_extract_round_fu_563_round_key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_extract_round_fu_563_round_key_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes128_extract_round_fu_563_round_key_ce1 : STD_LOGIC;
    signal grp_aes128_extract_round_fu_563_round_key_we1 : STD_LOGIC;
    signal grp_aes128_extract_round_fu_563_round_key_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_sub_bytes_hw_fu_572_ap_start : STD_LOGIC;
    signal grp_aes128_sub_bytes_hw_fu_572_ap_done : STD_LOGIC;
    signal grp_aes128_sub_bytes_hw_fu_572_ap_idle : STD_LOGIC;
    signal grp_aes128_sub_bytes_hw_fu_572_ap_ready : STD_LOGIC;
    signal grp_aes128_sub_bytes_hw_fu_572_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes128_sub_bytes_hw_fu_572_state_ce0 : STD_LOGIC;
    signal grp_aes128_sub_bytes_hw_fu_572_state_we0 : STD_LOGIC;
    signal grp_aes128_sub_bytes_hw_fu_572_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_sub_bytes_hw_fu_572_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes128_sub_bytes_hw_fu_572_state_ce1 : STD_LOGIC;
    signal grp_aes128_sub_bytes_hw_fu_572_state_we1 : STD_LOGIC;
    signal grp_aes128_sub_bytes_hw_fu_572_state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_mix_column_hw_fu_579_ap_ready : STD_LOGIC;
    signal grp_aes128_mix_column_hw_fu_579_column_0_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_mix_column_hw_fu_579_column_1_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_mix_column_hw_fu_579_column_2_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_mix_column_hw_fu_579_column_3_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_mix_column_hw_fu_579_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_mix_column_hw_fu_579_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_mix_column_hw_fu_579_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_mix_column_hw_fu_579_ap_return_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_add_round_key_fu_587_ap_start : STD_LOGIC;
    signal grp_aes128_add_round_key_fu_587_ap_done : STD_LOGIC;
    signal grp_aes128_add_round_key_fu_587_ap_idle : STD_LOGIC;
    signal grp_aes128_add_round_key_fu_587_ap_ready : STD_LOGIC;
    signal grp_aes128_add_round_key_fu_587_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes128_add_round_key_fu_587_state_ce0 : STD_LOGIC;
    signal grp_aes128_add_round_key_fu_587_state_we0 : STD_LOGIC;
    signal grp_aes128_add_round_key_fu_587_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_add_round_key_fu_587_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes128_add_round_key_fu_587_state_ce1 : STD_LOGIC;
    signal grp_aes128_add_round_key_fu_587_state_we1 : STD_LOGIC;
    signal grp_aes128_add_round_key_fu_587_state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_add_round_key_fu_587_round_key_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes128_add_round_key_fu_587_round_key_ce0 : STD_LOGIC;
    signal grp_aes128_add_round_key_fu_587_round_key_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes128_add_round_key_fu_587_round_key_ce1 : STD_LOGIC;
    signal grp_aes128_shift_row_hw_fu_593_ap_start : STD_LOGIC;
    signal grp_aes128_shift_row_hw_fu_593_ap_done : STD_LOGIC;
    signal grp_aes128_shift_row_hw_fu_593_ap_idle : STD_LOGIC;
    signal grp_aes128_shift_row_hw_fu_593_ap_ready : STD_LOGIC;
    signal grp_aes128_shift_row_hw_fu_593_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes128_shift_row_hw_fu_593_state_ce0 : STD_LOGIC;
    signal grp_aes128_shift_row_hw_fu_593_state_we0 : STD_LOGIC;
    signal grp_aes128_shift_row_hw_fu_593_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_shift_row_hw_fu_593_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes128_shift_row_hw_fu_593_state_ce1 : STD_LOGIC;
    signal grp_aes128_shift_row_hw_fu_593_state_we1 : STD_LOGIC;
    signal grp_aes128_shift_row_hw_fu_593_state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes128_shift_row_hw_fu_593_state_offset : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes128_shift_row_hw_fu_593_n : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_543 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_aes128_expand_key_hw_fu_554_ap_start_reg : STD_LOGIC := '0';
    signal grp_aes128_extract_round_fu_563_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_aes128_sub_bytes_hw_fu_572_ap_start_reg : STD_LOGIC := '0';
    signal grp_aes128_add_round_key_fu_587_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal grp_aes128_shift_row_hw_fu_593_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal tmp_s_fu_654_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (58 downto 0);
    signal ap_block_state13_on_subcall_done : BOOLEAN;
    signal ap_block_state40_on_subcall_done : BOOLEAN;

    component aes128_expand_key_hw IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        key_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        key_ce0 : OUT STD_LOGIC;
        key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        key_ce1 : OUT STD_LOGIC;
        key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        expanded_key_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expanded_key_ce0 : OUT STD_LOGIC;
        expanded_key_we0 : OUT STD_LOGIC;
        expanded_key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expanded_key_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expanded_key_ce1 : OUT STD_LOGIC;
        expanded_key_we1 : OUT STD_LOGIC;
        expanded_key_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expanded_key_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes128_extract_round IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        expanded_key_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expanded_key_ce0 : OUT STD_LOGIC;
        expanded_key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        expanded_key_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expanded_key_ce1 : OUT STD_LOGIC;
        expanded_key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        expanded_key_offset : IN STD_LOGIC_VECTOR (9 downto 0);
        round_key_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        round_key_ce0 : OUT STD_LOGIC;
        round_key_we0 : OUT STD_LOGIC;
        round_key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        round_key_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        round_key_ce1 : OUT STD_LOGIC;
        round_key_we1 : OUT STD_LOGIC;
        round_key_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes128_sub_bytes_hw IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes128_mix_column_hw IS
    port (
        ap_ready : OUT STD_LOGIC;
        column_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        column_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        column_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        column_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes128_add_round_key IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        round_key_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        round_key_ce0 : OUT STD_LOGIC;
        round_key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        round_key_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        round_key_ce1 : OUT STD_LOGIC;
        round_key_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes128_shift_row_hw IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_offset : IN STD_LOGIC_VECTOR (4 downto 0);
        n : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component aes128_encrypt_bldEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes128_encrypt_blfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    state_U : component aes128_encrypt_bldEe
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_address0,
        ce0 => state_ce0,
        we0 => state_we0,
        d0 => state_d0,
        q0 => state_q0,
        address1 => state_address1,
        ce1 => state_ce1,
        we1 => state_we1,
        d1 => state_d1,
        q1 => state_q1);

    round_key_U : component aes128_encrypt_bldEe
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => round_key_address0,
        ce0 => round_key_ce0,
        we0 => round_key_we0,
        d0 => grp_aes128_extract_round_fu_563_round_key_d0,
        q0 => round_key_q0,
        address1 => round_key_address1,
        ce1 => round_key_ce1,
        we1 => round_key_we1,
        d1 => grp_aes128_extract_round_fu_563_round_key_d1,
        q1 => round_key_q1);

    expanded_key_U : component aes128_encrypt_blfYi
    generic map (
        DataWidth => 8,
        AddressRange => 176,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => expanded_key_address0,
        ce0 => expanded_key_ce0,
        we0 => expanded_key_we0,
        d0 => grp_aes128_expand_key_hw_fu_554_expanded_key_d0,
        q0 => expanded_key_q0,
        address1 => expanded_key_address1,
        ce1 => expanded_key_ce1,
        we1 => expanded_key_we1,
        d1 => grp_aes128_expand_key_hw_fu_554_expanded_key_d1,
        q1 => expanded_key_q1);

    grp_aes128_expand_key_hw_fu_554 : component aes128_expand_key_hw
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes128_expand_key_hw_fu_554_ap_start,
        ap_done => grp_aes128_expand_key_hw_fu_554_ap_done,
        ap_idle => grp_aes128_expand_key_hw_fu_554_ap_idle,
        ap_ready => grp_aes128_expand_key_hw_fu_554_ap_ready,
        key_address0 => grp_aes128_expand_key_hw_fu_554_key_address0,
        key_ce0 => grp_aes128_expand_key_hw_fu_554_key_ce0,
        key_q0 => key_q0,
        key_address1 => grp_aes128_expand_key_hw_fu_554_key_address1,
        key_ce1 => grp_aes128_expand_key_hw_fu_554_key_ce1,
        key_q1 => key_q1,
        expanded_key_address0 => grp_aes128_expand_key_hw_fu_554_expanded_key_address0,
        expanded_key_ce0 => grp_aes128_expand_key_hw_fu_554_expanded_key_ce0,
        expanded_key_we0 => grp_aes128_expand_key_hw_fu_554_expanded_key_we0,
        expanded_key_d0 => grp_aes128_expand_key_hw_fu_554_expanded_key_d0,
        expanded_key_address1 => grp_aes128_expand_key_hw_fu_554_expanded_key_address1,
        expanded_key_ce1 => grp_aes128_expand_key_hw_fu_554_expanded_key_ce1,
        expanded_key_we1 => grp_aes128_expand_key_hw_fu_554_expanded_key_we1,
        expanded_key_d1 => grp_aes128_expand_key_hw_fu_554_expanded_key_d1,
        expanded_key_q1 => expanded_key_q1);

    grp_aes128_extract_round_fu_563 : component aes128_extract_round
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes128_extract_round_fu_563_ap_start,
        ap_done => grp_aes128_extract_round_fu_563_ap_done,
        ap_idle => grp_aes128_extract_round_fu_563_ap_idle,
        ap_ready => grp_aes128_extract_round_fu_563_ap_ready,
        expanded_key_address0 => grp_aes128_extract_round_fu_563_expanded_key_address0,
        expanded_key_ce0 => grp_aes128_extract_round_fu_563_expanded_key_ce0,
        expanded_key_q0 => expanded_key_q0,
        expanded_key_address1 => grp_aes128_extract_round_fu_563_expanded_key_address1,
        expanded_key_ce1 => grp_aes128_extract_round_fu_563_expanded_key_ce1,
        expanded_key_q1 => expanded_key_q1,
        expanded_key_offset => grp_aes128_extract_round_fu_563_expanded_key_offset,
        round_key_address0 => grp_aes128_extract_round_fu_563_round_key_address0,
        round_key_ce0 => grp_aes128_extract_round_fu_563_round_key_ce0,
        round_key_we0 => grp_aes128_extract_round_fu_563_round_key_we0,
        round_key_d0 => grp_aes128_extract_round_fu_563_round_key_d0,
        round_key_address1 => grp_aes128_extract_round_fu_563_round_key_address1,
        round_key_ce1 => grp_aes128_extract_round_fu_563_round_key_ce1,
        round_key_we1 => grp_aes128_extract_round_fu_563_round_key_we1,
        round_key_d1 => grp_aes128_extract_round_fu_563_round_key_d1);

    grp_aes128_sub_bytes_hw_fu_572 : component aes128_sub_bytes_hw
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes128_sub_bytes_hw_fu_572_ap_start,
        ap_done => grp_aes128_sub_bytes_hw_fu_572_ap_done,
        ap_idle => grp_aes128_sub_bytes_hw_fu_572_ap_idle,
        ap_ready => grp_aes128_sub_bytes_hw_fu_572_ap_ready,
        state_address0 => grp_aes128_sub_bytes_hw_fu_572_state_address0,
        state_ce0 => grp_aes128_sub_bytes_hw_fu_572_state_ce0,
        state_we0 => grp_aes128_sub_bytes_hw_fu_572_state_we0,
        state_d0 => grp_aes128_sub_bytes_hw_fu_572_state_d0,
        state_q0 => state_q0,
        state_address1 => grp_aes128_sub_bytes_hw_fu_572_state_address1,
        state_ce1 => grp_aes128_sub_bytes_hw_fu_572_state_ce1,
        state_we1 => grp_aes128_sub_bytes_hw_fu_572_state_we1,
        state_d1 => grp_aes128_sub_bytes_hw_fu_572_state_d1,
        state_q1 => state_q1);

    grp_aes128_mix_column_hw_fu_579 : component aes128_mix_column_hw
    port map (
        ap_ready => grp_aes128_mix_column_hw_fu_579_ap_ready,
        column_0_read => grp_aes128_mix_column_hw_fu_579_column_0_read,
        column_1_read => grp_aes128_mix_column_hw_fu_579_column_1_read,
        column_2_read => grp_aes128_mix_column_hw_fu_579_column_2_read,
        column_3_read => grp_aes128_mix_column_hw_fu_579_column_3_read,
        ap_return_0 => grp_aes128_mix_column_hw_fu_579_ap_return_0,
        ap_return_1 => grp_aes128_mix_column_hw_fu_579_ap_return_1,
        ap_return_2 => grp_aes128_mix_column_hw_fu_579_ap_return_2,
        ap_return_3 => grp_aes128_mix_column_hw_fu_579_ap_return_3);

    grp_aes128_add_round_key_fu_587 : component aes128_add_round_key
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes128_add_round_key_fu_587_ap_start,
        ap_done => grp_aes128_add_round_key_fu_587_ap_done,
        ap_idle => grp_aes128_add_round_key_fu_587_ap_idle,
        ap_ready => grp_aes128_add_round_key_fu_587_ap_ready,
        state_address0 => grp_aes128_add_round_key_fu_587_state_address0,
        state_ce0 => grp_aes128_add_round_key_fu_587_state_ce0,
        state_we0 => grp_aes128_add_round_key_fu_587_state_we0,
        state_d0 => grp_aes128_add_round_key_fu_587_state_d0,
        state_q0 => state_q0,
        state_address1 => grp_aes128_add_round_key_fu_587_state_address1,
        state_ce1 => grp_aes128_add_round_key_fu_587_state_ce1,
        state_we1 => grp_aes128_add_round_key_fu_587_state_we1,
        state_d1 => grp_aes128_add_round_key_fu_587_state_d1,
        state_q1 => state_q1,
        round_key_address0 => grp_aes128_add_round_key_fu_587_round_key_address0,
        round_key_ce0 => grp_aes128_add_round_key_fu_587_round_key_ce0,
        round_key_q0 => round_key_q0,
        round_key_address1 => grp_aes128_add_round_key_fu_587_round_key_address1,
        round_key_ce1 => grp_aes128_add_round_key_fu_587_round_key_ce1,
        round_key_q1 => round_key_q1);

    grp_aes128_shift_row_hw_fu_593 : component aes128_shift_row_hw
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes128_shift_row_hw_fu_593_ap_start,
        ap_done => grp_aes128_shift_row_hw_fu_593_ap_done,
        ap_idle => grp_aes128_shift_row_hw_fu_593_ap_idle,
        ap_ready => grp_aes128_shift_row_hw_fu_593_ap_ready,
        state_address0 => grp_aes128_shift_row_hw_fu_593_state_address0,
        state_ce0 => grp_aes128_shift_row_hw_fu_593_state_ce0,
        state_we0 => grp_aes128_shift_row_hw_fu_593_state_we0,
        state_d0 => grp_aes128_shift_row_hw_fu_593_state_d0,
        state_q0 => state_q0,
        state_address1 => grp_aes128_shift_row_hw_fu_593_state_address1,
        state_ce1 => grp_aes128_shift_row_hw_fu_593_state_ce1,
        state_we1 => grp_aes128_shift_row_hw_fu_593_state_we1,
        state_d1 => grp_aes128_shift_row_hw_fu_593_state_d1,
        state_q1 => state_q1,
        state_offset => grp_aes128_shift_row_hw_fu_593_state_offset,
        n => grp_aes128_shift_row_hw_fu_593_n);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_aes128_add_round_key_fu_587_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes128_add_round_key_fu_587_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    grp_aes128_add_round_key_fu_587_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes128_add_round_key_fu_587_ap_ready = ap_const_logic_1)) then 
                    grp_aes128_add_round_key_fu_587_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes128_expand_key_hw_fu_554_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes128_expand_key_hw_fu_554_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_aes128_expand_key_hw_fu_554_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes128_expand_key_hw_fu_554_ap_ready = ap_const_logic_1)) then 
                    grp_aes128_expand_key_hw_fu_554_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes128_extract_round_fu_563_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes128_extract_round_fu_563_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((exitcond2_fu_648_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((exitcond2_fu_648_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
                    grp_aes128_extract_round_fu_563_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes128_extract_round_fu_563_ap_ready = ap_const_logic_1)) then 
                    grp_aes128_extract_round_fu_563_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes128_shift_row_hw_fu_593_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes128_shift_row_hw_fu_593_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    grp_aes128_shift_row_hw_fu_593_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes128_shift_row_hw_fu_593_ap_ready = ap_const_logic_1)) then 
                    grp_aes128_shift_row_hw_fu_593_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes128_sub_bytes_hw_fu_572_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes128_sub_bytes_hw_fu_572_ap_start_reg <= ap_const_logic_0;
            else
                if ((((exitcond2_fu_648_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((exitcond2_fu_648_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
                    grp_aes128_sub_bytes_hw_fu_572_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes128_sub_bytes_hw_fu_572_ap_ready = ap_const_logic_1)) then 
                    grp_aes128_sub_bytes_hw_fu_572_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_543_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_aes128_add_round_key_fu_587_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                    i_1_reg_543 <= i_reg_841;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    i_1_reg_543 <= ap_const_lv4_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                column_0_2_reg_856 <= state_q0;
                column_1_2_reg_861 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                column_0_4_reg_876 <= state_q0;
                column_1_4_reg_881 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                column_0_6_reg_896 <= state_q0;
                column_1_6_reg_901 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                column_2_2_reg_866 <= state_q0;
                column_3_2_reg_871 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                column_2_4_reg_886 <= state_q0;
                column_3_4_reg_891 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                column_2_reg_846 <= state_q0;
                column_3_reg_851 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_648_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                i_reg_841 <= i_fu_667_p2;
                    tmp_19_cast_reg_836(7 downto 4) <= tmp_19_cast_fu_662_p1(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23))) then
                reg_626 <= state_q0;
                reg_632 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30))) then
                reg_638 <= grp_aes128_mix_column_hw_fu_579_ap_return_2;
                reg_643 <= grp_aes128_mix_column_hw_fu_579_ap_return_3;
            end if;
        end if;
    end process;
    tmp_19_cast_reg_836(3 downto 0) <= "0000";
    tmp_19_cast_reg_836(9 downto 8) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state7, grp_aes128_expand_key_hw_fu_554_ap_done, ap_CS_fsm_state9, grp_aes128_extract_round_fu_563_ap_done, ap_CS_fsm_state12, exitcond2_fu_648_p2, grp_aes128_add_round_key_fu_587_ap_done, grp_aes128_shift_row_hw_fu_593_ap_done, ap_CS_fsm_state11, ap_CS_fsm_state39, ap_CS_fsm_state13, ap_CS_fsm_state40, ap_CS_fsm_state50, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_block_state13_on_subcall_done, ap_block_state40_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_aes128_expand_key_hw_fu_554_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((grp_aes128_extract_round_fu_563_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_aes128_add_round_key_fu_587_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((exitcond2_fu_648_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_boolean_0 = ap_block_state13_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_aes128_shift_row_hw_fu_593_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((grp_aes128_shift_row_hw_fu_593_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((grp_aes128_shift_row_hw_fu_593_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((grp_aes128_shift_row_hw_fu_593_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((grp_aes128_add_round_key_fu_587_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                if (((ap_const_boolean_0 = ap_block_state40_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((grp_aes128_shift_row_hw_fu_593_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((grp_aes128_shift_row_hw_fu_593_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((grp_aes128_shift_row_hw_fu_593_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((grp_aes128_shift_row_hw_fu_593_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((grp_aes128_add_round_key_fu_587_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state13_on_subcall_done_assign_proc : process(grp_aes128_extract_round_fu_563_ap_done, grp_aes128_sub_bytes_hw_fu_572_ap_done)
    begin
                ap_block_state13_on_subcall_done <= ((grp_aes128_sub_bytes_hw_fu_572_ap_done = ap_const_logic_0) or (grp_aes128_extract_round_fu_563_ap_done = ap_const_logic_0));
    end process;


    ap_block_state40_on_subcall_done_assign_proc : process(grp_aes128_extract_round_fu_563_ap_done, grp_aes128_sub_bytes_hw_fu_572_ap_done)
    begin
                ap_block_state40_on_subcall_done <= ((grp_aes128_sub_bytes_hw_fu_572_ap_done = ap_const_logic_0) or (grp_aes128_extract_round_fu_563_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_648_p2 <= "1" when (i_1_reg_543 = ap_const_lv4_A) else "0";

    expanded_key_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9, grp_aes128_expand_key_hw_fu_554_expanded_key_address0, grp_aes128_extract_round_fu_563_expanded_key_address0, ap_CS_fsm_state13, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            expanded_key_address0 <= grp_aes128_extract_round_fu_563_expanded_key_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            expanded_key_address0 <= grp_aes128_expand_key_hw_fu_554_expanded_key_address0;
        else 
            expanded_key_address0 <= "XXXXXXXX";
        end if; 
    end process;


    expanded_key_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9, grp_aes128_expand_key_hw_fu_554_expanded_key_address1, grp_aes128_extract_round_fu_563_expanded_key_address1, ap_CS_fsm_state13, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            expanded_key_address1 <= grp_aes128_extract_round_fu_563_expanded_key_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            expanded_key_address1 <= grp_aes128_expand_key_hw_fu_554_expanded_key_address1;
        else 
            expanded_key_address1 <= "XXXXXXXX";
        end if; 
    end process;


    expanded_key_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9, grp_aes128_expand_key_hw_fu_554_expanded_key_ce0, grp_aes128_extract_round_fu_563_expanded_key_ce0, ap_CS_fsm_state13, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            expanded_key_ce0 <= grp_aes128_extract_round_fu_563_expanded_key_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            expanded_key_ce0 <= grp_aes128_expand_key_hw_fu_554_expanded_key_ce0;
        else 
            expanded_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expanded_key_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9, grp_aes128_expand_key_hw_fu_554_expanded_key_ce1, grp_aes128_extract_round_fu_563_expanded_key_ce1, ap_CS_fsm_state13, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            expanded_key_ce1 <= grp_aes128_extract_round_fu_563_expanded_key_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            expanded_key_ce1 <= grp_aes128_expand_key_hw_fu_554_expanded_key_ce1;
        else 
            expanded_key_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    expanded_key_we0_assign_proc : process(ap_CS_fsm_state7, grp_aes128_expand_key_hw_fu_554_expanded_key_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            expanded_key_we0 <= grp_aes128_expand_key_hw_fu_554_expanded_key_we0;
        else 
            expanded_key_we0 <= ap_const_logic_0;
        end if; 
    end process;


    expanded_key_we1_assign_proc : process(ap_CS_fsm_state7, grp_aes128_expand_key_hw_fu_554_expanded_key_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            expanded_key_we1 <= grp_aes128_expand_key_hw_fu_554_expanded_key_we1;
        else 
            expanded_key_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_aes128_add_round_key_fu_587_ap_start <= grp_aes128_add_round_key_fu_587_ap_start_reg;
    grp_aes128_expand_key_hw_fu_554_ap_start <= grp_aes128_expand_key_hw_fu_554_ap_start_reg;
    grp_aes128_extract_round_fu_563_ap_start <= grp_aes128_extract_round_fu_563_ap_start_reg;

    grp_aes128_extract_round_fu_563_expanded_key_offset_assign_proc : process(ap_CS_fsm_state9, tmp_19_cast_reg_836, ap_CS_fsm_state13, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_aes128_extract_round_fu_563_expanded_key_offset <= ap_const_lv10_A0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_aes128_extract_round_fu_563_expanded_key_offset <= tmp_19_cast_reg_836;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_aes128_extract_round_fu_563_expanded_key_offset <= ap_const_lv10_0;
        else 
            grp_aes128_extract_round_fu_563_expanded_key_offset <= "XXXXXXXXXX";
        end if; 
    end process;


    grp_aes128_mix_column_hw_fu_579_column_0_read_assign_proc : process(reg_626, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, column_0_2_reg_856, column_0_4_reg_876, column_0_6_reg_896)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_aes128_mix_column_hw_fu_579_column_0_read <= column_0_6_reg_896;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_aes128_mix_column_hw_fu_579_column_0_read <= column_0_4_reg_876;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_aes128_mix_column_hw_fu_579_column_0_read <= column_0_2_reg_856;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_aes128_mix_column_hw_fu_579_column_0_read <= reg_626;
        else 
            grp_aes128_mix_column_hw_fu_579_column_0_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_aes128_mix_column_hw_fu_579_column_1_read_assign_proc : process(ap_CS_fsm_state30, reg_632, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, column_1_2_reg_861, column_1_4_reg_881, column_1_6_reg_901)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_aes128_mix_column_hw_fu_579_column_1_read <= column_1_6_reg_901;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_aes128_mix_column_hw_fu_579_column_1_read <= column_1_4_reg_881;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_aes128_mix_column_hw_fu_579_column_1_read <= column_1_2_reg_861;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_aes128_mix_column_hw_fu_579_column_1_read <= reg_632;
        else 
            grp_aes128_mix_column_hw_fu_579_column_1_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_aes128_mix_column_hw_fu_579_column_2_read_assign_proc : process(reg_626, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, column_2_reg_846, column_2_2_reg_866, column_2_4_reg_886)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_aes128_mix_column_hw_fu_579_column_2_read <= reg_626;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_aes128_mix_column_hw_fu_579_column_2_read <= column_2_4_reg_886;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_aes128_mix_column_hw_fu_579_column_2_read <= column_2_2_reg_866;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_aes128_mix_column_hw_fu_579_column_2_read <= column_2_reg_846;
        else 
            grp_aes128_mix_column_hw_fu_579_column_2_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_aes128_mix_column_hw_fu_579_column_3_read_assign_proc : process(ap_CS_fsm_state30, reg_632, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, column_3_reg_851, column_3_2_reg_871, column_3_4_reg_891)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_aes128_mix_column_hw_fu_579_column_3_read <= reg_632;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_aes128_mix_column_hw_fu_579_column_3_read <= column_3_4_reg_891;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_aes128_mix_column_hw_fu_579_column_3_read <= column_3_2_reg_871;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_aes128_mix_column_hw_fu_579_column_3_read <= column_3_reg_851;
        else 
            grp_aes128_mix_column_hw_fu_579_column_3_read <= "XXXXXXXX";
        end if; 
    end process;

    grp_aes128_shift_row_hw_fu_593_ap_start <= grp_aes128_shift_row_hw_fu_593_ap_start_reg;

    grp_aes128_shift_row_hw_fu_593_n_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_aes128_shift_row_hw_fu_593_n <= ap_const_lv4_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_aes128_shift_row_hw_fu_593_n <= ap_const_lv4_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_aes128_shift_row_hw_fu_593_n <= ap_const_lv4_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            grp_aes128_shift_row_hw_fu_593_n <= ap_const_lv4_0;
        else 
            grp_aes128_shift_row_hw_fu_593_n <= "XXXX";
        end if; 
    end process;


    grp_aes128_shift_row_hw_fu_593_state_offset_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_aes128_shift_row_hw_fu_593_state_offset <= ap_const_lv5_C;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_aes128_shift_row_hw_fu_593_state_offset <= ap_const_lv5_8;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_aes128_shift_row_hw_fu_593_state_offset <= ap_const_lv5_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            grp_aes128_shift_row_hw_fu_593_state_offset <= ap_const_lv5_0;
        else 
            grp_aes128_shift_row_hw_fu_593_state_offset <= "XXXXX";
        end if; 
    end process;

    grp_aes128_sub_bytes_hw_fu_572_ap_start <= grp_aes128_sub_bytes_hw_fu_572_ap_start_reg;
    i_fu_667_p2 <= std_logic_vector(unsigned(i_1_reg_543) + unsigned(ap_const_lv4_1));

    in_r_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            in_r_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            in_r_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            in_r_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            in_r_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_r_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_r_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_r_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            in_r_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            in_r_address0 <= "XXXX";
        end if; 
    end process;


    in_r_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            in_r_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            in_r_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            in_r_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            in_r_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_r_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_r_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_r_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            in_r_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            in_r_address1 <= "XXXX";
        end if; 
    end process;


    in_r_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, grp_aes128_expand_key_hw_fu_554_ap_done, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((grp_aes128_expand_key_hw_fu_554_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_r_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, grp_aes128_expand_key_hw_fu_554_ap_done, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((grp_aes128_expand_key_hw_fu_554_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            in_r_ce1 <= ap_const_logic_1;
        else 
            in_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    key_address0 <= grp_aes128_expand_key_hw_fu_554_key_address0;
    key_address1 <= grp_aes128_expand_key_hw_fu_554_key_address1;
    key_ce0 <= grp_aes128_expand_key_hw_fu_554_key_ce0;
    key_ce1 <= grp_aes128_expand_key_hw_fu_554_key_ce1;

    out_r_address0_assign_proc : process(ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            out_r_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            out_r_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            out_r_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            out_r_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            out_r_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            out_r_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            out_r_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            out_r_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            out_r_address0 <= "XXXX";
        end if; 
    end process;


    out_r_address1_assign_proc : process(ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            out_r_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            out_r_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            out_r_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            out_r_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            out_r_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            out_r_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            out_r_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            out_r_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            out_r_address1 <= "XXXX";
        end if; 
    end process;


    out_r_ce0_assign_proc : process(ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_ce1_assign_proc : process(ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            out_r_ce1 <= ap_const_logic_1;
        else 
            out_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= state_q0;
    out_r_d1 <= state_q1;

    out_r_we0_assign_proc : process(ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_we1_assign_proc : process(ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            out_r_we1 <= ap_const_logic_1;
        else 
            out_r_we1 <= ap_const_logic_0;
        end if; 
    end process;


    round_key_address0_assign_proc : process(ap_CS_fsm_state9, grp_aes128_extract_round_fu_563_round_key_address0, grp_aes128_add_round_key_fu_587_round_key_address0, ap_CS_fsm_state11, ap_CS_fsm_state39, ap_CS_fsm_state13, ap_CS_fsm_state40, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            round_key_address0 <= grp_aes128_add_round_key_fu_587_round_key_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            round_key_address0 <= grp_aes128_extract_round_fu_563_round_key_address0;
        else 
            round_key_address0 <= "XXXX";
        end if; 
    end process;


    round_key_address1_assign_proc : process(ap_CS_fsm_state9, grp_aes128_extract_round_fu_563_round_key_address1, grp_aes128_add_round_key_fu_587_round_key_address1, ap_CS_fsm_state11, ap_CS_fsm_state39, ap_CS_fsm_state13, ap_CS_fsm_state40, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            round_key_address1 <= grp_aes128_add_round_key_fu_587_round_key_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            round_key_address1 <= grp_aes128_extract_round_fu_563_round_key_address1;
        else 
            round_key_address1 <= "XXXX";
        end if; 
    end process;


    round_key_ce0_assign_proc : process(ap_CS_fsm_state9, grp_aes128_extract_round_fu_563_round_key_ce0, grp_aes128_add_round_key_fu_587_round_key_ce0, ap_CS_fsm_state11, ap_CS_fsm_state39, ap_CS_fsm_state13, ap_CS_fsm_state40, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            round_key_ce0 <= grp_aes128_add_round_key_fu_587_round_key_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            round_key_ce0 <= grp_aes128_extract_round_fu_563_round_key_ce0;
        else 
            round_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    round_key_ce1_assign_proc : process(ap_CS_fsm_state9, grp_aes128_extract_round_fu_563_round_key_ce1, grp_aes128_add_round_key_fu_587_round_key_ce1, ap_CS_fsm_state11, ap_CS_fsm_state39, ap_CS_fsm_state13, ap_CS_fsm_state40, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            round_key_ce1 <= grp_aes128_add_round_key_fu_587_round_key_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            round_key_ce1 <= grp_aes128_extract_round_fu_563_round_key_ce1;
        else 
            round_key_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    round_key_we0_assign_proc : process(ap_CS_fsm_state9, grp_aes128_extract_round_fu_563_round_key_we0, ap_CS_fsm_state13, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            round_key_we0 <= grp_aes128_extract_round_fu_563_round_key_we0;
        else 
            round_key_we0 <= ap_const_logic_0;
        end if; 
    end process;


    round_key_we1_assign_proc : process(ap_CS_fsm_state9, grp_aes128_extract_round_fu_563_round_key_we1, ap_CS_fsm_state13, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            round_key_we1 <= grp_aes128_extract_round_fu_563_round_key_we1;
        else 
            round_key_we1 <= ap_const_logic_0;
        end if; 
    end process;

    state_addr_19_reg_688 <= ap_const_lv64_4(4 - 1 downto 0);
    state_addr_20_reg_703 <= ap_const_lv64_8(4 - 1 downto 0);
    state_addr_21_reg_708 <= ap_const_lv64_C(4 - 1 downto 0);
    state_addr_22_reg_723 <= ap_const_lv64_1(4 - 1 downto 0);
    state_addr_23_reg_728 <= ap_const_lv64_5(4 - 1 downto 0);
    state_addr_24_reg_743 <= ap_const_lv64_9(4 - 1 downto 0);
    state_addr_25_reg_748 <= ap_const_lv64_D(4 - 1 downto 0);
    state_addr_26_reg_763 <= ap_const_lv64_2(4 - 1 downto 0);
    state_addr_27_reg_768 <= ap_const_lv64_6(4 - 1 downto 0);
    state_addr_28_reg_783 <= ap_const_lv64_A(4 - 1 downto 0);
    state_addr_29_reg_788 <= ap_const_lv64_E(4 - 1 downto 0);
    state_addr_30_reg_803 <= ap_const_lv64_3(4 - 1 downto 0);
    state_addr_31_reg_808 <= ap_const_lv64_7(4 - 1 downto 0);
    state_addr_32_reg_823 <= ap_const_lv64_B(4 - 1 downto 0);
    state_addr_33_reg_828 <= ap_const_lv64_F(4 - 1 downto 0);
    state_addr_reg_683 <= ap_const_lv64_0(4 - 1 downto 0);

    state_address0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, state_addr_reg_683, ap_CS_fsm_state2, state_addr_20_reg_703, ap_CS_fsm_state3, state_addr_22_reg_723, ap_CS_fsm_state4, state_addr_24_reg_743, ap_CS_fsm_state5, state_addr_26_reg_763, ap_CS_fsm_state6, state_addr_28_reg_783, ap_CS_fsm_state7, state_addr_30_reg_803, ap_CS_fsm_state8, state_addr_32_reg_823, ap_CS_fsm_state9, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, grp_aes128_sub_bytes_hw_fu_572_state_address0, grp_aes128_add_round_key_fu_587_state_address0, grp_aes128_shift_row_hw_fu_593_state_address0, ap_CS_fsm_state11, ap_CS_fsm_state39, ap_CS_fsm_state13, ap_CS_fsm_state40, ap_CS_fsm_state50, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state22, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            state_address0 <= state_addr_32_reg_823;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            state_address0 <= state_addr_30_reg_803;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            state_address0 <= state_addr_28_reg_783;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            state_address0 <= state_addr_26_reg_763;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            state_address0 <= state_addr_24_reg_743;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            state_address0 <= state_addr_22_reg_723;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            state_address0 <= state_addr_20_reg_703;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            state_address0 <= state_addr_reg_683;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            state_address0 <= grp_aes128_shift_row_hw_fu_593_state_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            state_address0 <= grp_aes128_add_round_key_fu_587_state_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            state_address0 <= grp_aes128_sub_bytes_hw_fu_572_state_address0;
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state2, state_addr_19_reg_688, ap_CS_fsm_state3, state_addr_21_reg_708, ap_CS_fsm_state4, state_addr_23_reg_728, ap_CS_fsm_state5, state_addr_25_reg_748, ap_CS_fsm_state6, state_addr_27_reg_768, ap_CS_fsm_state7, state_addr_29_reg_788, ap_CS_fsm_state8, state_addr_31_reg_808, ap_CS_fsm_state9, state_addr_33_reg_828, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, grp_aes128_sub_bytes_hw_fu_572_state_address1, grp_aes128_add_round_key_fu_587_state_address1, grp_aes128_shift_row_hw_fu_593_state_address1, ap_CS_fsm_state11, ap_CS_fsm_state39, ap_CS_fsm_state13, ap_CS_fsm_state40, ap_CS_fsm_state50, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state22, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            state_address1 <= state_addr_33_reg_828;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            state_address1 <= state_addr_31_reg_808;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            state_address1 <= state_addr_29_reg_788;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            state_address1 <= state_addr_27_reg_768;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            state_address1 <= state_addr_25_reg_748;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            state_address1 <= state_addr_23_reg_728;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            state_address1 <= state_addr_21_reg_708;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            state_address1 <= state_addr_19_reg_688;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            state_address1 <= grp_aes128_shift_row_hw_fu_593_state_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            state_address1 <= grp_aes128_add_round_key_fu_587_state_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            state_address1 <= grp_aes128_sub_bytes_hw_fu_572_state_address1;
        else 
            state_address1 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, grp_aes128_expand_key_hw_fu_554_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state9, grp_aes128_extract_round_fu_563_ap_done, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, grp_aes128_sub_bytes_hw_fu_572_state_ce0, grp_aes128_add_round_key_fu_587_state_ce0, grp_aes128_shift_row_hw_fu_593_state_ce0, ap_CS_fsm_state11, ap_CS_fsm_state39, ap_CS_fsm_state13, ap_CS_fsm_state40, ap_CS_fsm_state50, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state22, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((grp_aes128_extract_round_fu_563_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((grp_aes128_expand_key_hw_fu_554_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            state_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            state_ce0 <= grp_aes128_shift_row_hw_fu_593_state_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            state_ce0 <= grp_aes128_add_round_key_fu_587_state_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            state_ce0 <= grp_aes128_sub_bytes_hw_fu_572_state_ce0;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, grp_aes128_expand_key_hw_fu_554_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state9, grp_aes128_extract_round_fu_563_ap_done, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, grp_aes128_sub_bytes_hw_fu_572_state_ce1, grp_aes128_add_round_key_fu_587_state_ce1, grp_aes128_shift_row_hw_fu_593_state_ce1, ap_CS_fsm_state11, ap_CS_fsm_state39, ap_CS_fsm_state13, ap_CS_fsm_state40, ap_CS_fsm_state50, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state22, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((grp_aes128_extract_round_fu_563_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((grp_aes128_expand_key_hw_fu_554_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            state_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            state_ce1 <= grp_aes128_shift_row_hw_fu_593_state_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            state_ce1 <= grp_aes128_add_round_key_fu_587_state_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            state_ce1 <= grp_aes128_sub_bytes_hw_fu_572_state_ce1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(in_r_q0, ap_CS_fsm_state30, reg_638, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, grp_aes128_sub_bytes_hw_fu_572_state_d0, grp_aes128_mix_column_hw_fu_579_ap_return_0, grp_aes128_add_round_key_fu_587_state_d0, grp_aes128_shift_row_hw_fu_593_state_d0, ap_CS_fsm_state11, ap_CS_fsm_state39, ap_CS_fsm_state13, ap_CS_fsm_state40, ap_CS_fsm_state50, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            state_d0 <= reg_638;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            state_d0 <= grp_aes128_mix_column_hw_fu_579_ap_return_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            state_d0 <= in_r_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            state_d0 <= grp_aes128_shift_row_hw_fu_593_state_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            state_d0 <= grp_aes128_add_round_key_fu_587_state_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            state_d0 <= grp_aes128_sub_bytes_hw_fu_572_state_d0;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_d1_assign_proc : process(in_r_q1, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, reg_643, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, grp_aes128_sub_bytes_hw_fu_572_state_d1, grp_aes128_mix_column_hw_fu_579_ap_return_1, grp_aes128_add_round_key_fu_587_state_d1, grp_aes128_shift_row_hw_fu_593_state_d1, ap_CS_fsm_state11, ap_CS_fsm_state39, ap_CS_fsm_state13, ap_CS_fsm_state40, ap_CS_fsm_state50, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            state_d1 <= reg_643;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            state_d1 <= grp_aes128_mix_column_hw_fu_579_ap_return_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            state_d1 <= in_r_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            state_d1 <= grp_aes128_shift_row_hw_fu_593_state_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            state_d1 <= grp_aes128_add_round_key_fu_587_state_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            state_d1 <= grp_aes128_sub_bytes_hw_fu_572_state_d1;
        else 
            state_d1 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, grp_aes128_expand_key_hw_fu_554_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state9, grp_aes128_extract_round_fu_563_ap_done, grp_aes128_sub_bytes_hw_fu_572_state_we0, grp_aes128_add_round_key_fu_587_state_we0, grp_aes128_shift_row_hw_fu_593_state_we0, ap_CS_fsm_state11, ap_CS_fsm_state39, ap_CS_fsm_state13, ap_CS_fsm_state40, ap_CS_fsm_state50, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or ((grp_aes128_extract_round_fu_563_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((grp_aes128_expand_key_hw_fu_554_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            state_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            state_we0 <= grp_aes128_shift_row_hw_fu_593_state_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            state_we0 <= grp_aes128_add_round_key_fu_587_state_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            state_we0 <= grp_aes128_sub_bytes_hw_fu_572_state_we0;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_we1_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, grp_aes128_expand_key_hw_fu_554_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state9, grp_aes128_extract_round_fu_563_ap_done, grp_aes128_sub_bytes_hw_fu_572_state_we1, grp_aes128_add_round_key_fu_587_state_we1, grp_aes128_shift_row_hw_fu_593_state_we1, ap_CS_fsm_state11, ap_CS_fsm_state39, ap_CS_fsm_state13, ap_CS_fsm_state40, ap_CS_fsm_state50, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or ((grp_aes128_extract_round_fu_563_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((grp_aes128_expand_key_hw_fu_554_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            state_we1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            state_we1 <= grp_aes128_shift_row_hw_fu_593_state_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            state_we1 <= grp_aes128_add_round_key_fu_587_state_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            state_we1 <= grp_aes128_sub_bytes_hw_fu_572_state_we1;
        else 
            state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_19_cast_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_654_p3),10));
    tmp_s_fu_654_p3 <= (i_1_reg_543 & ap_const_lv4_0);
end behav;
